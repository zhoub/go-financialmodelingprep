// Package gofmp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 6efb8729c49d05fcc2d90d9553b4bccb0e2e9055 DO NOT EDIT.
package gofmp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// FinancialEstimates defines model for FinancialEstimates.
type FinancialEstimates struct {
	Date               openapi_types.Date `json:"date"`
	EbitAvg            float64            `json:"ebitAvg"`
	EbitHigh           float32            `json:"ebitHigh"`
	EbitLow            float64            `json:"ebitLow"`
	EbitdaAvg          float64            `json:"ebitdaAvg"`
	EbitdaHigh         float64            `json:"ebitdaHigh"`
	EbitdaLow          float32            `json:"ebitdaLow"`
	EpsAvg             float64            `json:"epsAvg"`
	EpsHigh            float64            `json:"epsHigh"`
	EpsLow             float64            `json:"epsLow"`
	NetIncomeAvg       float64            `json:"netIncomeAvg"`
	NetIncomeHigh      float32            `json:"netIncomeHigh"`
	NetIncomeLow       float64            `json:"netIncomeLow"`
	NumAnalystsEps     int                `json:"numAnalystsEps"`
	NumAnalystsRevenue int                `json:"numAnalystsRevenue"`
	RevenueAvg         float64            `json:"revenueAvg"`
	RevenueHigh        float64            `json:"revenueHigh"`
	RevenueLow         float64            `json:"revenueLow"`
	SgaExpenseAvg      float64            `json:"sgaExpenseAvg"`
	SgaExpenseHigh     float64            `json:"sgaExpenseHigh"`
	SgaExpenseLow      float64            `json:"sgaExpenseLow"`
	Symbol             string             `json:"symbol"`
}

// FullCandle defines model for FullCandle.
type FullCandle struct {
	Change        float64            `json:"change"`
	ChangePercent float64            `json:"changePercent"`
	Close         float64            `json:"close"`
	Date          openapi_types.Date `json:"date"`
	High          float64            `json:"high"`
	Low           float64            `json:"low"`
	Open          float64            `json:"open"`
	Symbol        string             `json:"symbol"`
	Volume        int                `json:"volume"`
	Vwap          float64            `json:"vwap"`
}

// LightCandle defines model for LightCandle.
type LightCandle struct {
	Date   openapi_types.Date `json:"date"`
	Price  float32            `json:"price"`
	Symbol string             `json:"symbol"`
	Volume int                `json:"volume"`
}

// News defines model for News.
type News struct {
	Action          string    `json:"action"`
	GradingCompany  string    `json:"gradingCompany"`
	NewGrade        string    `json:"newGrade"`
	NewsBaseURL     string    `json:"newsBaseURL"`
	NewsPublisher   string    `json:"newsPublisher"`
	NewsTitle       string    `json:"newsTitle"`
	NewsURL         string    `json:"newsURL"`
	PreviousGrade   string    `json:"previousGrade"`
	PriceWhenPosted float32   `json:"priceWhenPosted"`
	PublishedDate   time.Time `json:"publishedDate"`
	Symbol          string    `json:"symbol"`
}

// SearchSymbol defines model for SearchSymbol.
type SearchSymbol struct {
	Currency         string `json:"currency"`
	Exchange         string `json:"exchange"`
	ExchangeFullName string `json:"exchangeFullName"`
	Name             string `json:"name"`
	Symbol           string `json:"symbol"`
}

// GetAnalystEstimatesParams defines parameters for GetAnalystEstimates.
type GetAnalystEstimatesParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Period string `form:"period" json:"period"`
	Page   *int   `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetGradesLatestNewsParams defines parameters for GetGradesLatestNews.
type GetGradesLatestNewsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetHistoricalPriceEodFullParams defines parameters for GetHistoricalPriceEodFull.
type GetHistoricalPriceEodFullParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// GetHistoricalPriceEodLightParams defines parameters for GetHistoricalPriceEodLight.
type GetHistoricalPriceEodLightParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// GetRatingsSnapshotParams defines parameters for GetRatingsSnapshot.
type GetRatingsSnapshotParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchNameParams defines parameters for GetSearchName.
type GetSearchNameParams struct {
	SearchSymbol string  `form:"search-symbol" json:"search-symbol"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange     *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// GetSearchSymbolParams defines parameters for GetSearchSymbol.
type GetSearchSymbolParams struct {
	SearchSymbol string `form:"search-symbol" json:"search-symbol"`
}

type OperationPath string

const (

	// /analyst-estimates
	GetAnalystEstimatesOperationPath OperationPath = "/analyst-estimates"

	// /grades-latest-news
	GetGradesLatestNewsOperationPath OperationPath = "/grades-latest-news"

	// /historical-price-eod/full
	GetHistoricalPriceEodFullOperationPath OperationPath = "/historical-price-eod/full"

	// /historical-price-eod/light
	GetHistoricalPriceEodLightOperationPath OperationPath = "/historical-price-eod/light"

	// /ratings-snapshot
	GetRatingsSnapshotOperationPath OperationPath = "/ratings-snapshot"

	// /search-name
	GetSearchNameOperationPath OperationPath = "/search-name"

	// /search-symbol
	GetSearchSymbolOperationPath OperationPath = "/search-symbol"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAnalystEstimates request
	GetAnalystEstimates(ctx context.Context, params *GetAnalystEstimatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGradesLatestNews request
	GetGradesLatestNews(ctx context.Context, params *GetGradesLatestNewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHistoricalPriceEodFull request
	GetHistoricalPriceEodFull(ctx context.Context, params *GetHistoricalPriceEodFullParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHistoricalPriceEodLight request
	GetHistoricalPriceEodLight(ctx context.Context, params *GetHistoricalPriceEodLightParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRatingsSnapshot request
	GetRatingsSnapshot(ctx context.Context, params *GetRatingsSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchName request
	GetSearchName(ctx context.Context, params *GetSearchNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchSymbol request
	GetSearchSymbol(ctx context.Context, params *GetSearchSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAnalystEstimates(ctx context.Context, params *GetAnalystEstimatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnalystEstimatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGradesLatestNews(ctx context.Context, params *GetGradesLatestNewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGradesLatestNewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHistoricalPriceEodFull(ctx context.Context, params *GetHistoricalPriceEodFullParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHistoricalPriceEodFullRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHistoricalPriceEodLight(ctx context.Context, params *GetHistoricalPriceEodLightParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHistoricalPriceEodLightRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRatingsSnapshot(ctx context.Context, params *GetRatingsSnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRatingsSnapshotRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchName(ctx context.Context, params *GetSearchNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchSymbol(ctx context.Context, params *GetSearchSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchSymbolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAnalystEstimatesRequest generates requests for GetAnalystEstimates
func NewGetAnalystEstimatesRequest(server string, params *GetAnalystEstimatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyst-estimates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGradesLatestNewsRequest generates requests for GetGradesLatestNews
func NewGetGradesLatestNewsRequest(server string, params *GetGradesLatestNewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades-latest-news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHistoricalPriceEodFullRequest generates requests for GetHistoricalPriceEodFull
func NewGetHistoricalPriceEodFullRequest(server string, params *GetHistoricalPriceEodFullParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHistoricalPriceEodLightRequest generates requests for GetHistoricalPriceEodLight
func NewGetHistoricalPriceEodLightRequest(server string, params *GetHistoricalPriceEodLightParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/light")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRatingsSnapshotRequest generates requests for GetRatingsSnapshot
func NewGetRatingsSnapshotRequest(server string, params *GetRatingsSnapshotParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratings-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchNameRequest generates requests for GetSearchName
func NewGetSearchNameRequest(server string, params *GetSearchNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchSymbolRequest generates requests for GetSearchSymbol
func NewGetSearchSymbolRequest(server string, params *GetSearchSymbolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAnalystEstimatesWithResponse request
	GetAnalystEstimatesWithResponse(ctx context.Context, params *GetAnalystEstimatesParams, reqEditors ...RequestEditorFn) (*GetAnalystEstimatesClientResponse, error)

	// GetGradesLatestNewsWithResponse request
	GetGradesLatestNewsWithResponse(ctx context.Context, params *GetGradesLatestNewsParams, reqEditors ...RequestEditorFn) (*GetGradesLatestNewsClientResponse, error)

	// GetHistoricalPriceEodFullWithResponse request
	GetHistoricalPriceEodFullWithResponse(ctx context.Context, params *GetHistoricalPriceEodFullParams, reqEditors ...RequestEditorFn) (*GetHistoricalPriceEodFullClientResponse, error)

	// GetHistoricalPriceEodLightWithResponse request
	GetHistoricalPriceEodLightWithResponse(ctx context.Context, params *GetHistoricalPriceEodLightParams, reqEditors ...RequestEditorFn) (*GetHistoricalPriceEodLightClientResponse, error)

	// GetRatingsSnapshotWithResponse request
	GetRatingsSnapshotWithResponse(ctx context.Context, params *GetRatingsSnapshotParams, reqEditors ...RequestEditorFn) (*GetRatingsSnapshotClientResponse, error)

	// GetSearchNameWithResponse request
	GetSearchNameWithResponse(ctx context.Context, params *GetSearchNameParams, reqEditors ...RequestEditorFn) (*GetSearchNameClientResponse, error)

	// GetSearchSymbolWithResponse request
	GetSearchSymbolWithResponse(ctx context.Context, params *GetSearchSymbolParams, reqEditors ...RequestEditorFn) (*GetSearchSymbolClientResponse, error)
}

type GetAnalystEstimatesClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialEstimates
}

// Status returns HTTPResponse.Status
func (r GetAnalystEstimatesClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnalystEstimatesClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGradesLatestNewsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]News
}

// Status returns HTTPResponse.Status
func (r GetGradesLatestNewsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGradesLatestNewsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHistoricalPriceEodFullClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullCandle
}

// Status returns HTTPResponse.Status
func (r GetHistoricalPriceEodFullClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHistoricalPriceEodFullClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHistoricalPriceEodLightClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LightCandle
}

// Status returns HTTPResponse.Status
func (r GetHistoricalPriceEodLightClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHistoricalPriceEodLightClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRatingsSnapshotClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRatingsSnapshotClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRatingsSnapshotClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchNameClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r GetSearchNameClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchNameClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchSymbolClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r GetSearchSymbolClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchSymbolClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAnalystEstimatesWithResponse request returning *GetAnalystEstimatesClientResponse
func (c *ClientWithResponses) GetAnalystEstimatesWithResponse(ctx context.Context, params *GetAnalystEstimatesParams, reqEditors ...RequestEditorFn) (*GetAnalystEstimatesClientResponse, error) {
	rsp, err := c.GetAnalystEstimates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnalystEstimatesClientResponse(rsp)
}

// GetGradesLatestNewsWithResponse request returning *GetGradesLatestNewsClientResponse
func (c *ClientWithResponses) GetGradesLatestNewsWithResponse(ctx context.Context, params *GetGradesLatestNewsParams, reqEditors ...RequestEditorFn) (*GetGradesLatestNewsClientResponse, error) {
	rsp, err := c.GetGradesLatestNews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGradesLatestNewsClientResponse(rsp)
}

// GetHistoricalPriceEodFullWithResponse request returning *GetHistoricalPriceEodFullClientResponse
func (c *ClientWithResponses) GetHistoricalPriceEodFullWithResponse(ctx context.Context, params *GetHistoricalPriceEodFullParams, reqEditors ...RequestEditorFn) (*GetHistoricalPriceEodFullClientResponse, error) {
	rsp, err := c.GetHistoricalPriceEodFull(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHistoricalPriceEodFullClientResponse(rsp)
}

// GetHistoricalPriceEodLightWithResponse request returning *GetHistoricalPriceEodLightClientResponse
func (c *ClientWithResponses) GetHistoricalPriceEodLightWithResponse(ctx context.Context, params *GetHistoricalPriceEodLightParams, reqEditors ...RequestEditorFn) (*GetHistoricalPriceEodLightClientResponse, error) {
	rsp, err := c.GetHistoricalPriceEodLight(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHistoricalPriceEodLightClientResponse(rsp)
}

// GetRatingsSnapshotWithResponse request returning *GetRatingsSnapshotClientResponse
func (c *ClientWithResponses) GetRatingsSnapshotWithResponse(ctx context.Context, params *GetRatingsSnapshotParams, reqEditors ...RequestEditorFn) (*GetRatingsSnapshotClientResponse, error) {
	rsp, err := c.GetRatingsSnapshot(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRatingsSnapshotClientResponse(rsp)
}

// GetSearchNameWithResponse request returning *GetSearchNameClientResponse
func (c *ClientWithResponses) GetSearchNameWithResponse(ctx context.Context, params *GetSearchNameParams, reqEditors ...RequestEditorFn) (*GetSearchNameClientResponse, error) {
	rsp, err := c.GetSearchName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchNameClientResponse(rsp)
}

// GetSearchSymbolWithResponse request returning *GetSearchSymbolClientResponse
func (c *ClientWithResponses) GetSearchSymbolWithResponse(ctx context.Context, params *GetSearchSymbolParams, reqEditors ...RequestEditorFn) (*GetSearchSymbolClientResponse, error) {
	rsp, err := c.GetSearchSymbol(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchSymbolClientResponse(rsp)
}

// ParseGetAnalystEstimatesClientResponse parses an HTTP response from a GetAnalystEstimatesWithResponse call
func ParseGetAnalystEstimatesClientResponse(rsp *http.Response) (*GetAnalystEstimatesClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnalystEstimatesClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialEstimates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGradesLatestNewsClientResponse parses an HTTP response from a GetGradesLatestNewsWithResponse call
func ParseGetGradesLatestNewsClientResponse(rsp *http.Response) (*GetGradesLatestNewsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGradesLatestNewsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []News
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHistoricalPriceEodFullClientResponse parses an HTTP response from a GetHistoricalPriceEodFullWithResponse call
func ParseGetHistoricalPriceEodFullClientResponse(rsp *http.Response) (*GetHistoricalPriceEodFullClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHistoricalPriceEodFullClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHistoricalPriceEodLightClientResponse parses an HTTP response from a GetHistoricalPriceEodLightWithResponse call
func ParseGetHistoricalPriceEodLightClientResponse(rsp *http.Response) (*GetHistoricalPriceEodLightClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHistoricalPriceEodLightClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LightCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRatingsSnapshotClientResponse parses an HTTP response from a GetRatingsSnapshotWithResponse call
func ParseGetRatingsSnapshotClientResponse(rsp *http.Response) (*GetRatingsSnapshotClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRatingsSnapshotClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchNameClientResponse parses an HTTP response from a GetSearchNameWithResponse call
func ParseGetSearchNameClientResponse(rsp *http.Response) (*GetSearchNameClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchNameClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchSymbolClientResponse parses an HTTP response from a GetSearchSymbolWithResponse call
func ParseGetSearchSymbolClientResponse(rsp *http.Response) (*GetSearchSymbolClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchSymbolClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MkySgkGhvnucLjRPL/8OAAD//5vZDprOHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
