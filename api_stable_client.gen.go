// Package financialmodelingprep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 6efb8729c49d05fcc2d90d9553b4bccb0e2e9055 DO NOT EDIT.
package financialmodelingprep

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for Period.
const (
	Annual  Period = "annual"
	FY      Period = "FY"
	Q1      Period = "Q1"
	Q2      Period = "Q2"
	Q3      Period = "Q3"
	Q4      Period = "Q4"
	Quarter Period = "quarter"
)

// BalanceSheetStatement defines model for BalanceSheetStatement.
type BalanceSheetStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float64            `json:"accountPayables"`
	AccountsReceivables                     float64            `json:"accountsReceivables"`
	AccruedExpenses                         float64            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float64            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float64            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float64            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float64            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float64            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float64            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float64            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float64            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float64            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float64            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float64            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float64            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float64            `json:"intangibleAssets"`
	Inventory                               float64            `json:"inventory"`
	LongTermDebt                            float64            `json:"longTermDebt"`
	LongTermInvestments                     float64            `json:"longTermInvestments"`
	MinorityInterest                        float64            `json:"minorityInterest"`
	NetDebt                                 float64            `json:"netDebt"`
	NetReceivables                          float64            `json:"netReceivables"`
	OtherAssets                             float64            `json:"otherAssets"`
	OtherCurrentAssets                      float64            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float64            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float64            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float64            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float64            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float64            `json:"otherPayables"`
	OtherReceivables                        float64            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float64            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float64            `json:"preferredStock"`
	Prepaids                                float64            `json:"prepaids"`
	PropertyPlantEquipmentNet               float64            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float64            `json:"retainedEarnings"`
	ShortTermDebt                           float64            `json:"shortTermDebt"`
	ShortTermInvestments                    float64            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float64            `json:"taxAssets"`
	TaxPayables                             float64            `json:"taxPayables"`
	TotalAssets                             float64            `json:"totalAssets"`
	TotalCurrentAssets                      float64            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float64            `json:"totalCurrentLiabilities"`
	TotalDebt                               float64            `json:"totalDebt"`
	TotalEquity                             float64            `json:"totalEquity"`
	TotalInvestments                        float64            `json:"totalInvestments"`
	TotalLiabilities                        float64            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float64            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float64            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float64            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float64            `json:"totalPayables"`
	TotalStockholdersEquity                 float64            `json:"totalStockholdersEquity"`
	TreasuryStock                           float64            `json:"treasuryStock"`
}

// BalanceSheetStatementTtm defines model for BalanceSheetStatementTtm.
type BalanceSheetStatementTtm struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float32            `json:"accountPayables"`
	AccountsReceivables                     float32            `json:"accountsReceivables"`
	AccruedExpenses                         float32            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float32            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float32            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float32            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float32            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float32            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float32            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float32            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float32            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float32            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float32            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float32            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float32            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float32            `json:"intangibleAssets"`
	Inventory                               float32            `json:"inventory"`
	LongTermDebt                            float32            `json:"longTermDebt"`
	LongTermInvestments                     float32            `json:"longTermInvestments"`
	MinorityInterest                        float32            `json:"minorityInterest"`
	NetDebt                                 float32            `json:"netDebt"`
	NetReceivables                          float32            `json:"netReceivables"`
	OtherAssets                             float32            `json:"otherAssets"`
	OtherCurrentAssets                      float32            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float32            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float32            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float32            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float32            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float32            `json:"otherPayables"`
	OtherReceivables                        float32            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float32            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float32            `json:"preferredStock"`
	Prepaids                                float32            `json:"prepaids"`
	PropertyPlantEquipmentNet               float32            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float32            `json:"retainedEarnings"`
	ShortTermDebt                           float32            `json:"shortTermDebt"`
	ShortTermInvestments                    float32            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float32            `json:"taxAssets"`
	TaxPayables                             float32            `json:"taxPayables"`
	TotalAssets                             float32            `json:"totalAssets"`
	TotalCurrentAssets                      float32            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float32            `json:"totalCurrentLiabilities"`
	TotalDebt                               float32            `json:"totalDebt"`
	TotalEquity                             float32            `json:"totalEquity"`
	TotalInvestments                        float32            `json:"totalInvestments"`
	TotalLiabilities                        float32            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float32            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float32            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float32            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float32            `json:"totalPayables"`
	TotalStockholdersEquity                 float32            `json:"totalStockholdersEquity"`
	TreasuryStock                           float32            `json:"treasuryStock"`
}

// CashFlowStatement defines model for CashFlowStatement.
type CashFlowStatement struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CashFlowStatementTtm defines model for CashFlowStatementTtm.
type CashFlowStatementTtm struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CompanyCapitalization defines model for CompanyCapitalization.
type CompanyCapitalization struct {
	Date      openapi_types.Date `json:"date"`
	MarketCap float64            `json:"marketCap"`
	Symbol    string             `json:"symbol"`
}

// CompanyProfile defines model for CompanyProfile.
type CompanyProfile struct {
	Address           string  `json:"address"`
	AverageVolume     float64 `json:"averageVolume"`
	Beta              float64 `json:"beta"`
	Ceo               string  `json:"ceo"`
	Change            float64 `json:"change"`
	ChangePercentage  float64 `json:"changePercentage"`
	Cik               string  `json:"cik"`
	City              string  `json:"city"`
	CompanyName       string  `json:"companyName"`
	Country           string  `json:"country"`
	Currency          string  `json:"currency"`
	Cusip             string  `json:"cusip"`
	DefaultImage      bool    `json:"defaultImage"`
	Description       string  `json:"description"`
	Exchange          string  `json:"exchange"`
	ExchangeFullName  string  `json:"exchangeFullName"`
	FullTimeEmployees string  `json:"fullTimeEmployees"`
	Image             string  `json:"image"`
	Industry          string  `json:"industry"`
	IpoDate           string  `json:"ipoDate"`
	IsActivelyTrading bool    `json:"isActivelyTrading"`
	IsAdr             bool    `json:"isAdr"`
	IsEtf             bool    `json:"isEtf"`
	IsFund            bool    `json:"isFund"`
	Isin              string  `json:"isin"`
	LastDividend      float64 `json:"lastDividend"`
	MarketCap         float64 `json:"marketCap"`
	Phone             string  `json:"phone"`
	Price             float64 `json:"price"`
	Range             string  `json:"range"`
	Sector            string  `json:"sector"`
	State             string  `json:"state"`
	Symbol            string  `json:"symbol"`
	Volume            int     `json:"volume"`
	Website           string  `json:"website"`
	Zip               string  `json:"zip"`
}

// CompanySharesFloat defines model for CompanySharesFloat.
type CompanySharesFloat struct {
	Date              string  `json:"date"`
	FloatShares       int     `json:"floatShares"`
	FreeFloat         float64 `json:"freeFloat"`
	OutstandingShares int     `json:"outstandingShares"`
	Symbol            string  `json:"symbol"`
}

// CompanySymbol defines model for CompanySymbol.
type CompanySymbol struct {
	CompanyName string `json:"companyName"`
	Symbol      string `json:"symbol"`
}

// DividendEvent defines model for DividendEvent.
type DividendEvent struct {
	AdjDividend     float64            `json:"adjDividend"`
	Date            openapi_types.Date `json:"date"`
	DeclarationDate string             `json:"declarationDate"`
	Dividend        float64            `json:"dividend"`
	Frequency       string             `json:"frequency"`
	PaymentDate     string             `json:"paymentDate"`
	RecordDate      string             `json:"recordDate"`
	Symbol          string             `json:"symbol"`
	Yield           float64            `json:"yield"`
}

// EarningEvent defines model for EarningEvent.
type EarningEvent struct {
	Date             openapi_types.Date `json:"date"`
	EpsActual        float64            `json:"epsActual"`
	EpsEstimated     float64            `json:"epsEstimated"`
	LastUpdated      openapi_types.Date `json:"lastUpdated"`
	RevenueActual    int                `json:"revenueActual"`
	RevenueEstimated int                `json:"revenueEstimated"`
	Symbol           string             `json:"symbol"`
}

// EconomicEsgDisclosure defines model for EconomicEsgDisclosure.
type EconomicEsgDisclosure struct {
	ESGScore           float64            `json:"ESGScore"`
	AcceptedDate       openapi_types.Date `json:"acceptedDate"`
	Cik                string             `json:"cik"`
	CompanyName        string             `json:"companyName"`
	Date               openapi_types.Date `json:"date"`
	EnvironmentalScore float64            `json:"environmentalScore"`
	FormType           string             `json:"formType"`
	GovernanceScore    float64            `json:"governanceScore"`
	SocialScore        float64            `json:"socialScore"`
	Symbol             string             `json:"symbol"`
	Url                string             `json:"url"`
}

// EconomicEsgRating defines model for EconomicEsgRating.
type EconomicEsgRating struct {
	ESGRiskRating string `json:"ESGRiskRating"`
	Cik           string `json:"cik"`
	CompanyName   string `json:"companyName"`
	FiscalYear    int    `json:"fiscalYear"`
	Industry      string `json:"industry"`
	IndustryRank  string `json:"industryRank"`
	Symbol        string `json:"symbol"`
}

// EconomicEvent defines model for EconomicEvent.
type EconomicEvent struct {
	Actual           float64  `json:"actual"`
	Change           float64  `json:"change"`
	ChangePercentage float64  `json:"changePercentage"`
	Country          string   `json:"country"`
	Currency         string   `json:"currency"`
	Date             string   `json:"date"`
	Estimate         *float64 `json:"estimate"`
	Event            string   `json:"event"`
	Impact           string   `json:"impact"`
	Previous         float64  `json:"previous"`
}

// Exchange defines model for Exchange.
type Exchange struct {
	CountryCode  string `json:"countryCode"`
	CountryName  string `json:"countryName"`
	Delay        string `json:"delay"`
	Exchange     string `json:"exchange"`
	Name         string `json:"name"`
	SymbolSuffix string `json:"symbolSuffix"`
}

// FinancialEstimates defines model for FinancialEstimates.
type FinancialEstimates struct {
	Date               openapi_types.Date `json:"date"`
	EbitAvg            float64            `json:"ebitAvg"`
	EbitHigh           float32            `json:"ebitHigh"`
	EbitLow            float64            `json:"ebitLow"`
	EbitdaAvg          float64            `json:"ebitdaAvg"`
	EbitdaHigh         float64            `json:"ebitdaHigh"`
	EbitdaLow          float32            `json:"ebitdaLow"`
	EpsAvg             float64            `json:"epsAvg"`
	EpsHigh            float64            `json:"epsHigh"`
	EpsLow             float64            `json:"epsLow"`
	NetIncomeAvg       float64            `json:"netIncomeAvg"`
	NetIncomeHigh      float32            `json:"netIncomeHigh"`
	NetIncomeLow       float64            `json:"netIncomeLow"`
	NumAnalystsEps     int                `json:"numAnalystsEps"`
	NumAnalystsRevenue int                `json:"numAnalystsRevenue"`
	RevenueAvg         float64            `json:"revenueAvg"`
	RevenueHigh        float64            `json:"revenueHigh"`
	RevenueLow         float64            `json:"revenueLow"`
	SgaExpenseAvg      float64            `json:"sgaExpenseAvg"`
	SgaExpenseHigh     float64            `json:"sgaExpenseHigh"`
	SgaExpenseLow      float64            `json:"sgaExpenseLow"`
	Symbol             string             `json:"symbol"`
}

// FinancialRatios defines model for FinancialRatios.
type FinancialRatios struct {
	AssetTurnover                           float64            `json:"assetTurnover"`
	BookValuePerShare                       float64            `json:"bookValuePerShare"`
	BottomLineProfitMargin                  float64            `json:"bottomLineProfitMargin"`
	CapexPerShare                           float64            `json:"capexPerShare"`
	CapitalExpenditureCoverageRatio         float64            `json:"capitalExpenditureCoverageRatio"`
	CashPerShare                            float64            `json:"cashPerShare"`
	CashRatio                               float64            `json:"cashRatio"`
	ContinuousOperationsProfitMargin        float64            `json:"continuousOperationsProfitMargin"`
	CurrentRatio                            float64            `json:"currentRatio"`
	Date                                    openapi_types.Date `json:"date"`
	DebtServiceCoverageRatio                float64            `json:"debtServiceCoverageRatio"`
	DebtToAssetsRatio                       float64            `json:"debtToAssetsRatio"`
	DebtToCapitalRatio                      float64            `json:"debtToCapitalRatio"`
	DebtToEquityRatio                       float64            `json:"debtToEquityRatio"`
	DebtToMarketCap                         float64            `json:"debtToMarketCap"`
	DividendPaidAndCapexCoverageRatio       float64            `json:"dividendPaidAndCapexCoverageRatio"`
	DividendPayoutRatio                     float64            `json:"dividendPayoutRatio"`
	DividendYield                           float64            `json:"dividendYield"`
	DividendYieldPercentage                 float64            `json:"dividendYieldPercentage"`
	EbitMargin                              float64            `json:"ebitMargin"`
	EbitdaMargin                            float64            `json:"ebitdaMargin"`
	EbtPerEbit                              float64            `json:"ebtPerEbit"`
	EffectiveTaxRate                        float64            `json:"effectiveTaxRate"`
	EnterpriseValueMultiple                 float64            `json:"enterpriseValueMultiple"`
	FinancialLeverageRatio                  float64            `json:"financialLeverageRatio"`
	FiscalYear                              string             `json:"fiscalYear"`
	FixedAssetTurnover                      float64            `json:"fixedAssetTurnover"`
	ForwardPriceToEarningsGrowthRatio       float64            `json:"forwardPriceToEarningsGrowthRatio"`
	FreeCashFlowOperatingCashFlowRatio      float64            `json:"freeCashFlowOperatingCashFlowRatio"`
	FreeCashFlowPerShare                    float64            `json:"freeCashFlowPerShare"`
	GrossProfitMargin                       float64            `json:"grossProfitMargin"`
	InterestCoverageRatio                   float64            `json:"interestCoverageRatio"`
	InterestDebtPerShare                    float64            `json:"interestDebtPerShare"`
	InventoryTurnover                       float64            `json:"inventoryTurnover"`
	LongTermDebtToCapitalRatio              float64            `json:"longTermDebtToCapitalRatio"`
	NetIncomePerEBT                         float64            `json:"netIncomePerEBT"`
	NetIncomePerShare                       float64            `json:"netIncomePerShare"`
	NetProfitMargin                         float64            `json:"netProfitMargin"`
	OperatingCashFlowCoverageRatio          float64            `json:"operatingCashFlowCoverageRatio"`
	OperatingCashFlowPerShare               float64            `json:"operatingCashFlowPerShare"`
	OperatingCashFlowRatio                  float64            `json:"operatingCashFlowRatio"`
	OperatingCashFlowSalesRatio             float64            `json:"operatingCashFlowSalesRatio"`
	OperatingProfitMargin                   float64            `json:"operatingProfitMargin"`
	PayablesTurnover                        float64            `json:"payablesTurnover"`
	Period                                  string             `json:"period"`
	PretaxProfitMargin                      float64            `json:"pretaxProfitMargin"`
	PriceToBookRatio                        float64            `json:"priceToBookRatio"`
	PriceToEarningsGrowthRatio              float64            `json:"priceToEarningsGrowthRatio"`
	PriceToEarningsRatio                    float64            `json:"priceToEarningsRatio"`
	PriceToFairValue                        float64            `json:"priceToFairValue"`
	PriceToFreeCashFlowRatio                float64            `json:"priceToFreeCashFlowRatio"`
	PriceToOperatingCashFlowRatio           float64            `json:"priceToOperatingCashFlowRatio"`
	PriceToSalesRatio                       float64            `json:"priceToSalesRatio"`
	QuickRatio                              float64            `json:"quickRatio"`
	ReceivablesTurnover                     float64            `json:"receivablesTurnover"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RevenuePerShare                         float64            `json:"revenuePerShare"`
	ShareholdersEquityPerShare              float64            `json:"shareholdersEquityPerShare"`
	ShortTermOperatingCashFlowCoverageRatio float64            `json:"shortTermOperatingCashFlowCoverageRatio"`
	SolvencyRatio                           float64            `json:"solvencyRatio"`
	Symbol                                  string             `json:"symbol"`
	TangibleBookValuePerShare               float64            `json:"tangibleBookValuePerShare"`
	WorkingCapitalTurnoverRatio             float64            `json:"workingCapitalTurnoverRatio"`
}

// FullCandle defines model for FullCandle.
type FullCandle struct {
	Change        float64            `json:"change"`
	ChangePercent float64            `json:"changePercent"`
	Close         float64            `json:"close"`
	Date          openapi_types.Date `json:"date"`
	High          float64            `json:"high"`
	Low           float64            `json:"low"`
	Open          float64            `json:"open"`
	Symbol        string             `json:"symbol"`
	Volume        int                `json:"volume"`
	Vwap          float64            `json:"vwap"`
}

// FullQuote defines model for FullQuote.
type FullQuote struct {
	Change           float64 `json:"change"`
	ChangePercentage float64 `json:"changePercentage"`
	DayHigh          float64 `json:"dayHigh"`
	DayLow           float64 `json:"dayLow"`
	Exchange         string  `json:"exchange"`
	MarketCap        float64 `json:"marketCap"`
	Name             string  `json:"name"`
	Open             float64 `json:"open"`
	PreviousClose    float64 `json:"previousClose"`
	Price            float64 `json:"price"`
	PriceAvg200      float64 `json:"priceAvg200"`
	PriceAvg50       float64 `json:"priceAvg50"`
	Symbol           string  `json:"symbol"`
	Timestamp        int     `json:"timestamp"`
	Volume           int     `json:"volume"`
	YearHigh         float64 `json:"yearHigh"`
	YearLow          float64 `json:"yearLow"`
}

// IncomeStatement defines model for IncomeStatement.
type IncomeStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// IncomeStatementTtm defines model for IncomeStatementTtm.
type IncomeStatementTtm struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// InsiderTransaction defines model for InsiderTransaction.
type InsiderTransaction struct {
	AcquisitionOrDisposition string             `json:"acquisitionOrDisposition"`
	CompanyCik               string             `json:"companyCik"`
	DirectOrIndirect         string             `json:"directOrIndirect"`
	FilingDate               openapi_types.Date `json:"filingDate"`
	FormType                 string             `json:"formType"`
	Price                    float32            `json:"price"`
	ReportingCik             string             `json:"reportingCik"`
	ReportingName            string             `json:"reportingName"`
	SecuritiesOwned          int                `json:"securitiesOwned"`
	SecuritiesTransacted     int                `json:"securitiesTransacted"`
	SecurityName             string             `json:"securityName"`
	Symbol                   string             `json:"symbol"`
	TransactionDate          openapi_types.Date `json:"transactionDate"`
	TransactionType          string             `json:"transactionType"`
	TypeOfOwner              string             `json:"typeOfOwner"`
	Url                      string             `json:"url"`
}

// KeyMetrics defines model for KeyMetrics.
type KeyMetrics struct {
	AverageInventory                       float64            `json:"averageInventory"`
	AveragePayables                        float64            `json:"averagePayables"`
	AverageReceivables                     float64            `json:"averageReceivables"`
	CapexToDepreciation                    float64            `json:"capexToDepreciation"`
	CapexToOperatingCashFlow               float64            `json:"capexToOperatingCashFlow"`
	CapexToRevenue                         float64            `json:"capexToRevenue"`
	CashConversionCycle                    float64            `json:"cashConversionCycle"`
	CurrentRatio                           float64            `json:"currentRatio"`
	Date                                   openapi_types.Date `json:"date"`
	DaysOfInventoryOutstanding             float64            `json:"daysOfInventoryOutstanding"`
	DaysOfPayablesOutstanding              float64            `json:"daysOfPayablesOutstanding"`
	DaysOfSalesOutstanding                 float64            `json:"daysOfSalesOutstanding"`
	EarningsYield                          float64            `json:"earningsYield"`
	EnterpriseValue                        float64            `json:"enterpriseValue"`
	EvToEBITDA                             float64            `json:"evToEBITDA"`
	EvToFreeCashFlow                       float64            `json:"evToFreeCashFlow"`
	EvToOperatingCashFlow                  float64            `json:"evToOperatingCashFlow"`
	EvToSales                              float64            `json:"evToSales"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlowToEquity                   float64            `json:"freeCashFlowToEquity"`
	FreeCashFlowToFirm                     float64            `json:"freeCashFlowToFirm"`
	FreeCashFlowYield                      float64            `json:"freeCashFlowYield"`
	GrahamNetNet                           float64            `json:"grahamNetNet"`
	GrahamNumber                           float64            `json:"grahamNumber"`
	IncomeQuality                          float64            `json:"incomeQuality"`
	IntangiblesToTotalAssets               float64            `json:"intangiblesToTotalAssets"`
	InterestBurden                         float64            `json:"interestBurden"`
	InvestedCapital                        float64            `json:"investedCapital"`
	MarketCap                              float64            `json:"marketCap"`
	NetCurrentAssetValue                   float64            `json:"netCurrentAssetValue"`
	NetDebtToEBITDA                        float64            `json:"netDebtToEBITDA"`
	OperatingCycle                         float64            `json:"operatingCycle"`
	OperatingReturnOnAssets                float64            `json:"operatingReturnOnAssets"`
	Period                                 string             `json:"period"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	ResearchAndDevelopementToRevenue       float64            `json:"researchAndDevelopementToRevenue"`
	ReturnOnAssets                         float64            `json:"returnOnAssets"`
	ReturnOnCapitalEmployed                float64            `json:"returnOnCapitalEmployed"`
	ReturnOnEquity                         float64            `json:"returnOnEquity"`
	ReturnOnInvestedCapital                float64            `json:"returnOnInvestedCapital"`
	ReturnOnTangibleAssets                 float64            `json:"returnOnTangibleAssets"`
	SalesGeneralAndAdministrativeToRevenue float64            `json:"salesGeneralAndAdministrativeToRevenue"`
	StockBasedCompensationToRevenue        float64            `json:"stockBasedCompensationToRevenue"`
	Symbol                                 string             `json:"symbol"`
	TangibleAssetValue                     float64            `json:"tangibleAssetValue"`
	TaxBurden                              float64            `json:"taxBurden"`
	WorkingCapital                         float64            `json:"workingCapital"`
}

// LightCandle defines model for LightCandle.
type LightCandle struct {
	Date   openapi_types.Date `json:"date"`
	Price  float32            `json:"price"`
	Symbol string             `json:"symbol"`
	Volume int                `json:"volume"`
}

// News defines model for News.
type News struct {
	Action          string    `json:"action"`
	GradingCompany  string    `json:"gradingCompany"`
	NewGrade        string    `json:"newGrade"`
	NewsBaseURL     string    `json:"newsBaseURL"`
	NewsPublisher   string    `json:"newsPublisher"`
	NewsTitle       string    `json:"newsTitle"`
	NewsURL         string    `json:"newsURL"`
	PreviousGrade   string    `json:"previousGrade"`
	PriceWhenPosted float32   `json:"priceWhenPosted"`
	PublishedDate   time.Time `json:"publishedDate"`
	Symbol          string    `json:"symbol"`
}

// NewsArticle defines model for NewsArticle.
type NewsArticle struct {
	Image         string    `json:"image"`
	PublishedDate time.Time `json:"publishedDate"`
	Publisher     string    `json:"publisher"`
	Site          string    `json:"site"`
	Symbol        string    `json:"symbol"`
	Text          string    `json:"text"`
	Title         string    `json:"title"`
	Url           string    `json:"url"`
}

// Period Reporting period
type Period string

// RatingSnapshot defines model for RatingSnapshot.
type RatingSnapshot struct {
	DebtToEquityScore       int    `json:"debtToEquityScore"`
	DiscountedCashFlowScore int    `json:"discountedCashFlowScore"`
	OverallScore            int    `json:"overallScore"`
	PriceToBookScore        int    `json:"priceToBookScore"`
	PriceToEarningsScore    int    `json:"priceToEarningsScore"`
	Rating                  string `json:"rating"`
	ReturnOnAssetsScore     int    `json:"returnOnAssetsScore"`
	ReturnOnEquityScore     int    `json:"returnOnEquityScore"`
	Symbol                  string `json:"symbol"`
}

// RevenueSegmentation defines model for RevenueSegmentation.
type RevenueSegmentation struct {
	Data             map[string]float32 `json:"data"`
	Date             openapi_types.Date `json:"date"`
	FiscalYear       int                `json:"fiscalYear"`
	Period           string             `json:"period"`
	ReportedCurrency *string            `json:"reportedCurrency"`
	Symbol           string             `json:"symbol"`
}

// SearchSymbol defines model for SearchSymbol.
type SearchSymbol struct {
	Currency         string `json:"currency"`
	Exchange         string `json:"exchange"`
	ExchangeFullName string `json:"exchangeFullName"`
	Name             string `json:"name"`
	Symbol           string `json:"symbol"`
}

// ShortQuote defines model for ShortQuote.
type ShortQuote struct {
	Change float64 `json:"change"`
	Price  float64 `json:"price"`
	Symbol string  `json:"symbol"`
	Volume int     `json:"volume"`
}

// TreasuryRates defines model for TreasuryRates.
type TreasuryRates struct {
	Date   openapi_types.Date `json:"date"`
	Month1 float64            `json:"month1"`
	Month2 float64            `json:"month2"`
	Month3 float64            `json:"month3"`
	Month6 float64            `json:"month6"`
	Year1  float64            `json:"year1"`
	Year10 float64            `json:"year10"`
	Year2  float64            `json:"year2"`
	Year20 float64            `json:"year20"`
	Year3  float64            `json:"year3"`
	Year30 float64            `json:"year30"`
	Year5  float64            `json:"year5"`
	Year7  float64            `json:"year7"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse map[string]interface{}

// ProfileGetResponse defines model for ProfileGetResponse.
type ProfileGetResponse = []CompanyProfile

// AnalystEstimatesGetParams defines parameters for AnalystEstimatesGet.
type AnalystEstimatesGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Period string `form:"period" json:"period"`
	Page   *int   `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BalanceSheetStatementGetParams defines parameters for BalanceSheetStatementGet.
type BalanceSheetStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// BalanceSheetStatementTtmGetParams defines parameters for BalanceSheetStatementTtmGet.
type BalanceSheetStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BatchQuoteGetParams defines parameters for BatchQuoteGet.
type BatchQuoteGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// BatchQuoteShortGetParams defines parameters for BatchQuoteShortGet.
type BatchQuoteShortGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// CashFlowStatementGetParams defines parameters for CashFlowStatementGet.
type CashFlowStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// CashFlowStatementTtmGetParams defines parameters for CashFlowStatementTtmGet.
type CashFlowStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetDividendsCalendarParams defines parameters for GetDividendsCalendar.
type GetDividendsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// GetEarningsCalendarParams defines parameters for GetEarningsCalendar.
type GetEarningsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EconomicCalendarGetParams defines parameters for EconomicCalendarGet.
type EconomicCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EsgDisclosuresGetParams defines parameters for EsgDisclosuresGet.
type EsgDisclosuresGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgRatingsGetParams defines parameters for EsgRatingsGet.
type EsgRatingsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GradesLatestNewsGetParams defines parameters for GradesLatestNewsGet.
type GradesLatestNewsGetParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// HistoricalPriceEodFullGetParams defines parameters for HistoricalPriceEodFullGet.
type HistoricalPriceEodFullGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// HistoricalPriceEodLightGetParams defines parameters for HistoricalPriceEodLightGet.
type HistoricalPriceEodLightGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// IncomeStatementGetParams defines parameters for IncomeStatementGet.
type IncomeStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// IncomeStatementTtmGetParams defines parameters for IncomeStatementTtmGet.
type IncomeStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingLatestGetParams defines parameters for InsiderTradingLatestGet.
type InsiderTradingLatestGetParams struct {
	Date  *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// KeyMetricsGetParams defines parameters for KeyMetricsGet.
type KeyMetricsGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// MarketCapitalizationGetParams defines parameters for MarketCapitalizationGet.
type MarketCapitalizationGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationBatchGetParams defines parameters for MarketCapitalizationBatchGet.
type MarketCapitalizationBatchGetParams struct {
	// Symbols Array of symbols to fetch market capitalization data for
	Symbols string `form:"symbols" json:"symbols"`
}

// NewsGeneralLatestGetParams defines parameters for NewsGeneralLatestGet.
type NewsGeneralLatestGetParams struct {
	From  *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To    *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProfileGetParams defines parameters for ProfileGet.
type ProfileGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteGetParams defines parameters for QuoteGet.
type QuoteGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteShortGetParams defines parameters for QuoteShortGet.
type QuoteShortGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RatingsSnapshotGetParams defines parameters for RatingsSnapshotGet.
type RatingsSnapshotGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// RatiosGetParams defines parameters for RatiosGet.
type RatiosGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// RevenueGeographicSegmentationGetParams defines parameters for RevenueGeographicSegmentationGet.
type RevenueGeographicSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// RevenueProductSegmentationGetParams defines parameters for RevenueProductSegmentationGet.
type RevenueProductSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// SearchNameGetParams defines parameters for SearchNameGet.
type SearchNameGetParams struct {
	SearchSymbol string  `form:"search-symbol" json:"search-symbol"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange     *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SearchSymbolGetParams defines parameters for SearchSymbolGet.
type SearchSymbolGetParams struct {
	Query    string  `form:"query" json:"query"`
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SharesFloatGetParams defines parameters for SharesFloatGet.
type SharesFloatGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// TreasuryRatesGetParams defines parameters for TreasuryRatesGet.
type TreasuryRatesGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

type OperationPath string

const (

	// /analyst-estimates
	AnalystEstimatesGetOperationPath OperationPath = "/analyst-estimates"

	// /available-exchanges
	AvailableExchangesGetOperationPath OperationPath = "/available-exchanges"

	// /balance-sheet-statement
	BalanceSheetStatementGetOperationPath OperationPath = "/balance-sheet-statement"

	// /balance-sheet-statement-ttm
	BalanceSheetStatementTtmGetOperationPath OperationPath = "/balance-sheet-statement-ttm"

	// /batch-quote
	BatchQuoteGetOperationPath OperationPath = "/batch-quote"

	// /batch-quote-short
	BatchQuoteShortGetOperationPath OperationPath = "/batch-quote-short"

	// /cash-flow-statement
	CashFlowStatementGetOperationPath OperationPath = "/cash-flow-statement"

	// /cash-flow-statement-ttm
	CashFlowStatementTtmGetOperationPath OperationPath = "/cash-flow-statement-ttm"

	// /dividends-calendar
	GetDividendsCalendarOperationPath OperationPath = "/dividends-calendar"

	// /earnings-calendar
	GetEarningsCalendarOperationPath OperationPath = "/earnings-calendar"

	// /economic-calendar
	EconomicCalendarGetOperationPath OperationPath = "/economic-calendar"

	// /esg-disclosures
	EsgDisclosuresGetOperationPath OperationPath = "/esg-disclosures"

	// /esg-ratings
	EsgRatingsGetOperationPath OperationPath = "/esg-ratings"

	// /grades-latest-news
	GradesLatestNewsGetOperationPath OperationPath = "/grades-latest-news"

	// /historical-price-eod/full
	HistoricalPriceEodFullGetOperationPath OperationPath = "/historical-price-eod/full"

	// /historical-price-eod/light
	HistoricalPriceEodLightGetOperationPath OperationPath = "/historical-price-eod/light"

	// /income-statement
	IncomeStatementGetOperationPath OperationPath = "/income-statement"

	// /income-statement-ttm
	IncomeStatementTtmGetOperationPath OperationPath = "/income-statement-ttm"

	// /insider-trading/latest
	InsiderTradingLatestGetOperationPath OperationPath = "/insider-trading/latest"

	// /key-metrics
	KeyMetricsGetOperationPath OperationPath = "/key-metrics"

	// /market-capitalization
	MarketCapitalizationGetOperationPath OperationPath = "/market-capitalization"

	// /market-capitalization-batch
	MarketCapitalizationBatchGetOperationPath OperationPath = "/market-capitalization-batch"

	// /news/general-latest
	NewsGeneralLatestGetOperationPath OperationPath = "/news/general-latest"

	// /profile
	ProfileGetOperationPath OperationPath = "/profile"

	// /quote
	QuoteGetOperationPath OperationPath = "/quote"

	// /quote-short
	QuoteShortGetOperationPath OperationPath = "/quote-short"

	// /ratings-snapshot
	RatingsSnapshotGetOperationPath OperationPath = "/ratings-snapshot"

	// /ratios
	RatiosGetOperationPath OperationPath = "/ratios"

	// /revenue-geographic-segmentation
	RevenueGeographicSegmentationGetOperationPath OperationPath = "/revenue-geographic-segmentation"

	// /revenue-product-segmentation
	RevenueProductSegmentationGetOperationPath OperationPath = "/revenue-product-segmentation"

	// /search-name
	SearchNameGetOperationPath OperationPath = "/search-name"

	// /search-symbol
	SearchSymbolGetOperationPath OperationPath = "/search-symbol"

	// /shares-float
	SharesFloatGetOperationPath OperationPath = "/shares-float"

	// /stock-list
	StockListGetOperationPath OperationPath = "/stock-list"

	// /treasury-rates
	TreasuryRatesGetOperationPath OperationPath = "/treasury-rates"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnalystEstimatesGet request
	AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailableExchangesGet request
	AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementGet request
	BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementTtmGet request
	BalanceSheetStatementTtmGet(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteGet request
	BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteShortGet request
	BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementGet request
	CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementTtmGet request
	CashFlowStatementTtmGet(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDividendsCalendar request
	GetDividendsCalendar(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEarningsCalendar request
	GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EconomicCalendarGet request
	EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgDisclosuresGet request
	EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgRatingsGet request
	EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GradesLatestNewsGet request
	GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodFullGet request
	HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodLightGet request
	HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementGet request
	IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementTtmGet request
	IncomeStatementTtmGet(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingLatestGet request
	InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsGet request
	KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationGet request
	MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationBatchGet request
	MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewsGeneralLatestGet request
	NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteGet request
	QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteShortGet request
	QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatingsSnapshotGet request
	RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosGet request
	RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueGeographicSegmentationGet request
	RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueProductSegmentationGet request
	RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchNameGet request
	SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSymbolGet request
	SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharesFloatGet request
	SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StockListGet request
	StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreasuryRatesGet request
	TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnalystEstimatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailableExchangesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementTtmGet(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementTtmGet(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDividendsCalendar(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDividendsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEarningsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEconomicCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgDisclosuresGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgRatingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGradesLatestNewsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodFullGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodLightGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementTtmGet(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewsGeneralLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatingsSnapshotGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueGeographicSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueProductSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchNameGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSymbolGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharesFloatGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStockListGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreasuryRatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnalystEstimatesGetRequest generates requests for AnalystEstimatesGet
func NewAnalystEstimatesGetRequest(server string, params *AnalystEstimatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyst-estimates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAvailableExchangesGetRequest generates requests for AvailableExchangesGet
func NewAvailableExchangesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available-exchanges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementGetRequest generates requests for BalanceSheetStatementGet
func NewBalanceSheetStatementGetRequest(server string, params *BalanceSheetStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementTtmGetRequest generates requests for BalanceSheetStatementTtmGet
func NewBalanceSheetStatementTtmGetRequest(server string, params *BalanceSheetStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteGetRequest generates requests for BatchQuoteGet
func NewBatchQuoteGetRequest(server string, params *BatchQuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteShortGetRequest generates requests for BatchQuoteShortGet
func NewBatchQuoteShortGetRequest(server string, params *BatchQuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementGetRequest generates requests for CashFlowStatementGet
func NewCashFlowStatementGetRequest(server string, params *CashFlowStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementTtmGetRequest generates requests for CashFlowStatementTtmGet
func NewCashFlowStatementTtmGetRequest(server string, params *CashFlowStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDividendsCalendarRequest generates requests for GetDividendsCalendar
func NewGetDividendsCalendarRequest(server string, params *GetDividendsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEarningsCalendarRequest generates requests for GetEarningsCalendar
func NewGetEarningsCalendarRequest(server string, params *GetEarningsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEconomicCalendarGetRequest generates requests for EconomicCalendarGet
func NewEconomicCalendarGetRequest(server string, params *EconomicCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/economic-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgDisclosuresGetRequest generates requests for EsgDisclosuresGet
func NewEsgDisclosuresGetRequest(server string, params *EsgDisclosuresGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-disclosures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgRatingsGetRequest generates requests for EsgRatingsGet
func NewEsgRatingsGetRequest(server string, params *EsgRatingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGradesLatestNewsGetRequest generates requests for GradesLatestNewsGet
func NewGradesLatestNewsGetRequest(server string, params *GradesLatestNewsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades-latest-news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodFullGetRequest generates requests for HistoricalPriceEodFullGet
func NewHistoricalPriceEodFullGetRequest(server string, params *HistoricalPriceEodFullGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodLightGetRequest generates requests for HistoricalPriceEodLightGet
func NewHistoricalPriceEodLightGetRequest(server string, params *HistoricalPriceEodLightGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/light")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementGetRequest generates requests for IncomeStatementGet
func NewIncomeStatementGetRequest(server string, params *IncomeStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementTtmGetRequest generates requests for IncomeStatementTtmGet
func NewIncomeStatementTtmGetRequest(server string, params *IncomeStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingLatestGetRequest generates requests for InsiderTradingLatestGet
func NewInsiderTradingLatestGetRequest(server string, params *InsiderTradingLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsGetRequest generates requests for KeyMetricsGet
func NewKeyMetricsGetRequest(server string, params *KeyMetricsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationGetRequest generates requests for MarketCapitalizationGet
func NewMarketCapitalizationGetRequest(server string, params *MarketCapitalizationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationBatchGetRequest generates requests for MarketCapitalizationBatchGet
func NewMarketCapitalizationBatchGetRequest(server string, params *MarketCapitalizationBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization-batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNewsGeneralLatestGetRequest generates requests for NewsGeneralLatestGet
func NewNewsGeneralLatestGetRequest(server string, params *NewsGeneralLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/general-latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, params *ProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteGetRequest generates requests for QuoteGet
func NewQuoteGetRequest(server string, params *QuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteShortGetRequest generates requests for QuoteShortGet
func NewQuoteShortGetRequest(server string, params *QuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatingsSnapshotGetRequest generates requests for RatingsSnapshotGet
func NewRatingsSnapshotGetRequest(server string, params *RatingsSnapshotGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratings-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosGetRequest generates requests for RatiosGet
func NewRatiosGetRequest(server string, params *RatiosGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueGeographicSegmentationGetRequest generates requests for RevenueGeographicSegmentationGet
func NewRevenueGeographicSegmentationGetRequest(server string, params *RevenueGeographicSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-geographic-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueProductSegmentationGetRequest generates requests for RevenueProductSegmentationGet
func NewRevenueProductSegmentationGetRequest(server string, params *RevenueProductSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-product-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchNameGetRequest generates requests for SearchNameGet
func NewSearchNameGetRequest(server string, params *SearchNameGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSymbolGetRequest generates requests for SearchSymbolGet
func NewSearchSymbolGetRequest(server string, params *SearchSymbolGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharesFloatGetRequest generates requests for SharesFloatGet
func NewSharesFloatGetRequest(server string, params *SharesFloatGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares-float")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStockListGetRequest generates requests for StockListGet
func NewStockListGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreasuryRatesGetRequest generates requests for TreasuryRatesGet
func NewTreasuryRatesGetRequest(server string, params *TreasuryRatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treasury-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnalystEstimatesGetWithResponse request
	AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error)

	// AvailableExchangesGetWithResponse request
	AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error)

	// BalanceSheetStatementGetWithResponse request
	BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error)

	// BalanceSheetStatementTtmGetWithResponse request
	BalanceSheetStatementTtmGetWithResponse(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTtmGetClientResponse, error)

	// BatchQuoteGetWithResponse request
	BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error)

	// BatchQuoteShortGetWithResponse request
	BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error)

	// CashFlowStatementGetWithResponse request
	CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error)

	// CashFlowStatementTtmGetWithResponse request
	CashFlowStatementTtmGetWithResponse(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTtmGetClientResponse, error)

	// GetDividendsCalendarWithResponse request
	GetDividendsCalendarWithResponse(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*GetDividendsCalendarClientResponse, error)

	// GetEarningsCalendarWithResponse request
	GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error)

	// EconomicCalendarGetWithResponse request
	EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error)

	// EsgDisclosuresGetWithResponse request
	EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error)

	// EsgRatingsGetWithResponse request
	EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error)

	// GradesLatestNewsGetWithResponse request
	GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error)

	// HistoricalPriceEodFullGetWithResponse request
	HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error)

	// HistoricalPriceEodLightGetWithResponse request
	HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error)

	// IncomeStatementGetWithResponse request
	IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error)

	// IncomeStatementTtmGetWithResponse request
	IncomeStatementTtmGetWithResponse(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTtmGetClientResponse, error)

	// InsiderTradingLatestGetWithResponse request
	InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error)

	// KeyMetricsGetWithResponse request
	KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error)

	// MarketCapitalizationGetWithResponse request
	MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error)

	// MarketCapitalizationBatchGetWithResponse request
	MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error)

	// NewsGeneralLatestGetWithResponse request
	NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error)

	// ProfileGetWithResponse request
	ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error)

	// QuoteGetWithResponse request
	QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error)

	// QuoteShortGetWithResponse request
	QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error)

	// RatingsSnapshotGetWithResponse request
	RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error)

	// RatiosGetWithResponse request
	RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error)

	// RevenueGeographicSegmentationGetWithResponse request
	RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error)

	// RevenueProductSegmentationGetWithResponse request
	RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error)

	// SearchNameGetWithResponse request
	SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error)

	// SearchSymbolGetWithResponse request
	SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error)

	// SharesFloatGetWithResponse request
	SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error)

	// StockListGetWithResponse request
	StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error)

	// TreasuryRatesGetWithResponse request
	TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error)
}

type AnalystEstimatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialEstimates
}

// Status returns HTTPResponse.Status
func (r AnalystEstimatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnalystEstimatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailableExchangesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Exchange
}

// Status returns HTTPResponse.Status
func (r AvailableExchangesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailableExchangesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatement
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatementTtm
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatement
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatementTtm
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDividendsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r GetDividendsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDividendsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEarningsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r GetEarningsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEarningsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EconomicCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEvent
}

// Status returns HTTPResponse.Status
func (r EconomicCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EconomicCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgDisclosuresGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgDisclosure
}

// Status returns HTTPResponse.Status
func (r EsgDisclosuresGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgDisclosuresGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgRatingsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgRating
}

// Status returns HTTPResponse.Status
func (r EsgRatingsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgRatingsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GradesLatestNewsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]News
}

// Status returns HTTPResponse.Status
func (r GradesLatestNewsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GradesLatestNewsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodFullGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodFullGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodFullGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodLightGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LightCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodLightGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodLightGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatement
}

// Status returns HTTPResponse.Status
func (r IncomeStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatementTtm
}

// Status returns HTTPResponse.Status
func (r IncomeStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetrics
}

// Status returns HTTPResponse.Status
func (r KeyMetricsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationBatchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationBatchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationBatchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewsGeneralLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsArticle
}

// Status returns HTTPResponse.Status
func (r NewsGeneralLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewsGeneralLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGetResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfileGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r QuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r QuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatingsSnapshotGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatingSnapshot
}

// Status returns HTTPResponse.Status
func (r RatingsSnapshotGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatingsSnapshotGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialRatios
}

// Status returns HTTPResponse.Status
func (r RatiosGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueGeographicSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueGeographicSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueGeographicSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueProductSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueProductSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueProductSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchNameGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchNameGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchNameGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSymbolGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchSymbolGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSymbolGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharesFloatGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySharesFloat
}

// Status returns HTTPResponse.Status
func (r SharesFloatGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharesFloatGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StockListGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySymbol
}

// Status returns HTTPResponse.Status
func (r StockListGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StockListGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreasuryRatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TreasuryRates
}

// Status returns HTTPResponse.Status
func (r TreasuryRatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreasuryRatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnalystEstimatesGetWithResponse request returning *AnalystEstimatesGetClientResponse
func (c *ClientWithResponses) AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error) {
	rsp, err := c.AnalystEstimatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnalystEstimatesGetClientResponse(rsp)
}

// AvailableExchangesGetWithResponse request returning *AvailableExchangesGetClientResponse
func (c *ClientWithResponses) AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error) {
	rsp, err := c.AvailableExchangesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailableExchangesGetClientResponse(rsp)
}

// BalanceSheetStatementGetWithResponse request returning *BalanceSheetStatementGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementGetClientResponse(rsp)
}

// BalanceSheetStatementTtmGetWithResponse request returning *BalanceSheetStatementTtmGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementTtmGetWithResponse(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTtmGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementTtmGetClientResponse(rsp)
}

// BatchQuoteGetWithResponse request returning *BatchQuoteGetClientResponse
func (c *ClientWithResponses) BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error) {
	rsp, err := c.BatchQuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteGetClientResponse(rsp)
}

// BatchQuoteShortGetWithResponse request returning *BatchQuoteShortGetClientResponse
func (c *ClientWithResponses) BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error) {
	rsp, err := c.BatchQuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteShortGetClientResponse(rsp)
}

// CashFlowStatementGetWithResponse request returning *CashFlowStatementGetClientResponse
func (c *ClientWithResponses) CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error) {
	rsp, err := c.CashFlowStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementGetClientResponse(rsp)
}

// CashFlowStatementTtmGetWithResponse request returning *CashFlowStatementTtmGetClientResponse
func (c *ClientWithResponses) CashFlowStatementTtmGetWithResponse(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTtmGetClientResponse, error) {
	rsp, err := c.CashFlowStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementTtmGetClientResponse(rsp)
}

// GetDividendsCalendarWithResponse request returning *GetDividendsCalendarClientResponse
func (c *ClientWithResponses) GetDividendsCalendarWithResponse(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*GetDividendsCalendarClientResponse, error) {
	rsp, err := c.GetDividendsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDividendsCalendarClientResponse(rsp)
}

// GetEarningsCalendarWithResponse request returning *GetEarningsCalendarClientResponse
func (c *ClientWithResponses) GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error) {
	rsp, err := c.GetEarningsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEarningsCalendarClientResponse(rsp)
}

// EconomicCalendarGetWithResponse request returning *EconomicCalendarGetClientResponse
func (c *ClientWithResponses) EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error) {
	rsp, err := c.EconomicCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEconomicCalendarGetClientResponse(rsp)
}

// EsgDisclosuresGetWithResponse request returning *EsgDisclosuresGetClientResponse
func (c *ClientWithResponses) EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error) {
	rsp, err := c.EsgDisclosuresGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgDisclosuresGetClientResponse(rsp)
}

// EsgRatingsGetWithResponse request returning *EsgRatingsGetClientResponse
func (c *ClientWithResponses) EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error) {
	rsp, err := c.EsgRatingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgRatingsGetClientResponse(rsp)
}

// GradesLatestNewsGetWithResponse request returning *GradesLatestNewsGetClientResponse
func (c *ClientWithResponses) GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error) {
	rsp, err := c.GradesLatestNewsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGradesLatestNewsGetClientResponse(rsp)
}

// HistoricalPriceEodFullGetWithResponse request returning *HistoricalPriceEodFullGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodFullGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodFullGetClientResponse(rsp)
}

// HistoricalPriceEodLightGetWithResponse request returning *HistoricalPriceEodLightGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodLightGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodLightGetClientResponse(rsp)
}

// IncomeStatementGetWithResponse request returning *IncomeStatementGetClientResponse
func (c *ClientWithResponses) IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error) {
	rsp, err := c.IncomeStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementGetClientResponse(rsp)
}

// IncomeStatementTtmGetWithResponse request returning *IncomeStatementTtmGetClientResponse
func (c *ClientWithResponses) IncomeStatementTtmGetWithResponse(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTtmGetClientResponse, error) {
	rsp, err := c.IncomeStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementTtmGetClientResponse(rsp)
}

// InsiderTradingLatestGetWithResponse request returning *InsiderTradingLatestGetClientResponse
func (c *ClientWithResponses) InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error) {
	rsp, err := c.InsiderTradingLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingLatestGetClientResponse(rsp)
}

// KeyMetricsGetWithResponse request returning *KeyMetricsGetClientResponse
func (c *ClientWithResponses) KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error) {
	rsp, err := c.KeyMetricsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsGetClientResponse(rsp)
}

// MarketCapitalizationGetWithResponse request returning *MarketCapitalizationGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationGetClientResponse(rsp)
}

// MarketCapitalizationBatchGetWithResponse request returning *MarketCapitalizationBatchGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationBatchGetClientResponse(rsp)
}

// NewsGeneralLatestGetWithResponse request returning *NewsGeneralLatestGetClientResponse
func (c *ClientWithResponses) NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error) {
	rsp, err := c.NewsGeneralLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewsGeneralLatestGetClientResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetClientResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error) {
	rsp, err := c.ProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetClientResponse(rsp)
}

// QuoteGetWithResponse request returning *QuoteGetClientResponse
func (c *ClientWithResponses) QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error) {
	rsp, err := c.QuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteGetClientResponse(rsp)
}

// QuoteShortGetWithResponse request returning *QuoteShortGetClientResponse
func (c *ClientWithResponses) QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error) {
	rsp, err := c.QuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteShortGetClientResponse(rsp)
}

// RatingsSnapshotGetWithResponse request returning *RatingsSnapshotGetClientResponse
func (c *ClientWithResponses) RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error) {
	rsp, err := c.RatingsSnapshotGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatingsSnapshotGetClientResponse(rsp)
}

// RatiosGetWithResponse request returning *RatiosGetClientResponse
func (c *ClientWithResponses) RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error) {
	rsp, err := c.RatiosGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosGetClientResponse(rsp)
}

// RevenueGeographicSegmentationGetWithResponse request returning *RevenueGeographicSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueGeographicSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueGeographicSegmentationGetClientResponse(rsp)
}

// RevenueProductSegmentationGetWithResponse request returning *RevenueProductSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueProductSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueProductSegmentationGetClientResponse(rsp)
}

// SearchNameGetWithResponse request returning *SearchNameGetClientResponse
func (c *ClientWithResponses) SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error) {
	rsp, err := c.SearchNameGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchNameGetClientResponse(rsp)
}

// SearchSymbolGetWithResponse request returning *SearchSymbolGetClientResponse
func (c *ClientWithResponses) SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error) {
	rsp, err := c.SearchSymbolGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSymbolGetClientResponse(rsp)
}

// SharesFloatGetWithResponse request returning *SharesFloatGetClientResponse
func (c *ClientWithResponses) SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error) {
	rsp, err := c.SharesFloatGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharesFloatGetClientResponse(rsp)
}

// StockListGetWithResponse request returning *StockListGetClientResponse
func (c *ClientWithResponses) StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error) {
	rsp, err := c.StockListGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStockListGetClientResponse(rsp)
}

// TreasuryRatesGetWithResponse request returning *TreasuryRatesGetClientResponse
func (c *ClientWithResponses) TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error) {
	rsp, err := c.TreasuryRatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreasuryRatesGetClientResponse(rsp)
}

// ParseAnalystEstimatesGetClientResponse parses an HTTP response from a AnalystEstimatesGetWithResponse call
func ParseAnalystEstimatesGetClientResponse(rsp *http.Response) (*AnalystEstimatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnalystEstimatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialEstimates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAvailableExchangesGetClientResponse parses an HTTP response from a AvailableExchangesGetWithResponse call
func ParseAvailableExchangesGetClientResponse(rsp *http.Response) (*AvailableExchangesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailableExchangesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Exchange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementGetClientResponse parses an HTTP response from a BalanceSheetStatementGetWithResponse call
func ParseBalanceSheetStatementGetClientResponse(rsp *http.Response) (*BalanceSheetStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementTtmGetClientResponse parses an HTTP response from a BalanceSheetStatementTtmGetWithResponse call
func ParseBalanceSheetStatementTtmGetClientResponse(rsp *http.Response) (*BalanceSheetStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteGetClientResponse parses an HTTP response from a BatchQuoteGetWithResponse call
func ParseBatchQuoteGetClientResponse(rsp *http.Response) (*BatchQuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteShortGetClientResponse parses an HTTP response from a BatchQuoteShortGetWithResponse call
func ParseBatchQuoteShortGetClientResponse(rsp *http.Response) (*BatchQuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementGetClientResponse parses an HTTP response from a CashFlowStatementGetWithResponse call
func ParseCashFlowStatementGetClientResponse(rsp *http.Response) (*CashFlowStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementTtmGetClientResponse parses an HTTP response from a CashFlowStatementTtmGetWithResponse call
func ParseCashFlowStatementTtmGetClientResponse(rsp *http.Response) (*CashFlowStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDividendsCalendarClientResponse parses an HTTP response from a GetDividendsCalendarWithResponse call
func ParseGetDividendsCalendarClientResponse(rsp *http.Response) (*GetDividendsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDividendsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEarningsCalendarClientResponse parses an HTTP response from a GetEarningsCalendarWithResponse call
func ParseGetEarningsCalendarClientResponse(rsp *http.Response) (*GetEarningsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEarningsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEconomicCalendarGetClientResponse parses an HTTP response from a EconomicCalendarGetWithResponse call
func ParseEconomicCalendarGetClientResponse(rsp *http.Response) (*EconomicCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EconomicCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgDisclosuresGetClientResponse parses an HTTP response from a EsgDisclosuresGetWithResponse call
func ParseEsgDisclosuresGetClientResponse(rsp *http.Response) (*EsgDisclosuresGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgDisclosuresGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgDisclosure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgRatingsGetClientResponse parses an HTTP response from a EsgRatingsGetWithResponse call
func ParseEsgRatingsGetClientResponse(rsp *http.Response) (*EsgRatingsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgRatingsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgRating
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGradesLatestNewsGetClientResponse parses an HTTP response from a GradesLatestNewsGetWithResponse call
func ParseGradesLatestNewsGetClientResponse(rsp *http.Response) (*GradesLatestNewsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GradesLatestNewsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []News
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodFullGetClientResponse parses an HTTP response from a HistoricalPriceEodFullGetWithResponse call
func ParseHistoricalPriceEodFullGetClientResponse(rsp *http.Response) (*HistoricalPriceEodFullGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodFullGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodLightGetClientResponse parses an HTTP response from a HistoricalPriceEodLightGetWithResponse call
func ParseHistoricalPriceEodLightGetClientResponse(rsp *http.Response) (*HistoricalPriceEodLightGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodLightGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LightCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementGetClientResponse parses an HTTP response from a IncomeStatementGetWithResponse call
func ParseIncomeStatementGetClientResponse(rsp *http.Response) (*IncomeStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementTtmGetClientResponse parses an HTTP response from a IncomeStatementTtmGetWithResponse call
func ParseIncomeStatementTtmGetClientResponse(rsp *http.Response) (*IncomeStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingLatestGetClientResponse parses an HTTP response from a InsiderTradingLatestGetWithResponse call
func ParseInsiderTradingLatestGetClientResponse(rsp *http.Response) (*InsiderTradingLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsGetClientResponse parses an HTTP response from a KeyMetricsGetWithResponse call
func ParseKeyMetricsGetClientResponse(rsp *http.Response) (*KeyMetricsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationGetClientResponse parses an HTTP response from a MarketCapitalizationGetWithResponse call
func ParseMarketCapitalizationGetClientResponse(rsp *http.Response) (*MarketCapitalizationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationBatchGetClientResponse parses an HTTP response from a MarketCapitalizationBatchGetWithResponse call
func ParseMarketCapitalizationBatchGetClientResponse(rsp *http.Response) (*MarketCapitalizationBatchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationBatchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewsGeneralLatestGetClientResponse parses an HTTP response from a NewsGeneralLatestGetWithResponse call
func ParseNewsGeneralLatestGetClientResponse(rsp *http.Response) (*NewsGeneralLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewsGeneralLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsArticle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileGetClientResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetClientResponse(rsp *http.Response) (*ProfileGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseQuoteGetClientResponse parses an HTTP response from a QuoteGetWithResponse call
func ParseQuoteGetClientResponse(rsp *http.Response) (*QuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuoteShortGetClientResponse parses an HTTP response from a QuoteShortGetWithResponse call
func ParseQuoteShortGetClientResponse(rsp *http.Response) (*QuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatingsSnapshotGetClientResponse parses an HTTP response from a RatingsSnapshotGetWithResponse call
func ParseRatingsSnapshotGetClientResponse(rsp *http.Response) (*RatingsSnapshotGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatingsSnapshotGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatingSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosGetClientResponse parses an HTTP response from a RatiosGetWithResponse call
func ParseRatiosGetClientResponse(rsp *http.Response) (*RatiosGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialRatios
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueGeographicSegmentationGetClientResponse parses an HTTP response from a RevenueGeographicSegmentationGetWithResponse call
func ParseRevenueGeographicSegmentationGetClientResponse(rsp *http.Response) (*RevenueGeographicSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueGeographicSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueProductSegmentationGetClientResponse parses an HTTP response from a RevenueProductSegmentationGetWithResponse call
func ParseRevenueProductSegmentationGetClientResponse(rsp *http.Response) (*RevenueProductSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueProductSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchNameGetClientResponse parses an HTTP response from a SearchNameGetWithResponse call
func ParseSearchNameGetClientResponse(rsp *http.Response) (*SearchNameGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchNameGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSymbolGetClientResponse parses an HTTP response from a SearchSymbolGetWithResponse call
func ParseSearchSymbolGetClientResponse(rsp *http.Response) (*SearchSymbolGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSymbolGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharesFloatGetClientResponse parses an HTTP response from a SharesFloatGetWithResponse call
func ParseSharesFloatGetClientResponse(rsp *http.Response) (*SharesFloatGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharesFloatGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySharesFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStockListGetClientResponse parses an HTTP response from a StockListGetWithResponse call
func ParseStockListGetClientResponse(rsp *http.Response) (*StockListGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StockListGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreasuryRatesGetClientResponse parses an HTTP response from a TreasuryRatesGetWithResponse call
func ParseTreasuryRatesGetClientResponse(rsp *http.Response) (*TreasuryRatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreasuryRatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TreasuryRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IpCyYj4BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
