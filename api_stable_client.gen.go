// Package financialmodelingprep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 6efb8729c49d05fcc2d90d9553b4bccb0e2e9055 DO NOT EDIT.
package financialmodelingprep

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for Period.
const (
	Annual  Period = "annual"
	FY      Period = "FY"
	Q1      Period = "Q1"
	Q2      Period = "Q2"
	Q3      Period = "Q3"
	Q4      Period = "Q4"
	Quarter Period = "quarter"
)

// Defines values for Timeframe.
const (
	N1day Timeframe = "1day"
)

// BalanceSheetStatement defines model for BalanceSheetStatement.
type BalanceSheetStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float64            `json:"accountPayables"`
	AccountsReceivables                     float64            `json:"accountsReceivables"`
	AccruedExpenses                         float64            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float64            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float64            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float64            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float64            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float64            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float64            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float64            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float64            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float64            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float64            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float64            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float64            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float64            `json:"intangibleAssets"`
	Inventory                               float64            `json:"inventory"`
	LongTermDebt                            float64            `json:"longTermDebt"`
	LongTermInvestments                     float64            `json:"longTermInvestments"`
	MinorityInterest                        float64            `json:"minorityInterest"`
	NetDebt                                 float64            `json:"netDebt"`
	NetReceivables                          float64            `json:"netReceivables"`
	OtherAssets                             float64            `json:"otherAssets"`
	OtherCurrentAssets                      float64            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float64            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float64            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float64            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float64            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float64            `json:"otherPayables"`
	OtherReceivables                        float64            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float64            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float64            `json:"preferredStock"`
	Prepaids                                float64            `json:"prepaids"`
	PropertyPlantEquipmentNet               float64            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float64            `json:"retainedEarnings"`
	ShortTermDebt                           float64            `json:"shortTermDebt"`
	ShortTermInvestments                    float64            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float64            `json:"taxAssets"`
	TaxPayables                             float64            `json:"taxPayables"`
	TotalAssets                             float64            `json:"totalAssets"`
	TotalCurrentAssets                      float64            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float64            `json:"totalCurrentLiabilities"`
	TotalDebt                               float64            `json:"totalDebt"`
	TotalEquity                             float64            `json:"totalEquity"`
	TotalInvestments                        float64            `json:"totalInvestments"`
	TotalLiabilities                        float64            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float64            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float64            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float64            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float64            `json:"totalPayables"`
	TotalStockholdersEquity                 float64            `json:"totalStockholdersEquity"`
	TreasuryStock                           float64            `json:"treasuryStock"`
}

// BalanceSheetStatementTTM defines model for BalanceSheetStatementTTM.
type BalanceSheetStatementTTM struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float32            `json:"accountPayables"`
	AccountsReceivables                     float32            `json:"accountsReceivables"`
	AccruedExpenses                         float32            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float32            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float32            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float32            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float32            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float32            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float32            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float32            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float32            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float32            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float32            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float32            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float32            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float32            `json:"intangibleAssets"`
	Inventory                               float32            `json:"inventory"`
	LongTermDebt                            float32            `json:"longTermDebt"`
	LongTermInvestments                     float32            `json:"longTermInvestments"`
	MinorityInterest                        float32            `json:"minorityInterest"`
	NetDebt                                 float32            `json:"netDebt"`
	NetReceivables                          float32            `json:"netReceivables"`
	OtherAssets                             float32            `json:"otherAssets"`
	OtherCurrentAssets                      float32            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float32            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float32            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float32            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float32            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float32            `json:"otherPayables"`
	OtherReceivables                        float32            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float32            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float32            `json:"preferredStock"`
	Prepaids                                float32            `json:"prepaids"`
	PropertyPlantEquipmentNet               float32            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float32            `json:"retainedEarnings"`
	ShortTermDebt                           float32            `json:"shortTermDebt"`
	ShortTermInvestments                    float32            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float32            `json:"taxAssets"`
	TaxPayables                             float32            `json:"taxPayables"`
	TotalAssets                             float32            `json:"totalAssets"`
	TotalCurrentAssets                      float32            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float32            `json:"totalCurrentLiabilities"`
	TotalDebt                               float32            `json:"totalDebt"`
	TotalEquity                             float32            `json:"totalEquity"`
	TotalInvestments                        float32            `json:"totalInvestments"`
	TotalLiabilities                        float32            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float32            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float32            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float32            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float32            `json:"totalPayables"`
	TotalStockholdersEquity                 float32            `json:"totalStockholdersEquity"`
	TreasuryStock                           float32            `json:"treasuryStock"`
}

// CashFlowStatement defines model for CashFlowStatement.
type CashFlowStatement struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CashFlowStatementTTM defines model for CashFlowStatementTTM.
type CashFlowStatementTTM struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CompanyCapitalization defines model for CompanyCapitalization.
type CompanyCapitalization struct {
	Date      openapi_types.Date `json:"date"`
	MarketCap float64            `json:"marketCap"`
	Symbol    string             `json:"symbol"`
}

// CompanyProfile defines model for CompanyProfile.
type CompanyProfile struct {
	Address           string  `json:"address"`
	AverageVolume     float64 `json:"averageVolume"`
	Beta              float64 `json:"beta"`
	Ceo               string  `json:"ceo"`
	Change            float64 `json:"change"`
	ChangePercentage  float64 `json:"changePercentage"`
	Cik               string  `json:"cik"`
	City              string  `json:"city"`
	CompanyName       string  `json:"companyName"`
	Country           string  `json:"country"`
	Currency          string  `json:"currency"`
	Cusip             string  `json:"cusip"`
	DefaultImage      bool    `json:"defaultImage"`
	Description       string  `json:"description"`
	Exchange          string  `json:"exchange"`
	ExchangeFullName  string  `json:"exchangeFullName"`
	FullTimeEmployees string  `json:"fullTimeEmployees"`
	Image             string  `json:"image"`
	Industry          string  `json:"industry"`
	IpoDate           string  `json:"ipoDate"`
	IsActivelyTrading bool    `json:"isActivelyTrading"`
	IsAdr             bool    `json:"isAdr"`
	IsEtf             bool    `json:"isEtf"`
	IsFund            bool    `json:"isFund"`
	Isin              string  `json:"isin"`
	LastDividend      float64 `json:"lastDividend"`
	MarketCap         float64 `json:"marketCap"`
	Phone             string  `json:"phone"`
	Price             float64 `json:"price"`
	Range             string  `json:"range"`
	Sector            string  `json:"sector"`
	State             string  `json:"state"`
	Symbol            string  `json:"symbol"`
	Volume            int     `json:"volume"`
	Website           string  `json:"website"`
	Zip               string  `json:"zip"`
}

// CompanySharesFloat defines model for CompanySharesFloat.
type CompanySharesFloat struct {
	Date              string  `json:"date"`
	FloatShares       int     `json:"floatShares"`
	FreeFloat         float64 `json:"freeFloat"`
	OutstandingShares int     `json:"outstandingShares"`
	Symbol            string  `json:"symbol"`
}

// CompanySymbol defines model for CompanySymbol.
type CompanySymbol struct {
	CompanyName string `json:"companyName"`
	Symbol      string `json:"symbol"`
}

// DividendEvent defines model for DividendEvent.
type DividendEvent struct {
	AdjDividend     float64            `json:"adjDividend"`
	Date            openapi_types.Date `json:"date"`
	DeclarationDate string             `json:"declarationDate"`
	Dividend        float64            `json:"dividend"`
	Frequency       string             `json:"frequency"`
	PaymentDate     string             `json:"paymentDate"`
	RecordDate      string             `json:"recordDate"`
	Symbol          string             `json:"symbol"`
	Yield           float64            `json:"yield"`
}

// EarningEvent defines model for EarningEvent.
type EarningEvent struct {
	Date             openapi_types.Date `json:"date"`
	EpsActual        float64            `json:"epsActual"`
	EpsEstimated     float64            `json:"epsEstimated"`
	LastUpdated      openapi_types.Date `json:"lastUpdated"`
	RevenueActual    float64            `json:"revenueActual"`
	RevenueEstimated float64            `json:"revenueEstimated"`
	Symbol           string             `json:"symbol"`
}

// EconomicEsgDisclosure defines model for EconomicEsgDisclosure.
type EconomicEsgDisclosure struct {
	ESGScore           float64            `json:"ESGScore"`
	AcceptedDate       openapi_types.Date `json:"acceptedDate"`
	Cik                string             `json:"cik"`
	CompanyName        string             `json:"companyName"`
	Date               openapi_types.Date `json:"date"`
	EnvironmentalScore float64            `json:"environmentalScore"`
	FormType           string             `json:"formType"`
	GovernanceScore    float64            `json:"governanceScore"`
	SocialScore        float64            `json:"socialScore"`
	Symbol             string             `json:"symbol"`
	Url                string             `json:"url"`
}

// EconomicEsgRating defines model for EconomicEsgRating.
type EconomicEsgRating struct {
	ESGRiskRating string `json:"ESGRiskRating"`
	Cik           string `json:"cik"`
	CompanyName   string `json:"companyName"`
	FiscalYear    int    `json:"fiscalYear"`
	Industry      string `json:"industry"`
	IndustryRank  string `json:"industryRank"`
	Symbol        string `json:"symbol"`
}

// EconomicEvent defines model for EconomicEvent.
type EconomicEvent struct {
	Actual           *float64 `json:"actual,omitempty"`
	Change           *float64 `json:"change,omitempty"`
	ChangePercentage float64  `json:"changePercentage"`
	Country          string   `json:"country"`
	Currency         string   `json:"currency"`
	Date             string   `json:"date"`
	Estimate         *float64 `json:"estimate"`
	Event            string   `json:"event"`
	Impact           string   `json:"impact"`
	Previous         *float64 `json:"previous,omitempty"`
}

// EnterpriseValue defines model for EnterpriseValue.
type EnterpriseValue struct {
	AddTotalDebt                float64            `json:"addTotalDebt"`
	Date                        openapi_types.Date `json:"date"`
	EnterpriseValue             float64            `json:"enterpriseValue"`
	MarketCapitalization        float64            `json:"marketCapitalization"`
	MinusCashAndCashEquivalents float64            `json:"minusCashAndCashEquivalents"`
	NumberOfShares              int                `json:"numberOfShares"`
	StockPrice                  float64            `json:"stockPrice"`
	Symbol                      string             `json:"symbol"`
}

// Exchange defines model for Exchange.
type Exchange struct {
	CountryCode  string `json:"countryCode"`
	CountryName  string `json:"countryName"`
	Delay        string `json:"delay"`
	Exchange     string `json:"exchange"`
	Name         string `json:"name"`
	SymbolSuffix string `json:"symbolSuffix"`
}

// FinancialEstimates defines model for FinancialEstimates.
type FinancialEstimates struct {
	Date               openapi_types.Date `json:"date"`
	EbitAvg            float64            `json:"ebitAvg"`
	EbitHigh           float32            `json:"ebitHigh"`
	EbitLow            float64            `json:"ebitLow"`
	EbitdaAvg          float64            `json:"ebitdaAvg"`
	EbitdaHigh         float64            `json:"ebitdaHigh"`
	EbitdaLow          float32            `json:"ebitdaLow"`
	EpsAvg             float64            `json:"epsAvg"`
	EpsHigh            float64            `json:"epsHigh"`
	EpsLow             float64            `json:"epsLow"`
	NetIncomeAvg       float64            `json:"netIncomeAvg"`
	NetIncomeHigh      float32            `json:"netIncomeHigh"`
	NetIncomeLow       float64            `json:"netIncomeLow"`
	NumAnalystsEps     int                `json:"numAnalystsEps"`
	NumAnalystsRevenue int                `json:"numAnalystsRevenue"`
	RevenueAvg         float64            `json:"revenueAvg"`
	RevenueHigh        float64            `json:"revenueHigh"`
	RevenueLow         float64            `json:"revenueLow"`
	SgaExpenseAvg      float64            `json:"sgaExpenseAvg"`
	SgaExpenseHigh     float64            `json:"sgaExpenseHigh"`
	SgaExpenseLow      float64            `json:"sgaExpenseLow"`
	Symbol             string             `json:"symbol"`
}

// FinancialRatios defines model for FinancialRatios.
type FinancialRatios struct {
	AssetTurnover                           float64            `json:"assetTurnover"`
	BookValuePerShare                       float64            `json:"bookValuePerShare"`
	BottomLineProfitMargin                  float64            `json:"bottomLineProfitMargin"`
	CapexPerShare                           float64            `json:"capexPerShare"`
	CapitalExpenditureCoverageRatio         float64            `json:"capitalExpenditureCoverageRatio"`
	CashPerShare                            float64            `json:"cashPerShare"`
	CashRatio                               float64            `json:"cashRatio"`
	ContinuousOperationsProfitMargin        float64            `json:"continuousOperationsProfitMargin"`
	CurrentRatio                            float64            `json:"currentRatio"`
	Date                                    openapi_types.Date `json:"date"`
	DebtServiceCoverageRatio                float64            `json:"debtServiceCoverageRatio"`
	DebtToAssetsRatio                       float64            `json:"debtToAssetsRatio"`
	DebtToCapitalRatio                      float64            `json:"debtToCapitalRatio"`
	DebtToEquityRatio                       float64            `json:"debtToEquityRatio"`
	DebtToMarketCap                         float64            `json:"debtToMarketCap"`
	DividendPaidAndCapexCoverageRatio       float64            `json:"dividendPaidAndCapexCoverageRatio"`
	DividendPayoutRatio                     float64            `json:"dividendPayoutRatio"`
	DividendYield                           float64            `json:"dividendYield"`
	DividendYieldPercentage                 float64            `json:"dividendYieldPercentage"`
	EbitMargin                              float64            `json:"ebitMargin"`
	EbitdaMargin                            float64            `json:"ebitdaMargin"`
	EbtPerEbit                              float64            `json:"ebtPerEbit"`
	EffectiveTaxRate                        float64            `json:"effectiveTaxRate"`
	EnterpriseValueMultiple                 float64            `json:"enterpriseValueMultiple"`
	FinancialLeverageRatio                  float64            `json:"financialLeverageRatio"`
	FiscalYear                              string             `json:"fiscalYear"`
	FixedAssetTurnover                      float64            `json:"fixedAssetTurnover"`
	ForwardPriceToEarningsGrowthRatio       float64            `json:"forwardPriceToEarningsGrowthRatio"`
	FreeCashFlowOperatingCashFlowRatio      float64            `json:"freeCashFlowOperatingCashFlowRatio"`
	FreeCashFlowPerShare                    float64            `json:"freeCashFlowPerShare"`
	GrossProfitMargin                       float64            `json:"grossProfitMargin"`
	InterestCoverageRatio                   float64            `json:"interestCoverageRatio"`
	InterestDebtPerShare                    float64            `json:"interestDebtPerShare"`
	InventoryTurnover                       float64            `json:"inventoryTurnover"`
	LongTermDebtToCapitalRatio              float64            `json:"longTermDebtToCapitalRatio"`
	NetIncomePerEBT                         float64            `json:"netIncomePerEBT"`
	NetIncomePerShare                       float64            `json:"netIncomePerShare"`
	NetProfitMargin                         float64            `json:"netProfitMargin"`
	OperatingCashFlowCoverageRatio          float64            `json:"operatingCashFlowCoverageRatio"`
	OperatingCashFlowPerShare               float64            `json:"operatingCashFlowPerShare"`
	OperatingCashFlowRatio                  float64            `json:"operatingCashFlowRatio"`
	OperatingCashFlowSalesRatio             float64            `json:"operatingCashFlowSalesRatio"`
	OperatingProfitMargin                   float64            `json:"operatingProfitMargin"`
	PayablesTurnover                        float64            `json:"payablesTurnover"`
	Period                                  string             `json:"period"`
	PretaxProfitMargin                      float64            `json:"pretaxProfitMargin"`
	PriceToBookRatio                        float64            `json:"priceToBookRatio"`
	PriceToEarningsGrowthRatio              float64            `json:"priceToEarningsGrowthRatio"`
	PriceToEarningsRatio                    float64            `json:"priceToEarningsRatio"`
	PriceToFairValue                        float64            `json:"priceToFairValue"`
	PriceToFreeCashFlowRatio                float64            `json:"priceToFreeCashFlowRatio"`
	PriceToOperatingCashFlowRatio           float64            `json:"priceToOperatingCashFlowRatio"`
	PriceToSalesRatio                       float64            `json:"priceToSalesRatio"`
	QuickRatio                              float64            `json:"quickRatio"`
	ReceivablesTurnover                     float64            `json:"receivablesTurnover"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RevenuePerShare                         float64            `json:"revenuePerShare"`
	ShareholdersEquityPerShare              float64            `json:"shareholdersEquityPerShare"`
	ShortTermOperatingCashFlowCoverageRatio float64            `json:"shortTermOperatingCashFlowCoverageRatio"`
	SolvencyRatio                           float64            `json:"solvencyRatio"`
	Symbol                                  string             `json:"symbol"`
	TangibleBookValuePerShare               float64            `json:"tangibleBookValuePerShare"`
	WorkingCapitalTurnoverRatio             float64            `json:"workingCapitalTurnoverRatio"`
}

// FullCandle defines model for FullCandle.
type FullCandle struct {
	Change        float64            `json:"change"`
	ChangePercent float64            `json:"changePercent"`
	Close         float64            `json:"close"`
	Date          openapi_types.Date `json:"date"`
	High          float64            `json:"high"`
	Low           float64            `json:"low"`
	Open          float64            `json:"open"`
	Symbol        string             `json:"symbol"`
	Volume        float64            `json:"volume"`
	Vwap          float64            `json:"vwap"`
}

// FullQuote defines model for FullQuote.
type FullQuote struct {
	Change           float64 `json:"change"`
	ChangePercentage float64 `json:"changePercentage"`
	DayHigh          float64 `json:"dayHigh"`
	DayLow           float64 `json:"dayLow"`
	Exchange         string  `json:"exchange"`
	MarketCap        float64 `json:"marketCap"`
	Name             string  `json:"name"`
	Open             float64 `json:"open"`
	PreviousClose    float64 `json:"previousClose"`
	Price            float64 `json:"price"`
	PriceAvg200      float64 `json:"priceAvg200"`
	PriceAvg50       float64 `json:"priceAvg50"`
	Symbol           string  `json:"symbol"`
	Timestamp        int     `json:"timestamp"`
	Volume           float64 `json:"volume"`
	YearHigh         float64 `json:"yearHigh"`
	YearLow          float64 `json:"yearLow"`
}

// GradeNews defines model for GradeNews.
type GradeNews struct {
	Action          string    `json:"action"`
	GradingCompany  string    `json:"gradingCompany"`
	NewGrade        string    `json:"newGrade"`
	NewsBaseURL     string    `json:"newsBaseURL"`
	NewsPublisher   string    `json:"newsPublisher"`
	NewsTitle       string    `json:"newsTitle"`
	NewsURL         string    `json:"newsURL"`
	PreviousGrade   string    `json:"previousGrade"`
	PriceWhenPosted float32   `json:"priceWhenPosted"`
	PublishedDate   time.Time `json:"publishedDate"`
	Symbol          string    `json:"symbol"`
}

// IncomeStatement defines model for IncomeStatement.
type IncomeStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// IncomeStatementTTM defines model for IncomeStatementTTM.
type IncomeStatementTTM struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// InsiderTransaction defines model for InsiderTransaction.
type InsiderTransaction struct {
	AcquisitionOrDisposition string             `json:"acquisitionOrDisposition"`
	CompanyCik               string             `json:"companyCik"`
	DirectOrIndirect         string             `json:"directOrIndirect"`
	FilingDate               openapi_types.Date `json:"filingDate"`
	FormType                 string             `json:"formType"`
	Price                    float32            `json:"price"`
	ReportingCik             string             `json:"reportingCik"`
	ReportingName            string             `json:"reportingName"`
	SecuritiesOwned          float64            `json:"securitiesOwned"`
	SecuritiesTransacted     float64            `json:"securitiesTransacted"`
	SecurityName             string             `json:"securityName"`
	Symbol                   string             `json:"symbol"`
	TransactionDate          openapi_types.Date `json:"transactionDate"`
	TransactionType          string             `json:"transactionType"`
	TypeOfOwner              string             `json:"typeOfOwner"`
	Url                      string             `json:"url"`
}

// KeyMetrics defines model for KeyMetrics.
type KeyMetrics struct {
	AverageInventory                       float64            `json:"averageInventory"`
	AveragePayables                        float64            `json:"averagePayables"`
	AverageReceivables                     float64            `json:"averageReceivables"`
	CapexToDepreciation                    float64            `json:"capexToDepreciation"`
	CapexToOperatingCashFlow               float64            `json:"capexToOperatingCashFlow"`
	CapexToRevenue                         float64            `json:"capexToRevenue"`
	CashConversionCycle                    float64            `json:"cashConversionCycle"`
	CurrentRatio                           float64            `json:"currentRatio"`
	Date                                   openapi_types.Date `json:"date"`
	DaysOfInventoryOutstanding             float64            `json:"daysOfInventoryOutstanding"`
	DaysOfPayablesOutstanding              float64            `json:"daysOfPayablesOutstanding"`
	DaysOfSalesOutstanding                 float64            `json:"daysOfSalesOutstanding"`
	EarningsYield                          float64            `json:"earningsYield"`
	EnterpriseValue                        float64            `json:"enterpriseValue"`
	EvToEBITDA                             float64            `json:"evToEBITDA"`
	EvToFreeCashFlow                       float64            `json:"evToFreeCashFlow"`
	EvToOperatingCashFlow                  float64            `json:"evToOperatingCashFlow"`
	EvToSales                              float64            `json:"evToSales"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlowToEquity                   float64            `json:"freeCashFlowToEquity"`
	FreeCashFlowToFirm                     float64            `json:"freeCashFlowToFirm"`
	FreeCashFlowYield                      float64            `json:"freeCashFlowYield"`
	GrahamNetNet                           float64            `json:"grahamNetNet"`
	GrahamNumber                           float64            `json:"grahamNumber"`
	IncomeQuality                          float64            `json:"incomeQuality"`
	IntangiblesToTotalAssets               float64            `json:"intangiblesToTotalAssets"`
	InterestBurden                         float64            `json:"interestBurden"`
	InvestedCapital                        float64            `json:"investedCapital"`
	MarketCap                              float64            `json:"marketCap"`
	NetCurrentAssetValue                   float64            `json:"netCurrentAssetValue"`
	NetDebtToEBITDA                        float64            `json:"netDebtToEBITDA"`
	OperatingCycle                         float64            `json:"operatingCycle"`
	OperatingReturnOnAssets                float64            `json:"operatingReturnOnAssets"`
	Period                                 string             `json:"period"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	ResearchAndDevelopementToRevenue       float64            `json:"researchAndDevelopementToRevenue"`
	ReturnOnAssets                         float64            `json:"returnOnAssets"`
	ReturnOnCapitalEmployed                float64            `json:"returnOnCapitalEmployed"`
	ReturnOnEquity                         float64            `json:"returnOnEquity"`
	ReturnOnInvestedCapital                float64            `json:"returnOnInvestedCapital"`
	ReturnOnTangibleAssets                 float64            `json:"returnOnTangibleAssets"`
	SalesGeneralAndAdministrativeToRevenue float64            `json:"salesGeneralAndAdministrativeToRevenue"`
	StockBasedCompensationToRevenue        float64            `json:"stockBasedCompensationToRevenue"`
	Symbol                                 string             `json:"symbol"`
	TangibleAssetValue                     float64            `json:"tangibleAssetValue"`
	TaxBurden                              float64            `json:"taxBurden"`
	WorkingCapital                         float64            `json:"workingCapital"`
}

// KeyMetricsTTM defines model for KeyMetricsTTM.
type KeyMetricsTTM struct {
	AverageInventoryTTM                       float64  `json:"averageInventoryTTM"`
	AveragePayablesTTM                        float64  `json:"averagePayablesTTM"`
	AverageReceivablesTTM                     float64  `json:"averageReceivablesTTM"`
	CapexToDepreciationTTM                    float64  `json:"capexToDepreciationTTM"`
	CapexToOperatingCashFlowTTM               float64  `json:"capexToOperatingCashFlowTTM"`
	CapexToRevenueTTM                         float64  `json:"capexToRevenueTTM"`
	CashConversionCycleTTM                    float64  `json:"cashConversionCycleTTM"`
	CurrentRatioTTM                           float64  `json:"currentRatioTTM"`
	DaysOfInventoryOutstandingTTM             float64  `json:"daysOfInventoryOutstandingTTM"`
	DaysOfPayablesOutstandingTTM              float64  `json:"daysOfPayablesOutstandingTTM"`
	DaysOfSalesOutstandingTTM                 float64  `json:"daysOfSalesOutstandingTTM"`
	EarningsYieldTTM                          float64  `json:"earningsYieldTTM"`
	EnterpriseValueTTM                        float64  `json:"enterpriseValueTTM"`
	EvToEBITDATTM                             float64  `json:"evToEBITDATTM"`
	EvToFreeCashFlowTTM                       float64  `json:"evToFreeCashFlowTTM"`
	EvToOperatingCashFlowTTM                  float64  `json:"evToOperatingCashFlowTTM"`
	EvToSalesTTM                              float64  `json:"evToSalesTTM"`
	FreeCashFlowToEquityTTM                   float64  `json:"freeCashFlowToEquityTTM"`
	FreeCashFlowToFirmTTM                     float64  `json:"freeCashFlowToFirmTTM"`
	FreeCashFlowYieldTTM                      float64  `json:"freeCashFlowYieldTTM"`
	GrahamNetNetTTM                           float64  `json:"grahamNetNetTTM"`
	GrahamNumberTTM                           float64  `json:"grahamNumberTTM"`
	IncomeQualityTTM                          float64  `json:"incomeQualityTTM"`
	IntangiblesToTotalAssetsTTM               float64  `json:"intangiblesToTotalAssetsTTM"`
	InterestBurdenTTM                         float64  `json:"interestBurdenTTM"`
	InvestedCapitalTTM                        float64  `json:"investedCapitalTTM"`
	MarketCap                                 *float64 `json:"marketCap,omitempty"`
	NetCurrentAssetValueTTM                   float64  `json:"netCurrentAssetValueTTM"`
	NetDebtToEBITDATTM                        float64  `json:"netDebtToEBITDATTM"`
	OperatingCycleTTM                         float64  `json:"operatingCycleTTM"`
	OperatingReturnOnAssetsTTM                float64  `json:"operatingReturnOnAssetsTTM"`
	ResearchAndDevelopementToRevenueTTM       float64  `json:"researchAndDevelopementToRevenueTTM"`
	ReturnOnAssetsTTM                         float64  `json:"returnOnAssetsTTM"`
	ReturnOnCapitalEmployedTTM                float64  `json:"returnOnCapitalEmployedTTM"`
	ReturnOnEquityTTM                         float64  `json:"returnOnEquityTTM"`
	ReturnOnInvestedCapitalTTM                float64  `json:"returnOnInvestedCapitalTTM"`
	ReturnOnTangibleAssetsTTM                 float64  `json:"returnOnTangibleAssetsTTM"`
	SalesGeneralAndAdministrativeToRevenueTTM float64  `json:"salesGeneralAndAdministrativeToRevenueTTM"`
	StockBasedCompensationToRevenueTTM        float64  `json:"stockBasedCompensationToRevenueTTM"`
	Symbol                                    string   `json:"symbol"`
	TangibleAssetValueTTM                     float64  `json:"tangibleAssetValueTTM"`
	TaxBurdenTTM                              float64  `json:"taxBurdenTTM"`
	WorkingCapitalTTM                         float64  `json:"workingCapitalTTM"`
}

// LightCandle defines model for LightCandle.
type LightCandle struct {
	Date   openapi_types.Date `json:"date"`
	Price  float32            `json:"price"`
	Symbol string             `json:"symbol"`
	Volume int                `json:"volume"`
}

// NewsArticle defines model for NewsArticle.
type NewsArticle struct {
	Image         string  `json:"image"`
	PublishedDate string  `json:"publishedDate"`
	Publisher     string  `json:"publisher"`
	Site          string  `json:"site"`
	Symbol        *string `json:"symbol,omitempty"`
	Text          string  `json:"text"`
	Title         string  `json:"title"`
	Url           string  `json:"url"`
}

// Period Reporting period
type Period string

// RatingSnapshot defines model for RatingSnapshot.
type RatingSnapshot struct {
	DebtToEquityScore       int    `json:"debtToEquityScore"`
	DiscountedCashFlowScore int    `json:"discountedCashFlowScore"`
	OverallScore            int    `json:"overallScore"`
	PriceToBookScore        int    `json:"priceToBookScore"`
	PriceToEarningsScore    int    `json:"priceToEarningsScore"`
	Rating                  string `json:"rating"`
	ReturnOnAssetsScore     int    `json:"returnOnAssetsScore"`
	ReturnOnEquityScore     int    `json:"returnOnEquityScore"`
	Symbol                  string `json:"symbol"`
}

// RatiosTTM defines model for RatiosTTM.
type RatiosTTM struct {
	AssetTurnoverTTM                           float64 `json:"assetTurnoverTTM"`
	BookValuePerShareTTM                       float64 `json:"bookValuePerShareTTM"`
	BottomLineProfitMarginTTM                  float64 `json:"bottomLineProfitMarginTTM"`
	CapexPerShareTTM                           float64 `json:"capexPerShareTTM"`
	CapitalExpenditureCoverageRatioTTM         float64 `json:"capitalExpenditureCoverageRatioTTM"`
	CashPerShareTTM                            float64 `json:"cashPerShareTTM"`
	CashRatioTTM                               float64 `json:"cashRatioTTM"`
	ContinuousOperationsProfitMarginTTM        float64 `json:"continuousOperationsProfitMarginTTM"`
	CurrentRatioTTM                            float64 `json:"currentRatioTTM"`
	DebtServiceCoverageRatioTTM                float64 `json:"debtServiceCoverageRatioTTM"`
	DebtToAssetsRatioTTM                       float64 `json:"debtToAssetsRatioTTM"`
	DebtToCapitalRatioTTM                      float64 `json:"debtToCapitalRatioTTM"`
	DebtToEquityRatioTTM                       float64 `json:"debtToEquityRatioTTM"`
	DebtToMarketCapTTM                         float64 `json:"debtToMarketCapTTM"`
	DividendPaidAndCapexCoverageRatioTTM       float64 `json:"dividendPaidAndCapexCoverageRatioTTM"`
	DividendPayoutRatioTTM                     float64 `json:"dividendPayoutRatioTTM"`
	DividendYieldTTM                           float64 `json:"dividendYieldTTM"`
	EbitMarginTTM                              float64 `json:"ebitMarginTTM"`
	EbitdaMarginTTM                            float64 `json:"ebitdaMarginTTM"`
	EbtPerEbitTTM                              float64 `json:"ebtPerEbitTTM"`
	EffectiveTaxRateTTM                        float64 `json:"effectiveTaxRateTTM"`
	EnterpriseValueMultipleTTM                 float64 `json:"enterpriseValueMultipleTTM"`
	EnterpriseValueTTM                         float64 `json:"enterpriseValueTTM"`
	FinancialLeverageRatioTTM                  float64 `json:"financialLeverageRatioTTM"`
	FixedAssetTurnoverTTM                      float64 `json:"fixedAssetTurnoverTTM"`
	ForwardPriceToEarningsGrowthRatioTTM       float64 `json:"forwardPriceToEarningsGrowthRatioTTM"`
	FreeCashFlowOperatingCashFlowRatioTTM      float64 `json:"freeCashFlowOperatingCashFlowRatioTTM"`
	FreeCashFlowPerShareTTM                    float64 `json:"freeCashFlowPerShareTTM"`
	GrossProfitMarginTTM                       float64 `json:"grossProfitMarginTTM"`
	InterestCoverageRatioTTM                   float64 `json:"interestCoverageRatioTTM"`
	InterestDebtPerShareTTM                    float64 `json:"interestDebtPerShareTTM"`
	InventoryTurnoverTTM                       float64 `json:"inventoryTurnoverTTM"`
	LongTermDebtToCapitalRatioTTM              float64 `json:"longTermDebtToCapitalRatioTTM"`
	NetIncomePerEBTTTM                         float64 `json:"netIncomePerEBTTTM"`
	NetIncomePerShareTTM                       float64 `json:"netIncomePerShareTTM"`
	NetProfitMarginTTM                         float64 `json:"netProfitMarginTTM"`
	OperatingCashFlowCoverageRatioTTM          float64 `json:"operatingCashFlowCoverageRatioTTM"`
	OperatingCashFlowPerShareTTM               float64 `json:"operatingCashFlowPerShareTTM"`
	OperatingCashFlowRatioTTM                  float64 `json:"operatingCashFlowRatioTTM"`
	OperatingCashFlowSalesRatioTTM             float64 `json:"operatingCashFlowSalesRatioTTM"`
	OperatingProfitMarginTTM                   float64 `json:"operatingProfitMarginTTM"`
	PayablesTurnoverTTM                        float64 `json:"payablesTurnoverTTM"`
	PretaxProfitMarginTTM                      float64 `json:"pretaxProfitMarginTTM"`
	PriceToBookRatioTTM                        float64 `json:"priceToBookRatioTTM"`
	PriceToEarningsGrowthRatioTTM              float64 `json:"priceToEarningsGrowthRatioTTM"`
	PriceToEarningsRatioTTM                    float64 `json:"priceToEarningsRatioTTM"`
	PriceToFairValueTTM                        float64 `json:"priceToFairValueTTM"`
	PriceToFreeCashFlowRatioTTM                float64 `json:"priceToFreeCashFlowRatioTTM"`
	PriceToOperatingCashFlowRatioTTM           float64 `json:"priceToOperatingCashFlowRatioTTM"`
	PriceToSalesRatioTTM                       float64 `json:"priceToSalesRatioTTM"`
	QuickRatioTTM                              float64 `json:"quickRatioTTM"`
	ReceivablesTurnoverTTM                     float64 `json:"receivablesTurnoverTTM"`
	RevenuePerShareTTM                         float64 `json:"revenuePerShareTTM"`
	ShareholdersEquityPerShareTTM              float64 `json:"shareholdersEquityPerShareTTM"`
	ShortTermOperatingCashFlowCoverageRatioTTM float64 `json:"shortTermOperatingCashFlowCoverageRatioTTM"`
	SolvencyRatioTTM                           float64 `json:"solvencyRatioTTM"`
	Symbol                                     string  `json:"symbol"`
	TangibleBookValuePerShareTTM               float64 `json:"tangibleBookValuePerShareTTM"`
	WorkingCapitalTurnoverRatioTTM             float64 `json:"workingCapitalTurnoverRatioTTM"`
}

// RevenueSegmentation defines model for RevenueSegmentation.
type RevenueSegmentation struct {
	Data             map[string]float32 `json:"data"`
	Date             openapi_types.Date `json:"date"`
	FiscalYear       int                `json:"fiscalYear"`
	Period           string             `json:"period"`
	ReportedCurrency *string            `json:"reportedCurrency"`
	Symbol           string             `json:"symbol"`
}

// SearchSymbol defines model for SearchSymbol.
type SearchSymbol struct {
	Currency         string `json:"currency"`
	Exchange         string `json:"exchange"`
	ExchangeFullName string `json:"exchangeFullName"`
	Name             string `json:"name"`
	Symbol           string `json:"symbol"`
}

// ShortQuote defines model for ShortQuote.
type ShortQuote struct {
	Change float64 `json:"change"`
	Price  float64 `json:"price"`
	Symbol string  `json:"symbol"`
	Volume int     `json:"volume"`
}

// SplitEvent defines model for SplitEvent.
type SplitEvent struct {
	Date        openapi_types.Date `json:"date"`
	Denominator float64            `json:"denominator"`
	Numerator   float64            `json:"numerator"`
	Symbol      string             `json:"symbol"`
}

// TechnicalIndicator defines model for TechnicalIndicator.
type TechnicalIndicator struct {
	Close  float64  `json:"close"`
	Date   string   `json:"date"`
	High   float64  `json:"high"`
	Low    float64  `json:"low"`
	Open   float64  `json:"open"`
	Rsi    *float64 `json:"rsi,omitempty"`
	Volume float64  `json:"volume"`
}

// Timeframe Time frame
type Timeframe string

// TreasuryRates defines model for TreasuryRates.
type TreasuryRates struct {
	Date   openapi_types.Date `json:"date"`
	Month1 float64            `json:"month1"`
	Month2 float64            `json:"month2"`
	Month3 float64            `json:"month3"`
	Month6 float64            `json:"month6"`
	Year1  float64            `json:"year1"`
	Year10 float64            `json:"year10"`
	Year2  float64            `json:"year2"`
	Year20 float64            `json:"year20"`
	Year3  float64            `json:"year3"`
	Year30 float64            `json:"year30"`
	Year5  float64            `json:"year5"`
	Year7  float64            `json:"year7"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse map[string]interface{}

// ProfileGetResponse defines model for ProfileGetResponse.
type ProfileGetResponse = []CompanyProfile

// AnalystEstimatesGetParams defines parameters for AnalystEstimatesGet.
type AnalystEstimatesGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Period Period `form:"period" json:"period"`
	Page   *int   `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BalanceSheetStatementGetParams defines parameters for BalanceSheetStatementGet.
type BalanceSheetStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// BalanceSheetStatementTTMGetParams defines parameters for BalanceSheetStatementTTMGet.
type BalanceSheetStatementTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BatchQuoteGetParams defines parameters for BatchQuoteGet.
type BatchQuoteGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// BatchQuoteShortGetParams defines parameters for BatchQuoteShortGet.
type BatchQuoteShortGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// CashFlowStatementGetParams defines parameters for CashFlowStatementGet.
type CashFlowStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// CashFlowStatementTTMGetParams defines parameters for CashFlowStatementTTMGet.
type CashFlowStatementTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// DividendsGetParams defines parameters for DividendsGet.
type DividendsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// DividendsCalendarGetParams defines parameters for DividendsCalendarGet.
type DividendsCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EarningsGetParams defines parameters for EarningsGet.
type EarningsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEarningsCalendarParams defines parameters for GetEarningsCalendar.
type GetEarningsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EconomicCalendarGetParams defines parameters for EconomicCalendarGet.
type EconomicCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EnterpriseValueGetParams defines parameters for EnterpriseValueGet.
type EnterpriseValueGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgDisclosuresGetParams defines parameters for EsgDisclosuresGet.
type EsgDisclosuresGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgRatingsGetParams defines parameters for EsgRatingsGet.
type EsgRatingsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GradesLatestNewsGetParams defines parameters for GradesLatestNewsGet.
type GradesLatestNewsGetParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// HistoricalPriceEodFullGetParams defines parameters for HistoricalPriceEodFullGet.
type HistoricalPriceEodFullGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// HistoricalPriceEodLightGetParams defines parameters for HistoricalPriceEodLightGet.
type HistoricalPriceEodLightGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// IncomeStatementGetParams defines parameters for IncomeStatementGet.
type IncomeStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// IncomeStatementTTMGetParams defines parameters for IncomeStatementTTMGet.
type IncomeStatementTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingLatestGetParams defines parameters for InsiderTradingLatestGet.
type InsiderTradingLatestGetParams struct {
	Date  *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingSearchGetParams defines parameters for InsiderTradingSearchGet.
type InsiderTradingSearchGetParams struct {
	Symbol          string  `form:"symbol" json:"symbol"`
	Page            *int    `form:"page,omitempty" json:"page,omitempty"`
	Limit           *int    `form:"limit,omitempty" json:"limit,omitempty"`
	ReportingCik    *string `form:"reportingCik,omitempty" json:"reportingCik,omitempty"`
	TransactionType *string `form:"transactionType,omitempty" json:"transactionType,omitempty"`
}

// KeyMetricsGetParams defines parameters for KeyMetricsGet.
type KeyMetricsGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// KeyMetricsTTMGetParams defines parameters for KeyMetricsTTMGet.
type KeyMetricsTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationGetParams defines parameters for MarketCapitalizationGet.
type MarketCapitalizationGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationBatchGetParams defines parameters for MarketCapitalizationBatchGet.
type MarketCapitalizationBatchGetParams struct {
	// Symbols Array of symbols to fetch market capitalization data for
	Symbols string `form:"symbols" json:"symbols"`
}

// NewsGeneralLatestGetParams defines parameters for NewsGeneralLatestGet.
type NewsGeneralLatestGetParams struct {
	From  *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To    *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProfileGetParams defines parameters for ProfileGet.
type ProfileGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteGetParams defines parameters for QuoteGet.
type QuoteGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteShortGetParams defines parameters for QuoteShortGet.
type QuoteShortGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RatingsSnapshotGetParams defines parameters for RatingsSnapshotGet.
type RatingsSnapshotGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// RatiosGetParams defines parameters for RatiosGet.
type RatiosGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// RatiosTTMGetParams defines parameters for RatiosTTMGet.
type RatiosTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RevenueGeographicSegmentationGetParams defines parameters for RevenueGeographicSegmentationGet.
type RevenueGeographicSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// RevenueProductSegmentationGetParams defines parameters for RevenueProductSegmentationGet.
type RevenueProductSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// SearchNameGetParams defines parameters for SearchNameGet.
type SearchNameGetParams struct {
	SearchSymbol string  `form:"search-symbol" json:"search-symbol"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange     *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SearchSymbolGetParams defines parameters for SearchSymbolGet.
type SearchSymbolGetParams struct {
	Query    string  `form:"query" json:"query"`
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SharesFloatGetParams defines parameters for SharesFloatGet.
type SharesFloatGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GetSplitsParams defines parameters for GetSplits.
type GetSplitsParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSplitsCalendarParams defines parameters for GetSplitsCalendar.
type GetSplitsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// TechnicalIndicatorsRsiGetParams defines parameters for TechnicalIndicatorsRsiGet.
type TechnicalIndicatorsRsiGetParams struct {
	Symbol       string              `form:"symbol" json:"symbol"`
	PeriodLength int                 `form:"periodLength" json:"periodLength"`
	Timeframe    Timeframe           `form:"timeframe" json:"timeframe"`
	From         *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To           *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// TreasuryRatesGetParams defines parameters for TreasuryRatesGet.
type TreasuryRatesGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

type OperationPath string

const (

	// /analyst-estimates
	AnalystEstimatesGetOperationPath OperationPath = "/analyst-estimates"

	// /available-exchanges
	AvailableExchangesGetOperationPath OperationPath = "/available-exchanges"

	// /balance-sheet-statement
	BalanceSheetStatementGetOperationPath OperationPath = "/balance-sheet-statement"

	// /balance-sheet-statement-ttm
	BalanceSheetStatementTTMGetOperationPath OperationPath = "/balance-sheet-statement-ttm"

	// /batch-quote
	BatchQuoteGetOperationPath OperationPath = "/batch-quote"

	// /batch-quote-short
	BatchQuoteShortGetOperationPath OperationPath = "/batch-quote-short"

	// /cash-flow-statement
	CashFlowStatementGetOperationPath OperationPath = "/cash-flow-statement"

	// /cash-flow-statement-ttm
	CashFlowStatementTTMGetOperationPath OperationPath = "/cash-flow-statement-ttm"

	// /dividends
	DividendsGetOperationPath OperationPath = "/dividends"

	// /dividends-calendar
	DividendsCalendarGetOperationPath OperationPath = "/dividends-calendar"

	// /earnings
	EarningsGetOperationPath OperationPath = "/earnings"

	// /earnings-calendar
	GetEarningsCalendarOperationPath OperationPath = "/earnings-calendar"

	// /economic-calendar
	EconomicCalendarGetOperationPath OperationPath = "/economic-calendar"

	// /enterprise-values
	EnterpriseValueGetOperationPath OperationPath = "/enterprise-values"

	// /esg-disclosures
	EsgDisclosuresGetOperationPath OperationPath = "/esg-disclosures"

	// /esg-ratings
	EsgRatingsGetOperationPath OperationPath = "/esg-ratings"

	// /grades-latest-news
	GradesLatestNewsGetOperationPath OperationPath = "/grades-latest-news"

	// /historical-price-eod/full
	HistoricalPriceEodFullGetOperationPath OperationPath = "/historical-price-eod/full"

	// /historical-price-eod/light
	HistoricalPriceEodLightGetOperationPath OperationPath = "/historical-price-eod/light"

	// /income-statement
	IncomeStatementGetOperationPath OperationPath = "/income-statement"

	// /income-statement-ttm
	IncomeStatementTTMGetOperationPath OperationPath = "/income-statement-ttm"

	// /insider-trading/latest
	InsiderTradingLatestGetOperationPath OperationPath = "/insider-trading/latest"

	// /insider-trading/search
	InsiderTradingSearchGetOperationPath OperationPath = "/insider-trading/search"

	// /key-metrics
	KeyMetricsGetOperationPath OperationPath = "/key-metrics"

	// /key-metrics-ttm
	KeyMetricsTTMGetOperationPath OperationPath = "/key-metrics-ttm"

	// /market-capitalization
	MarketCapitalizationGetOperationPath OperationPath = "/market-capitalization"

	// /market-capitalization-batch
	MarketCapitalizationBatchGetOperationPath OperationPath = "/market-capitalization-batch"

	// /news/general-latest
	NewsGeneralLatestGetOperationPath OperationPath = "/news/general-latest"

	// /profile
	ProfileGetOperationPath OperationPath = "/profile"

	// /quote
	QuoteGetOperationPath OperationPath = "/quote"

	// /quote-short
	QuoteShortGetOperationPath OperationPath = "/quote-short"

	// /ratings-snapshot
	RatingsSnapshotGetOperationPath OperationPath = "/ratings-snapshot"

	// /ratios
	RatiosGetOperationPath OperationPath = "/ratios"

	// /ratios-ttm
	RatiosTTMGetOperationPath OperationPath = "/ratios-ttm"

	// /revenue-geographic-segmentation
	RevenueGeographicSegmentationGetOperationPath OperationPath = "/revenue-geographic-segmentation"

	// /revenue-product-segmentation
	RevenueProductSegmentationGetOperationPath OperationPath = "/revenue-product-segmentation"

	// /search-name
	SearchNameGetOperationPath OperationPath = "/search-name"

	// /search-symbol
	SearchSymbolGetOperationPath OperationPath = "/search-symbol"

	// /shares-float
	SharesFloatGetOperationPath OperationPath = "/shares-float"

	// /splits
	GetSplitsOperationPath OperationPath = "/splits"

	// /splits-calendar
	GetSplitsCalendarOperationPath OperationPath = "/splits-calendar"

	// /stock-list
	StockListGetOperationPath OperationPath = "/stock-list"

	// /technical-indicators/rsi
	TechnicalIndicatorsRsiGetOperationPath OperationPath = "/technical-indicators/rsi"

	// /treasury-rates
	TreasuryRatesGetOperationPath OperationPath = "/treasury-rates"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnalystEstimatesGet request
	AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailableExchangesGet request
	AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementGet request
	BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementTTMGet request
	BalanceSheetStatementTTMGet(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteGet request
	BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteShortGet request
	BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementGet request
	CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementTTMGet request
	CashFlowStatementTTMGet(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DividendsGet request
	DividendsGet(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DividendsCalendarGet request
	DividendsCalendarGet(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EarningsGet request
	EarningsGet(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEarningsCalendar request
	GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EconomicCalendarGet request
	EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnterpriseValueGet request
	EnterpriseValueGet(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgDisclosuresGet request
	EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgRatingsGet request
	EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GradesLatestNewsGet request
	GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodFullGet request
	HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodLightGet request
	HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementGet request
	IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementTTMGet request
	IncomeStatementTTMGet(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingLatestGet request
	InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingSearchGet request
	InsiderTradingSearchGet(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsGet request
	KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsTTMGet request
	KeyMetricsTTMGet(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationGet request
	MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationBatchGet request
	MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewsGeneralLatestGet request
	NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteGet request
	QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteShortGet request
	QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatingsSnapshotGet request
	RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosGet request
	RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosTTMGet request
	RatiosTTMGet(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueGeographicSegmentationGet request
	RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueProductSegmentationGet request
	RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchNameGet request
	SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSymbolGet request
	SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharesFloatGet request
	SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSplits request
	GetSplits(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSplitsCalendar request
	GetSplitsCalendar(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StockListGet request
	StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TechnicalIndicatorsRsiGet request
	TechnicalIndicatorsRsiGet(ctx context.Context, params *TechnicalIndicatorsRsiGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreasuryRatesGet request
	TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnalystEstimatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailableExchangesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementTTMGet(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementTTMGet(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DividendsGet(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDividendsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DividendsCalendarGet(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDividendsCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EarningsGet(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEarningsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEarningsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEconomicCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnterpriseValueGet(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnterpriseValueGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgDisclosuresGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgRatingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGradesLatestNewsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodFullGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodLightGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementTTMGet(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingSearchGet(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingSearchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsTTMGet(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewsGeneralLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatingsSnapshotGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosTTMGet(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueGeographicSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueProductSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchNameGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSymbolGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharesFloatGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSplits(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSplitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSplitsCalendar(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSplitsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStockListGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TechnicalIndicatorsRsiGet(ctx context.Context, params *TechnicalIndicatorsRsiGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTechnicalIndicatorsRsiGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreasuryRatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnalystEstimatesGetRequest generates requests for AnalystEstimatesGet
func NewAnalystEstimatesGetRequest(server string, params *AnalystEstimatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyst-estimates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAvailableExchangesGetRequest generates requests for AvailableExchangesGet
func NewAvailableExchangesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available-exchanges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementGetRequest generates requests for BalanceSheetStatementGet
func NewBalanceSheetStatementGetRequest(server string, params *BalanceSheetStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementTTMGetRequest generates requests for BalanceSheetStatementTTMGet
func NewBalanceSheetStatementTTMGetRequest(server string, params *BalanceSheetStatementTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteGetRequest generates requests for BatchQuoteGet
func NewBatchQuoteGetRequest(server string, params *BatchQuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteShortGetRequest generates requests for BatchQuoteShortGet
func NewBatchQuoteShortGetRequest(server string, params *BatchQuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementGetRequest generates requests for CashFlowStatementGet
func NewCashFlowStatementGetRequest(server string, params *CashFlowStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementTTMGetRequest generates requests for CashFlowStatementTTMGet
func NewCashFlowStatementTTMGetRequest(server string, params *CashFlowStatementTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDividendsGetRequest generates requests for DividendsGet
func NewDividendsGetRequest(server string, params *DividendsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDividendsCalendarGetRequest generates requests for DividendsCalendarGet
func NewDividendsCalendarGetRequest(server string, params *DividendsCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEarningsGetRequest generates requests for EarningsGet
func NewEarningsGetRequest(server string, params *EarningsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEarningsCalendarRequest generates requests for GetEarningsCalendar
func NewGetEarningsCalendarRequest(server string, params *GetEarningsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEconomicCalendarGetRequest generates requests for EconomicCalendarGet
func NewEconomicCalendarGetRequest(server string, params *EconomicCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/economic-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnterpriseValueGetRequest generates requests for EnterpriseValueGet
func NewEnterpriseValueGetRequest(server string, params *EnterpriseValueGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enterprise-values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgDisclosuresGetRequest generates requests for EsgDisclosuresGet
func NewEsgDisclosuresGetRequest(server string, params *EsgDisclosuresGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-disclosures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgRatingsGetRequest generates requests for EsgRatingsGet
func NewEsgRatingsGetRequest(server string, params *EsgRatingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGradesLatestNewsGetRequest generates requests for GradesLatestNewsGet
func NewGradesLatestNewsGetRequest(server string, params *GradesLatestNewsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades-latest-news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodFullGetRequest generates requests for HistoricalPriceEodFullGet
func NewHistoricalPriceEodFullGetRequest(server string, params *HistoricalPriceEodFullGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodLightGetRequest generates requests for HistoricalPriceEodLightGet
func NewHistoricalPriceEodLightGetRequest(server string, params *HistoricalPriceEodLightGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/light")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementGetRequest generates requests for IncomeStatementGet
func NewIncomeStatementGetRequest(server string, params *IncomeStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementTTMGetRequest generates requests for IncomeStatementTTMGet
func NewIncomeStatementTTMGetRequest(server string, params *IncomeStatementTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingLatestGetRequest generates requests for InsiderTradingLatestGet
func NewInsiderTradingLatestGetRequest(server string, params *InsiderTradingLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingSearchGetRequest generates requests for InsiderTradingSearchGet
func NewInsiderTradingSearchGetRequest(server string, params *InsiderTradingSearchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportingCik != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reportingCik", runtime.ParamLocationQuery, *params.ReportingCik); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transactionType", runtime.ParamLocationQuery, *params.TransactionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsGetRequest generates requests for KeyMetricsGet
func NewKeyMetricsGetRequest(server string, params *KeyMetricsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsTTMGetRequest generates requests for KeyMetricsTTMGet
func NewKeyMetricsTTMGetRequest(server string, params *KeyMetricsTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationGetRequest generates requests for MarketCapitalizationGet
func NewMarketCapitalizationGetRequest(server string, params *MarketCapitalizationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationBatchGetRequest generates requests for MarketCapitalizationBatchGet
func NewMarketCapitalizationBatchGetRequest(server string, params *MarketCapitalizationBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization-batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNewsGeneralLatestGetRequest generates requests for NewsGeneralLatestGet
func NewNewsGeneralLatestGetRequest(server string, params *NewsGeneralLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/general-latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, params *ProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteGetRequest generates requests for QuoteGet
func NewQuoteGetRequest(server string, params *QuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteShortGetRequest generates requests for QuoteShortGet
func NewQuoteShortGetRequest(server string, params *QuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatingsSnapshotGetRequest generates requests for RatingsSnapshotGet
func NewRatingsSnapshotGetRequest(server string, params *RatingsSnapshotGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratings-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosGetRequest generates requests for RatiosGet
func NewRatiosGetRequest(server string, params *RatiosGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosTTMGetRequest generates requests for RatiosTTMGet
func NewRatiosTTMGetRequest(server string, params *RatiosTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueGeographicSegmentationGetRequest generates requests for RevenueGeographicSegmentationGet
func NewRevenueGeographicSegmentationGetRequest(server string, params *RevenueGeographicSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-geographic-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueProductSegmentationGetRequest generates requests for RevenueProductSegmentationGet
func NewRevenueProductSegmentationGetRequest(server string, params *RevenueProductSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-product-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchNameGetRequest generates requests for SearchNameGet
func NewSearchNameGetRequest(server string, params *SearchNameGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSymbolGetRequest generates requests for SearchSymbolGet
func NewSearchSymbolGetRequest(server string, params *SearchSymbolGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharesFloatGetRequest generates requests for SharesFloatGet
func NewSharesFloatGetRequest(server string, params *SharesFloatGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares-float")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSplitsRequest generates requests for GetSplits
func NewGetSplitsRequest(server string, params *GetSplitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/splits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSplitsCalendarRequest generates requests for GetSplitsCalendar
func NewGetSplitsCalendarRequest(server string, params *GetSplitsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/splits-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStockListGetRequest generates requests for StockListGet
func NewStockListGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTechnicalIndicatorsRsiGetRequest generates requests for TechnicalIndicatorsRsiGet
func NewTechnicalIndicatorsRsiGetRequest(server string, params *TechnicalIndicatorsRsiGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/technical-indicators/rsi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periodLength", runtime.ParamLocationQuery, params.PeriodLength); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeframe", runtime.ParamLocationQuery, params.Timeframe); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreasuryRatesGetRequest generates requests for TreasuryRatesGet
func NewTreasuryRatesGetRequest(server string, params *TreasuryRatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treasury-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnalystEstimatesGetWithResponse request
	AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error)

	// AvailableExchangesGetWithResponse request
	AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error)

	// BalanceSheetStatementGetWithResponse request
	BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error)

	// BalanceSheetStatementTTMGetWithResponse request
	BalanceSheetStatementTTMGetWithResponse(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTTMGetClientResponse, error)

	// BatchQuoteGetWithResponse request
	BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error)

	// BatchQuoteShortGetWithResponse request
	BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error)

	// CashFlowStatementGetWithResponse request
	CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error)

	// CashFlowStatementTTMGetWithResponse request
	CashFlowStatementTTMGetWithResponse(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTTMGetClientResponse, error)

	// DividendsGetWithResponse request
	DividendsGetWithResponse(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*DividendsGetClientResponse, error)

	// DividendsCalendarGetWithResponse request
	DividendsCalendarGetWithResponse(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*DividendsCalendarGetClientResponse, error)

	// EarningsGetWithResponse request
	EarningsGetWithResponse(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*EarningsGetClientResponse, error)

	// GetEarningsCalendarWithResponse request
	GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error)

	// EconomicCalendarGetWithResponse request
	EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error)

	// EnterpriseValueGetWithResponse request
	EnterpriseValueGetWithResponse(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*EnterpriseValueGetClientResponse, error)

	// EsgDisclosuresGetWithResponse request
	EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error)

	// EsgRatingsGetWithResponse request
	EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error)

	// GradesLatestNewsGetWithResponse request
	GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error)

	// HistoricalPriceEodFullGetWithResponse request
	HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error)

	// HistoricalPriceEodLightGetWithResponse request
	HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error)

	// IncomeStatementGetWithResponse request
	IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error)

	// IncomeStatementTTMGetWithResponse request
	IncomeStatementTTMGetWithResponse(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTTMGetClientResponse, error)

	// InsiderTradingLatestGetWithResponse request
	InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error)

	// InsiderTradingSearchGetWithResponse request
	InsiderTradingSearchGetWithResponse(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingSearchGetClientResponse, error)

	// KeyMetricsGetWithResponse request
	KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error)

	// KeyMetricsTTMGetWithResponse request
	KeyMetricsTTMGetWithResponse(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsTTMGetClientResponse, error)

	// MarketCapitalizationGetWithResponse request
	MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error)

	// MarketCapitalizationBatchGetWithResponse request
	MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error)

	// NewsGeneralLatestGetWithResponse request
	NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error)

	// ProfileGetWithResponse request
	ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error)

	// QuoteGetWithResponse request
	QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error)

	// QuoteShortGetWithResponse request
	QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error)

	// RatingsSnapshotGetWithResponse request
	RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error)

	// RatiosGetWithResponse request
	RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error)

	// RatiosTTMGetWithResponse request
	RatiosTTMGetWithResponse(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*RatiosTTMGetClientResponse, error)

	// RevenueGeographicSegmentationGetWithResponse request
	RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error)

	// RevenueProductSegmentationGetWithResponse request
	RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error)

	// SearchNameGetWithResponse request
	SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error)

	// SearchSymbolGetWithResponse request
	SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error)

	// SharesFloatGetWithResponse request
	SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error)

	// GetSplitsWithResponse request
	GetSplitsWithResponse(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*GetSplitsClientResponse, error)

	// GetSplitsCalendarWithResponse request
	GetSplitsCalendarWithResponse(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*GetSplitsCalendarClientResponse, error)

	// StockListGetWithResponse request
	StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error)

	// TechnicalIndicatorsRsiGetWithResponse request
	TechnicalIndicatorsRsiGetWithResponse(ctx context.Context, params *TechnicalIndicatorsRsiGetParams, reqEditors ...RequestEditorFn) (*TechnicalIndicatorsRsiGetClientResponse, error)

	// TreasuryRatesGetWithResponse request
	TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error)
}

type AnalystEstimatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialEstimates
}

// Status returns HTTPResponse.Status
func (r AnalystEstimatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnalystEstimatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailableExchangesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Exchange
}

// Status returns HTTPResponse.Status
func (r AvailableExchangesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailableExchangesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatement
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatementTTM
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatement
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatementTTM
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DividendsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r DividendsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DividendsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DividendsCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r DividendsCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DividendsCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EarningsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r EarningsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EarningsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEarningsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r GetEarningsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEarningsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EconomicCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEvent
}

// Status returns HTTPResponse.Status
func (r EconomicCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EconomicCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnterpriseValueGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnterpriseValue
}

// Status returns HTTPResponse.Status
func (r EnterpriseValueGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnterpriseValueGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgDisclosuresGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgDisclosure
}

// Status returns HTTPResponse.Status
func (r EsgDisclosuresGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgDisclosuresGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgRatingsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgRating
}

// Status returns HTTPResponse.Status
func (r EsgRatingsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgRatingsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GradesLatestNewsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GradeNews
}

// Status returns HTTPResponse.Status
func (r GradesLatestNewsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GradesLatestNewsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodFullGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodFullGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodFullGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodLightGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LightCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodLightGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodLightGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatement
}

// Status returns HTTPResponse.Status
func (r IncomeStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatementTTM
}

// Status returns HTTPResponse.Status
func (r IncomeStatementTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingSearchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingSearchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingSearchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetrics
}

// Status returns HTTPResponse.Status
func (r KeyMetricsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetricsTTM
}

// Status returns HTTPResponse.Status
func (r KeyMetricsTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationBatchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationBatchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationBatchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewsGeneralLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsArticle
}

// Status returns HTTPResponse.Status
func (r NewsGeneralLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewsGeneralLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGetResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfileGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r QuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r QuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatingsSnapshotGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatingSnapshot
}

// Status returns HTTPResponse.Status
func (r RatingsSnapshotGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatingsSnapshotGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialRatios
}

// Status returns HTTPResponse.Status
func (r RatiosGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatiosTTM
}

// Status returns HTTPResponse.Status
func (r RatiosTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueGeographicSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueGeographicSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueGeographicSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueProductSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueProductSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueProductSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchNameGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchNameGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchNameGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSymbolGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchSymbolGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSymbolGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharesFloatGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySharesFloat
}

// Status returns HTTPResponse.Status
func (r SharesFloatGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharesFloatGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSplitsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitEvent
}

// Status returns HTTPResponse.Status
func (r GetSplitsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSplitsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSplitsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitEvent
}

// Status returns HTTPResponse.Status
func (r GetSplitsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSplitsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StockListGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySymbol
}

// Status returns HTTPResponse.Status
func (r StockListGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StockListGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TechnicalIndicatorsRsiGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TechnicalIndicator
}

// Status returns HTTPResponse.Status
func (r TechnicalIndicatorsRsiGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TechnicalIndicatorsRsiGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreasuryRatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TreasuryRates
}

// Status returns HTTPResponse.Status
func (r TreasuryRatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreasuryRatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnalystEstimatesGetWithResponse request returning *AnalystEstimatesGetClientResponse
func (c *ClientWithResponses) AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error) {
	rsp, err := c.AnalystEstimatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnalystEstimatesGetClientResponse(rsp)
}

// AvailableExchangesGetWithResponse request returning *AvailableExchangesGetClientResponse
func (c *ClientWithResponses) AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error) {
	rsp, err := c.AvailableExchangesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailableExchangesGetClientResponse(rsp)
}

// BalanceSheetStatementGetWithResponse request returning *BalanceSheetStatementGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementGetClientResponse(rsp)
}

// BalanceSheetStatementTTMGetWithResponse request returning *BalanceSheetStatementTTMGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementTTMGetWithResponse(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTTMGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementTTMGetClientResponse(rsp)
}

// BatchQuoteGetWithResponse request returning *BatchQuoteGetClientResponse
func (c *ClientWithResponses) BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error) {
	rsp, err := c.BatchQuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteGetClientResponse(rsp)
}

// BatchQuoteShortGetWithResponse request returning *BatchQuoteShortGetClientResponse
func (c *ClientWithResponses) BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error) {
	rsp, err := c.BatchQuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteShortGetClientResponse(rsp)
}

// CashFlowStatementGetWithResponse request returning *CashFlowStatementGetClientResponse
func (c *ClientWithResponses) CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error) {
	rsp, err := c.CashFlowStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementGetClientResponse(rsp)
}

// CashFlowStatementTTMGetWithResponse request returning *CashFlowStatementTTMGetClientResponse
func (c *ClientWithResponses) CashFlowStatementTTMGetWithResponse(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTTMGetClientResponse, error) {
	rsp, err := c.CashFlowStatementTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementTTMGetClientResponse(rsp)
}

// DividendsGetWithResponse request returning *DividendsGetClientResponse
func (c *ClientWithResponses) DividendsGetWithResponse(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*DividendsGetClientResponse, error) {
	rsp, err := c.DividendsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDividendsGetClientResponse(rsp)
}

// DividendsCalendarGetWithResponse request returning *DividendsCalendarGetClientResponse
func (c *ClientWithResponses) DividendsCalendarGetWithResponse(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*DividendsCalendarGetClientResponse, error) {
	rsp, err := c.DividendsCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDividendsCalendarGetClientResponse(rsp)
}

// EarningsGetWithResponse request returning *EarningsGetClientResponse
func (c *ClientWithResponses) EarningsGetWithResponse(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*EarningsGetClientResponse, error) {
	rsp, err := c.EarningsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEarningsGetClientResponse(rsp)
}

// GetEarningsCalendarWithResponse request returning *GetEarningsCalendarClientResponse
func (c *ClientWithResponses) GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error) {
	rsp, err := c.GetEarningsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEarningsCalendarClientResponse(rsp)
}

// EconomicCalendarGetWithResponse request returning *EconomicCalendarGetClientResponse
func (c *ClientWithResponses) EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error) {
	rsp, err := c.EconomicCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEconomicCalendarGetClientResponse(rsp)
}

// EnterpriseValueGetWithResponse request returning *EnterpriseValueGetClientResponse
func (c *ClientWithResponses) EnterpriseValueGetWithResponse(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*EnterpriseValueGetClientResponse, error) {
	rsp, err := c.EnterpriseValueGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnterpriseValueGetClientResponse(rsp)
}

// EsgDisclosuresGetWithResponse request returning *EsgDisclosuresGetClientResponse
func (c *ClientWithResponses) EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error) {
	rsp, err := c.EsgDisclosuresGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgDisclosuresGetClientResponse(rsp)
}

// EsgRatingsGetWithResponse request returning *EsgRatingsGetClientResponse
func (c *ClientWithResponses) EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error) {
	rsp, err := c.EsgRatingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgRatingsGetClientResponse(rsp)
}

// GradesLatestNewsGetWithResponse request returning *GradesLatestNewsGetClientResponse
func (c *ClientWithResponses) GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error) {
	rsp, err := c.GradesLatestNewsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGradesLatestNewsGetClientResponse(rsp)
}

// HistoricalPriceEodFullGetWithResponse request returning *HistoricalPriceEodFullGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodFullGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodFullGetClientResponse(rsp)
}

// HistoricalPriceEodLightGetWithResponse request returning *HistoricalPriceEodLightGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodLightGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodLightGetClientResponse(rsp)
}

// IncomeStatementGetWithResponse request returning *IncomeStatementGetClientResponse
func (c *ClientWithResponses) IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error) {
	rsp, err := c.IncomeStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementGetClientResponse(rsp)
}

// IncomeStatementTTMGetWithResponse request returning *IncomeStatementTTMGetClientResponse
func (c *ClientWithResponses) IncomeStatementTTMGetWithResponse(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTTMGetClientResponse, error) {
	rsp, err := c.IncomeStatementTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementTTMGetClientResponse(rsp)
}

// InsiderTradingLatestGetWithResponse request returning *InsiderTradingLatestGetClientResponse
func (c *ClientWithResponses) InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error) {
	rsp, err := c.InsiderTradingLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingLatestGetClientResponse(rsp)
}

// InsiderTradingSearchGetWithResponse request returning *InsiderTradingSearchGetClientResponse
func (c *ClientWithResponses) InsiderTradingSearchGetWithResponse(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingSearchGetClientResponse, error) {
	rsp, err := c.InsiderTradingSearchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingSearchGetClientResponse(rsp)
}

// KeyMetricsGetWithResponse request returning *KeyMetricsGetClientResponse
func (c *ClientWithResponses) KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error) {
	rsp, err := c.KeyMetricsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsGetClientResponse(rsp)
}

// KeyMetricsTTMGetWithResponse request returning *KeyMetricsTTMGetClientResponse
func (c *ClientWithResponses) KeyMetricsTTMGetWithResponse(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsTTMGetClientResponse, error) {
	rsp, err := c.KeyMetricsTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsTTMGetClientResponse(rsp)
}

// MarketCapitalizationGetWithResponse request returning *MarketCapitalizationGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationGetClientResponse(rsp)
}

// MarketCapitalizationBatchGetWithResponse request returning *MarketCapitalizationBatchGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationBatchGetClientResponse(rsp)
}

// NewsGeneralLatestGetWithResponse request returning *NewsGeneralLatestGetClientResponse
func (c *ClientWithResponses) NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error) {
	rsp, err := c.NewsGeneralLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewsGeneralLatestGetClientResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetClientResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error) {
	rsp, err := c.ProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetClientResponse(rsp)
}

// QuoteGetWithResponse request returning *QuoteGetClientResponse
func (c *ClientWithResponses) QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error) {
	rsp, err := c.QuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteGetClientResponse(rsp)
}

// QuoteShortGetWithResponse request returning *QuoteShortGetClientResponse
func (c *ClientWithResponses) QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error) {
	rsp, err := c.QuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteShortGetClientResponse(rsp)
}

// RatingsSnapshotGetWithResponse request returning *RatingsSnapshotGetClientResponse
func (c *ClientWithResponses) RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error) {
	rsp, err := c.RatingsSnapshotGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatingsSnapshotGetClientResponse(rsp)
}

// RatiosGetWithResponse request returning *RatiosGetClientResponse
func (c *ClientWithResponses) RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error) {
	rsp, err := c.RatiosGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosGetClientResponse(rsp)
}

// RatiosTTMGetWithResponse request returning *RatiosTTMGetClientResponse
func (c *ClientWithResponses) RatiosTTMGetWithResponse(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*RatiosTTMGetClientResponse, error) {
	rsp, err := c.RatiosTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosTTMGetClientResponse(rsp)
}

// RevenueGeographicSegmentationGetWithResponse request returning *RevenueGeographicSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueGeographicSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueGeographicSegmentationGetClientResponse(rsp)
}

// RevenueProductSegmentationGetWithResponse request returning *RevenueProductSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueProductSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueProductSegmentationGetClientResponse(rsp)
}

// SearchNameGetWithResponse request returning *SearchNameGetClientResponse
func (c *ClientWithResponses) SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error) {
	rsp, err := c.SearchNameGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchNameGetClientResponse(rsp)
}

// SearchSymbolGetWithResponse request returning *SearchSymbolGetClientResponse
func (c *ClientWithResponses) SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error) {
	rsp, err := c.SearchSymbolGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSymbolGetClientResponse(rsp)
}

// SharesFloatGetWithResponse request returning *SharesFloatGetClientResponse
func (c *ClientWithResponses) SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error) {
	rsp, err := c.SharesFloatGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharesFloatGetClientResponse(rsp)
}

// GetSplitsWithResponse request returning *GetSplitsClientResponse
func (c *ClientWithResponses) GetSplitsWithResponse(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*GetSplitsClientResponse, error) {
	rsp, err := c.GetSplits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSplitsClientResponse(rsp)
}

// GetSplitsCalendarWithResponse request returning *GetSplitsCalendarClientResponse
func (c *ClientWithResponses) GetSplitsCalendarWithResponse(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*GetSplitsCalendarClientResponse, error) {
	rsp, err := c.GetSplitsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSplitsCalendarClientResponse(rsp)
}

// StockListGetWithResponse request returning *StockListGetClientResponse
func (c *ClientWithResponses) StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error) {
	rsp, err := c.StockListGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStockListGetClientResponse(rsp)
}

// TechnicalIndicatorsRsiGetWithResponse request returning *TechnicalIndicatorsRsiGetClientResponse
func (c *ClientWithResponses) TechnicalIndicatorsRsiGetWithResponse(ctx context.Context, params *TechnicalIndicatorsRsiGetParams, reqEditors ...RequestEditorFn) (*TechnicalIndicatorsRsiGetClientResponse, error) {
	rsp, err := c.TechnicalIndicatorsRsiGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTechnicalIndicatorsRsiGetClientResponse(rsp)
}

// TreasuryRatesGetWithResponse request returning *TreasuryRatesGetClientResponse
func (c *ClientWithResponses) TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error) {
	rsp, err := c.TreasuryRatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreasuryRatesGetClientResponse(rsp)
}

// ParseAnalystEstimatesGetClientResponse parses an HTTP response from a AnalystEstimatesGetWithResponse call
func ParseAnalystEstimatesGetClientResponse(rsp *http.Response) (*AnalystEstimatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnalystEstimatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialEstimates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAvailableExchangesGetClientResponse parses an HTTP response from a AvailableExchangesGetWithResponse call
func ParseAvailableExchangesGetClientResponse(rsp *http.Response) (*AvailableExchangesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailableExchangesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Exchange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementGetClientResponse parses an HTTP response from a BalanceSheetStatementGetWithResponse call
func ParseBalanceSheetStatementGetClientResponse(rsp *http.Response) (*BalanceSheetStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementTTMGetClientResponse parses an HTTP response from a BalanceSheetStatementTTMGetWithResponse call
func ParseBalanceSheetStatementTTMGetClientResponse(rsp *http.Response) (*BalanceSheetStatementTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatementTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteGetClientResponse parses an HTTP response from a BatchQuoteGetWithResponse call
func ParseBatchQuoteGetClientResponse(rsp *http.Response) (*BatchQuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteShortGetClientResponse parses an HTTP response from a BatchQuoteShortGetWithResponse call
func ParseBatchQuoteShortGetClientResponse(rsp *http.Response) (*BatchQuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementGetClientResponse parses an HTTP response from a CashFlowStatementGetWithResponse call
func ParseCashFlowStatementGetClientResponse(rsp *http.Response) (*CashFlowStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementTTMGetClientResponse parses an HTTP response from a CashFlowStatementTTMGetWithResponse call
func ParseCashFlowStatementTTMGetClientResponse(rsp *http.Response) (*CashFlowStatementTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatementTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDividendsGetClientResponse parses an HTTP response from a DividendsGetWithResponse call
func ParseDividendsGetClientResponse(rsp *http.Response) (*DividendsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DividendsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDividendsCalendarGetClientResponse parses an HTTP response from a DividendsCalendarGetWithResponse call
func ParseDividendsCalendarGetClientResponse(rsp *http.Response) (*DividendsCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DividendsCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEarningsGetClientResponse parses an HTTP response from a EarningsGetWithResponse call
func ParseEarningsGetClientResponse(rsp *http.Response) (*EarningsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EarningsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEarningsCalendarClientResponse parses an HTTP response from a GetEarningsCalendarWithResponse call
func ParseGetEarningsCalendarClientResponse(rsp *http.Response) (*GetEarningsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEarningsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEconomicCalendarGetClientResponse parses an HTTP response from a EconomicCalendarGetWithResponse call
func ParseEconomicCalendarGetClientResponse(rsp *http.Response) (*EconomicCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EconomicCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnterpriseValueGetClientResponse parses an HTTP response from a EnterpriseValueGetWithResponse call
func ParseEnterpriseValueGetClientResponse(rsp *http.Response) (*EnterpriseValueGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnterpriseValueGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnterpriseValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgDisclosuresGetClientResponse parses an HTTP response from a EsgDisclosuresGetWithResponse call
func ParseEsgDisclosuresGetClientResponse(rsp *http.Response) (*EsgDisclosuresGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgDisclosuresGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgDisclosure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgRatingsGetClientResponse parses an HTTP response from a EsgRatingsGetWithResponse call
func ParseEsgRatingsGetClientResponse(rsp *http.Response) (*EsgRatingsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgRatingsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgRating
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGradesLatestNewsGetClientResponse parses an HTTP response from a GradesLatestNewsGetWithResponse call
func ParseGradesLatestNewsGetClientResponse(rsp *http.Response) (*GradesLatestNewsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GradesLatestNewsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GradeNews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodFullGetClientResponse parses an HTTP response from a HistoricalPriceEodFullGetWithResponse call
func ParseHistoricalPriceEodFullGetClientResponse(rsp *http.Response) (*HistoricalPriceEodFullGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodFullGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodLightGetClientResponse parses an HTTP response from a HistoricalPriceEodLightGetWithResponse call
func ParseHistoricalPriceEodLightGetClientResponse(rsp *http.Response) (*HistoricalPriceEodLightGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodLightGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LightCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementGetClientResponse parses an HTTP response from a IncomeStatementGetWithResponse call
func ParseIncomeStatementGetClientResponse(rsp *http.Response) (*IncomeStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementTTMGetClientResponse parses an HTTP response from a IncomeStatementTTMGetWithResponse call
func ParseIncomeStatementTTMGetClientResponse(rsp *http.Response) (*IncomeStatementTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatementTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingLatestGetClientResponse parses an HTTP response from a InsiderTradingLatestGetWithResponse call
func ParseInsiderTradingLatestGetClientResponse(rsp *http.Response) (*InsiderTradingLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingSearchGetClientResponse parses an HTTP response from a InsiderTradingSearchGetWithResponse call
func ParseInsiderTradingSearchGetClientResponse(rsp *http.Response) (*InsiderTradingSearchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingSearchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsGetClientResponse parses an HTTP response from a KeyMetricsGetWithResponse call
func ParseKeyMetricsGetClientResponse(rsp *http.Response) (*KeyMetricsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsTTMGetClientResponse parses an HTTP response from a KeyMetricsTTMGetWithResponse call
func ParseKeyMetricsTTMGetClientResponse(rsp *http.Response) (*KeyMetricsTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetricsTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationGetClientResponse parses an HTTP response from a MarketCapitalizationGetWithResponse call
func ParseMarketCapitalizationGetClientResponse(rsp *http.Response) (*MarketCapitalizationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationBatchGetClientResponse parses an HTTP response from a MarketCapitalizationBatchGetWithResponse call
func ParseMarketCapitalizationBatchGetClientResponse(rsp *http.Response) (*MarketCapitalizationBatchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationBatchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewsGeneralLatestGetClientResponse parses an HTTP response from a NewsGeneralLatestGetWithResponse call
func ParseNewsGeneralLatestGetClientResponse(rsp *http.Response) (*NewsGeneralLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewsGeneralLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsArticle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileGetClientResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetClientResponse(rsp *http.Response) (*ProfileGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseQuoteGetClientResponse parses an HTTP response from a QuoteGetWithResponse call
func ParseQuoteGetClientResponse(rsp *http.Response) (*QuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuoteShortGetClientResponse parses an HTTP response from a QuoteShortGetWithResponse call
func ParseQuoteShortGetClientResponse(rsp *http.Response) (*QuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatingsSnapshotGetClientResponse parses an HTTP response from a RatingsSnapshotGetWithResponse call
func ParseRatingsSnapshotGetClientResponse(rsp *http.Response) (*RatingsSnapshotGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatingsSnapshotGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatingSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosGetClientResponse parses an HTTP response from a RatiosGetWithResponse call
func ParseRatiosGetClientResponse(rsp *http.Response) (*RatiosGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialRatios
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosTTMGetClientResponse parses an HTTP response from a RatiosTTMGetWithResponse call
func ParseRatiosTTMGetClientResponse(rsp *http.Response) (*RatiosTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatiosTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueGeographicSegmentationGetClientResponse parses an HTTP response from a RevenueGeographicSegmentationGetWithResponse call
func ParseRevenueGeographicSegmentationGetClientResponse(rsp *http.Response) (*RevenueGeographicSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueGeographicSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueProductSegmentationGetClientResponse parses an HTTP response from a RevenueProductSegmentationGetWithResponse call
func ParseRevenueProductSegmentationGetClientResponse(rsp *http.Response) (*RevenueProductSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueProductSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchNameGetClientResponse parses an HTTP response from a SearchNameGetWithResponse call
func ParseSearchNameGetClientResponse(rsp *http.Response) (*SearchNameGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchNameGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSymbolGetClientResponse parses an HTTP response from a SearchSymbolGetWithResponse call
func ParseSearchSymbolGetClientResponse(rsp *http.Response) (*SearchSymbolGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSymbolGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharesFloatGetClientResponse parses an HTTP response from a SharesFloatGetWithResponse call
func ParseSharesFloatGetClientResponse(rsp *http.Response) (*SharesFloatGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharesFloatGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySharesFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSplitsClientResponse parses an HTTP response from a GetSplitsWithResponse call
func ParseGetSplitsClientResponse(rsp *http.Response) (*GetSplitsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSplitsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSplitsCalendarClientResponse parses an HTTP response from a GetSplitsCalendarWithResponse call
func ParseGetSplitsCalendarClientResponse(rsp *http.Response) (*GetSplitsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSplitsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStockListGetClientResponse parses an HTTP response from a StockListGetWithResponse call
func ParseStockListGetClientResponse(rsp *http.Response) (*StockListGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StockListGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTechnicalIndicatorsRsiGetClientResponse parses an HTTP response from a TechnicalIndicatorsRsiGetWithResponse call
func ParseTechnicalIndicatorsRsiGetClientResponse(rsp *http.Response) (*TechnicalIndicatorsRsiGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TechnicalIndicatorsRsiGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TechnicalIndicator
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreasuryRatesGetClientResponse parses an HTTP response from a TreasuryRatesGetWithResponse call
func ParseTreasuryRatesGetClientResponse(rsp *http.Response) (*TreasuryRatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreasuryRatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TreasuryRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/f8BAAD//3HTrpGWhQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
