// Package financialmodelingprep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 6efb8729c49d05fcc2d90d9553b4bccb0e2e9055 DO NOT EDIT.
package financialmodelingprep

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for Period.
const (
	Annual  Period = "annual"
	FY      Period = "FY"
	Q1      Period = "Q1"
	Q2      Period = "Q2"
	Q3      Period = "Q3"
	Q4      Period = "Q4"
	Quarter Period = "quarter"
)

// BalanceSheetStatement defines model for BalanceSheetStatement.
type BalanceSheetStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float64            `json:"accountPayables"`
	AccountsReceivables                     float64            `json:"accountsReceivables"`
	AccruedExpenses                         float64            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float64            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float64            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float64            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float64            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float64            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float64            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float64            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float64            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float64            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float64            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float64            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float64            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float64            `json:"intangibleAssets"`
	Inventory                               float64            `json:"inventory"`
	LongTermDebt                            float64            `json:"longTermDebt"`
	LongTermInvestments                     float64            `json:"longTermInvestments"`
	MinorityInterest                        float64            `json:"minorityInterest"`
	NetDebt                                 float64            `json:"netDebt"`
	NetReceivables                          float64            `json:"netReceivables"`
	OtherAssets                             float64            `json:"otherAssets"`
	OtherCurrentAssets                      float64            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float64            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float64            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float64            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float64            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float64            `json:"otherPayables"`
	OtherReceivables                        float64            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float64            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float64            `json:"preferredStock"`
	Prepaids                                float64            `json:"prepaids"`
	PropertyPlantEquipmentNet               float64            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float64            `json:"retainedEarnings"`
	ShortTermDebt                           float64            `json:"shortTermDebt"`
	ShortTermInvestments                    float64            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float64            `json:"taxAssets"`
	TaxPayables                             float64            `json:"taxPayables"`
	TotalAssets                             float64            `json:"totalAssets"`
	TotalCurrentAssets                      float64            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float64            `json:"totalCurrentLiabilities"`
	TotalDebt                               float64            `json:"totalDebt"`
	TotalEquity                             float64            `json:"totalEquity"`
	TotalInvestments                        float64            `json:"totalInvestments"`
	TotalLiabilities                        float64            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float64            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float64            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float64            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float64            `json:"totalPayables"`
	TotalStockholdersEquity                 float64            `json:"totalStockholdersEquity"`
	TreasuryStock                           float64            `json:"treasuryStock"`
}

// BalanceSheetStatementTtm defines model for BalanceSheetStatementTtm.
type BalanceSheetStatementTtm struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float32            `json:"accountPayables"`
	AccountsReceivables                     float32            `json:"accountsReceivables"`
	AccruedExpenses                         float32            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float32            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float32            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float32            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float32            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float32            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float32            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float32            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float32            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float32            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float32            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float32            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float32            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float32            `json:"intangibleAssets"`
	Inventory                               float32            `json:"inventory"`
	LongTermDebt                            float32            `json:"longTermDebt"`
	LongTermInvestments                     float32            `json:"longTermInvestments"`
	MinorityInterest                        float32            `json:"minorityInterest"`
	NetDebt                                 float32            `json:"netDebt"`
	NetReceivables                          float32            `json:"netReceivables"`
	OtherAssets                             float32            `json:"otherAssets"`
	OtherCurrentAssets                      float32            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float32            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float32            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float32            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float32            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float32            `json:"otherPayables"`
	OtherReceivables                        float32            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float32            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float32            `json:"preferredStock"`
	Prepaids                                float32            `json:"prepaids"`
	PropertyPlantEquipmentNet               float32            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float32            `json:"retainedEarnings"`
	ShortTermDebt                           float32            `json:"shortTermDebt"`
	ShortTermInvestments                    float32            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float32            `json:"taxAssets"`
	TaxPayables                             float32            `json:"taxPayables"`
	TotalAssets                             float32            `json:"totalAssets"`
	TotalCurrentAssets                      float32            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float32            `json:"totalCurrentLiabilities"`
	TotalDebt                               float32            `json:"totalDebt"`
	TotalEquity                             float32            `json:"totalEquity"`
	TotalInvestments                        float32            `json:"totalInvestments"`
	TotalLiabilities                        float32            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float32            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float32            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float32            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float32            `json:"totalPayables"`
	TotalStockholdersEquity                 float32            `json:"totalStockholdersEquity"`
	TreasuryStock                           float32            `json:"treasuryStock"`
}

// CashFlowStatement defines model for CashFlowStatement.
type CashFlowStatement struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CashFlowStatementTtm defines model for CashFlowStatementTtm.
type CashFlowStatementTtm struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CompanyCapitalization defines model for CompanyCapitalization.
type CompanyCapitalization struct {
	Date      openapi_types.Date `json:"date"`
	MarketCap float64            `json:"marketCap"`
	Symbol    string             `json:"symbol"`
}

// CompanyProfile defines model for CompanyProfile.
type CompanyProfile struct {
	Address           string  `json:"address"`
	AverageVolume     float64 `json:"averageVolume"`
	Beta              float64 `json:"beta"`
	Ceo               string  `json:"ceo"`
	Change            float64 `json:"change"`
	ChangePercentage  float64 `json:"changePercentage"`
	Cik               string  `json:"cik"`
	City              string  `json:"city"`
	CompanyName       string  `json:"companyName"`
	Country           string  `json:"country"`
	Currency          string  `json:"currency"`
	Cusip             string  `json:"cusip"`
	DefaultImage      bool    `json:"defaultImage"`
	Description       string  `json:"description"`
	Exchange          string  `json:"exchange"`
	ExchangeFullName  string  `json:"exchangeFullName"`
	FullTimeEmployees string  `json:"fullTimeEmployees"`
	Image             string  `json:"image"`
	Industry          string  `json:"industry"`
	IpoDate           string  `json:"ipoDate"`
	IsActivelyTrading bool    `json:"isActivelyTrading"`
	IsAdr             bool    `json:"isAdr"`
	IsEtf             bool    `json:"isEtf"`
	IsFund            bool    `json:"isFund"`
	Isin              string  `json:"isin"`
	LastDividend      float64 `json:"lastDividend"`
	MarketCap         float64 `json:"marketCap"`
	Phone             string  `json:"phone"`
	Price             float64 `json:"price"`
	Range             string  `json:"range"`
	Sector            string  `json:"sector"`
	State             string  `json:"state"`
	Symbol            string  `json:"symbol"`
	Volume            int     `json:"volume"`
	Website           string  `json:"website"`
	Zip               string  `json:"zip"`
}

// CompanySharesFloat defines model for CompanySharesFloat.
type CompanySharesFloat struct {
	Date              string  `json:"date"`
	FloatShares       int     `json:"floatShares"`
	FreeFloat         float64 `json:"freeFloat"`
	OutstandingShares int     `json:"outstandingShares"`
	Symbol            string  `json:"symbol"`
}

// CompanySymbol defines model for CompanySymbol.
type CompanySymbol struct {
	CompanyName string `json:"companyName"`
	Symbol      string `json:"symbol"`
}

// DividendEvent defines model for DividendEvent.
type DividendEvent struct {
	AdjDividend     float64            `json:"adjDividend"`
	Date            openapi_types.Date `json:"date"`
	DeclarationDate string             `json:"declarationDate"`
	Dividend        float64            `json:"dividend"`
	Frequency       string             `json:"frequency"`
	PaymentDate     string             `json:"paymentDate"`
	RecordDate      string             `json:"recordDate"`
	Symbol          string             `json:"symbol"`
	Yield           float64            `json:"yield"`
}

// EconomicEsgDisclosure defines model for EconomicEsgDisclosure.
type EconomicEsgDisclosure struct {
	ESGScore           float64            `json:"ESGScore"`
	AcceptedDate       openapi_types.Date `json:"acceptedDate"`
	Cik                string             `json:"cik"`
	CompanyName        string             `json:"companyName"`
	Date               openapi_types.Date `json:"date"`
	EnvironmentalScore float64            `json:"environmentalScore"`
	FormType           string             `json:"formType"`
	GovernanceScore    float64            `json:"governanceScore"`
	SocialScore        float64            `json:"socialScore"`
	Symbol             string             `json:"symbol"`
	Url                string             `json:"url"`
}

// EconomicEsgRating defines model for EconomicEsgRating.
type EconomicEsgRating struct {
	ESGRiskRating string `json:"ESGRiskRating"`
	Cik           string `json:"cik"`
	CompanyName   string `json:"companyName"`
	FiscalYear    int    `json:"fiscalYear"`
	Industry      string `json:"industry"`
	IndustryRank  string `json:"industryRank"`
	Symbol        string `json:"symbol"`
}

// EconomicEvent defines model for EconomicEvent.
type EconomicEvent struct {
	Actual           float64  `json:"actual"`
	Change           float64  `json:"change"`
	ChangePercentage float64  `json:"changePercentage"`
	Country          string   `json:"country"`
	Currency         string   `json:"currency"`
	Date             string   `json:"date"`
	Estimate         *float64 `json:"estimate"`
	Event            string   `json:"event"`
	Impact           string   `json:"impact"`
	Previous         float64  `json:"previous"`
}

// Exchange defines model for Exchange.
type Exchange struct {
	CountryCode  string `json:"countryCode"`
	CountryName  string `json:"countryName"`
	Delay        string `json:"delay"`
	Exchange     string `json:"exchange"`
	Name         string `json:"name"`
	SymbolSuffix string `json:"symbolSuffix"`
}

// FinancialEstimates defines model for FinancialEstimates.
type FinancialEstimates struct {
	Date               openapi_types.Date `json:"date"`
	EbitAvg            float64            `json:"ebitAvg"`
	EbitHigh           float32            `json:"ebitHigh"`
	EbitLow            float64            `json:"ebitLow"`
	EbitdaAvg          float64            `json:"ebitdaAvg"`
	EbitdaHigh         float64            `json:"ebitdaHigh"`
	EbitdaLow          float32            `json:"ebitdaLow"`
	EpsAvg             float64            `json:"epsAvg"`
	EpsHigh            float64            `json:"epsHigh"`
	EpsLow             float64            `json:"epsLow"`
	NetIncomeAvg       float64            `json:"netIncomeAvg"`
	NetIncomeHigh      float32            `json:"netIncomeHigh"`
	NetIncomeLow       float64            `json:"netIncomeLow"`
	NumAnalystsEps     int                `json:"numAnalystsEps"`
	NumAnalystsRevenue int                `json:"numAnalystsRevenue"`
	RevenueAvg         float64            `json:"revenueAvg"`
	RevenueHigh        float64            `json:"revenueHigh"`
	RevenueLow         float64            `json:"revenueLow"`
	SgaExpenseAvg      float64            `json:"sgaExpenseAvg"`
	SgaExpenseHigh     float64            `json:"sgaExpenseHigh"`
	SgaExpenseLow      float64            `json:"sgaExpenseLow"`
	Symbol             string             `json:"symbol"`
}

// FinancialRatios defines model for FinancialRatios.
type FinancialRatios struct {
	AssetTurnover                           float64            `json:"assetTurnover"`
	BookValuePerShare                       float64            `json:"bookValuePerShare"`
	BottomLineProfitMargin                  float64            `json:"bottomLineProfitMargin"`
	CapexPerShare                           float64            `json:"capexPerShare"`
	CapitalExpenditureCoverageRatio         float64            `json:"capitalExpenditureCoverageRatio"`
	CashPerShare                            float64            `json:"cashPerShare"`
	CashRatio                               float64            `json:"cashRatio"`
	ContinuousOperationsProfitMargin        float64            `json:"continuousOperationsProfitMargin"`
	CurrentRatio                            float64            `json:"currentRatio"`
	Date                                    openapi_types.Date `json:"date"`
	DebtServiceCoverageRatio                float64            `json:"debtServiceCoverageRatio"`
	DebtToAssetsRatio                       float64            `json:"debtToAssetsRatio"`
	DebtToCapitalRatio                      float64            `json:"debtToCapitalRatio"`
	DebtToEquityRatio                       float64            `json:"debtToEquityRatio"`
	DebtToMarketCap                         float64            `json:"debtToMarketCap"`
	DividendPaidAndCapexCoverageRatio       float64            `json:"dividendPaidAndCapexCoverageRatio"`
	DividendPayoutRatio                     float64            `json:"dividendPayoutRatio"`
	DividendYield                           float64            `json:"dividendYield"`
	DividendYieldPercentage                 float64            `json:"dividendYieldPercentage"`
	EbitMargin                              float64            `json:"ebitMargin"`
	EbitdaMargin                            float64            `json:"ebitdaMargin"`
	EbtPerEbit                              float64            `json:"ebtPerEbit"`
	EffectiveTaxRate                        float64            `json:"effectiveTaxRate"`
	EnterpriseValueMultiple                 float64            `json:"enterpriseValueMultiple"`
	FinancialLeverageRatio                  float64            `json:"financialLeverageRatio"`
	FiscalYear                              string             `json:"fiscalYear"`
	FixedAssetTurnover                      float64            `json:"fixedAssetTurnover"`
	ForwardPriceToEarningsGrowthRatio       float64            `json:"forwardPriceToEarningsGrowthRatio"`
	FreeCashFlowOperatingCashFlowRatio      float64            `json:"freeCashFlowOperatingCashFlowRatio"`
	FreeCashFlowPerShare                    float64            `json:"freeCashFlowPerShare"`
	GrossProfitMargin                       float64            `json:"grossProfitMargin"`
	InterestCoverageRatio                   float64            `json:"interestCoverageRatio"`
	InterestDebtPerShare                    float64            `json:"interestDebtPerShare"`
	InventoryTurnover                       float64            `json:"inventoryTurnover"`
	LongTermDebtToCapitalRatio              float64            `json:"longTermDebtToCapitalRatio"`
	NetIncomePerEBT                         float64            `json:"netIncomePerEBT"`
	NetIncomePerShare                       float64            `json:"netIncomePerShare"`
	NetProfitMargin                         float64            `json:"netProfitMargin"`
	OperatingCashFlowCoverageRatio          float64            `json:"operatingCashFlowCoverageRatio"`
	OperatingCashFlowPerShare               float64            `json:"operatingCashFlowPerShare"`
	OperatingCashFlowRatio                  float64            `json:"operatingCashFlowRatio"`
	OperatingCashFlowSalesRatio             float64            `json:"operatingCashFlowSalesRatio"`
	OperatingProfitMargin                   float64            `json:"operatingProfitMargin"`
	PayablesTurnover                        float64            `json:"payablesTurnover"`
	Period                                  string             `json:"period"`
	PretaxProfitMargin                      float64            `json:"pretaxProfitMargin"`
	PriceToBookRatio                        float64            `json:"priceToBookRatio"`
	PriceToEarningsGrowthRatio              float64            `json:"priceToEarningsGrowthRatio"`
	PriceToEarningsRatio                    float64            `json:"priceToEarningsRatio"`
	PriceToFairValue                        float64            `json:"priceToFairValue"`
	PriceToFreeCashFlowRatio                float64            `json:"priceToFreeCashFlowRatio"`
	PriceToOperatingCashFlowRatio           float64            `json:"priceToOperatingCashFlowRatio"`
	PriceToSalesRatio                       float64            `json:"priceToSalesRatio"`
	QuickRatio                              float64            `json:"quickRatio"`
	ReceivablesTurnover                     float64            `json:"receivablesTurnover"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RevenuePerShare                         float64            `json:"revenuePerShare"`
	ShareholdersEquityPerShare              float64            `json:"shareholdersEquityPerShare"`
	ShortTermOperatingCashFlowCoverageRatio float64            `json:"shortTermOperatingCashFlowCoverageRatio"`
	SolvencyRatio                           float64            `json:"solvencyRatio"`
	Symbol                                  string             `json:"symbol"`
	TangibleBookValuePerShare               float64            `json:"tangibleBookValuePerShare"`
	WorkingCapitalTurnoverRatio             float64            `json:"workingCapitalTurnoverRatio"`
}

// FullCandle defines model for FullCandle.
type FullCandle struct {
	Change        float64            `json:"change"`
	ChangePercent float64            `json:"changePercent"`
	Close         float64            `json:"close"`
	Date          openapi_types.Date `json:"date"`
	High          float64            `json:"high"`
	Low           float64            `json:"low"`
	Open          float64            `json:"open"`
	Symbol        string             `json:"symbol"`
	Volume        int                `json:"volume"`
	Vwap          float64            `json:"vwap"`
}

// FullQuote defines model for FullQuote.
type FullQuote struct {
	Change           float64 `json:"change"`
	ChangePercentage float64 `json:"changePercentage"`
	DayHigh          float64 `json:"dayHigh"`
	DayLow           float64 `json:"dayLow"`
	Exchange         string  `json:"exchange"`
	MarketCap        float64 `json:"marketCap"`
	Name             string  `json:"name"`
	Open             float64 `json:"open"`
	PreviousClose    float64 `json:"previousClose"`
	Price            float64 `json:"price"`
	PriceAvg200      float64 `json:"priceAvg200"`
	PriceAvg50       float64 `json:"priceAvg50"`
	Symbol           string  `json:"symbol"`
	Timestamp        int     `json:"timestamp"`
	Volume           int     `json:"volume"`
	YearHigh         float64 `json:"yearHigh"`
	YearLow          float64 `json:"yearLow"`
}

// IncomeStatement defines model for IncomeStatement.
type IncomeStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// IncomeStatementTtm defines model for IncomeStatementTtm.
type IncomeStatementTtm struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// InsiderTransaction defines model for InsiderTransaction.
type InsiderTransaction struct {
	AcquisitionOrDisposition string             `json:"acquisitionOrDisposition"`
	CompanyCik               string             `json:"companyCik"`
	DirectOrIndirect         string             `json:"directOrIndirect"`
	FilingDate               openapi_types.Date `json:"filingDate"`
	FormType                 string             `json:"formType"`
	Price                    float32            `json:"price"`
	ReportingCik             string             `json:"reportingCik"`
	ReportingName            string             `json:"reportingName"`
	SecuritiesOwned          int                `json:"securitiesOwned"`
	SecuritiesTransacted     int                `json:"securitiesTransacted"`
	SecurityName             string             `json:"securityName"`
	Symbol                   string             `json:"symbol"`
	TransactionDate          openapi_types.Date `json:"transactionDate"`
	TransactionType          string             `json:"transactionType"`
	TypeOfOwner              string             `json:"typeOfOwner"`
	Url                      string             `json:"url"`
}

// KeyMetrics defines model for KeyMetrics.
type KeyMetrics struct {
	AverageInventory                       float64            `json:"averageInventory"`
	AveragePayables                        float64            `json:"averagePayables"`
	AverageReceivables                     float64            `json:"averageReceivables"`
	CapexToDepreciation                    float64            `json:"capexToDepreciation"`
	CapexToOperatingCashFlow               float64            `json:"capexToOperatingCashFlow"`
	CapexToRevenue                         float64            `json:"capexToRevenue"`
	CashConversionCycle                    float64            `json:"cashConversionCycle"`
	CurrentRatio                           float64            `json:"currentRatio"`
	Date                                   openapi_types.Date `json:"date"`
	DaysOfInventoryOutstanding             float64            `json:"daysOfInventoryOutstanding"`
	DaysOfPayablesOutstanding              float64            `json:"daysOfPayablesOutstanding"`
	DaysOfSalesOutstanding                 float64            `json:"daysOfSalesOutstanding"`
	EarningsYield                          float64            `json:"earningsYield"`
	EnterpriseValue                        float64            `json:"enterpriseValue"`
	EvToEBITDA                             float64            `json:"evToEBITDA"`
	EvToFreeCashFlow                       float64            `json:"evToFreeCashFlow"`
	EvToOperatingCashFlow                  float64            `json:"evToOperatingCashFlow"`
	EvToSales                              float64            `json:"evToSales"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlowToEquity                   float64            `json:"freeCashFlowToEquity"`
	FreeCashFlowToFirm                     float64            `json:"freeCashFlowToFirm"`
	FreeCashFlowYield                      float64            `json:"freeCashFlowYield"`
	GrahamNetNet                           float64            `json:"grahamNetNet"`
	GrahamNumber                           float64            `json:"grahamNumber"`
	IncomeQuality                          float64            `json:"incomeQuality"`
	IntangiblesToTotalAssets               float64            `json:"intangiblesToTotalAssets"`
	InterestBurden                         float64            `json:"interestBurden"`
	InvestedCapital                        float64            `json:"investedCapital"`
	MarketCap                              float64            `json:"marketCap"`
	NetCurrentAssetValue                   float64            `json:"netCurrentAssetValue"`
	NetDebtToEBITDA                        float64            `json:"netDebtToEBITDA"`
	OperatingCycle                         float64            `json:"operatingCycle"`
	OperatingReturnOnAssets                float64            `json:"operatingReturnOnAssets"`
	Period                                 string             `json:"period"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	ResearchAndDevelopementToRevenue       float64            `json:"researchAndDevelopementToRevenue"`
	ReturnOnAssets                         float64            `json:"returnOnAssets"`
	ReturnOnCapitalEmployed                float64            `json:"returnOnCapitalEmployed"`
	ReturnOnEquity                         float64            `json:"returnOnEquity"`
	ReturnOnInvestedCapital                float64            `json:"returnOnInvestedCapital"`
	ReturnOnTangibleAssets                 float64            `json:"returnOnTangibleAssets"`
	SalesGeneralAndAdministrativeToRevenue float64            `json:"salesGeneralAndAdministrativeToRevenue"`
	StockBasedCompensationToRevenue        float64            `json:"stockBasedCompensationToRevenue"`
	Symbol                                 string             `json:"symbol"`
	TangibleAssetValue                     float64            `json:"tangibleAssetValue"`
	TaxBurden                              float64            `json:"taxBurden"`
	WorkingCapital                         float64            `json:"workingCapital"`
}

// LightCandle defines model for LightCandle.
type LightCandle struct {
	Date   openapi_types.Date `json:"date"`
	Price  float32            `json:"price"`
	Symbol string             `json:"symbol"`
	Volume int                `json:"volume"`
}

// News defines model for News.
type News struct {
	Action          string    `json:"action"`
	GradingCompany  string    `json:"gradingCompany"`
	NewGrade        string    `json:"newGrade"`
	NewsBaseURL     string    `json:"newsBaseURL"`
	NewsPublisher   string    `json:"newsPublisher"`
	NewsTitle       string    `json:"newsTitle"`
	NewsURL         string    `json:"newsURL"`
	PreviousGrade   string    `json:"previousGrade"`
	PriceWhenPosted float32   `json:"priceWhenPosted"`
	PublishedDate   time.Time `json:"publishedDate"`
	Symbol          string    `json:"symbol"`
}

// NewsArticle defines model for NewsArticle.
type NewsArticle struct {
	Image         string    `json:"image"`
	PublishedDate time.Time `json:"publishedDate"`
	Publisher     string    `json:"publisher"`
	Site          string    `json:"site"`
	Symbol        string    `json:"symbol"`
	Text          string    `json:"text"`
	Title         string    `json:"title"`
	Url           string    `json:"url"`
}

// Period Reporting period
type Period string

// RatingSnapshot defines model for RatingSnapshot.
type RatingSnapshot struct {
	DebtToEquityScore       int    `json:"debtToEquityScore"`
	DiscountedCashFlowScore int    `json:"discountedCashFlowScore"`
	OverallScore            int    `json:"overallScore"`
	PriceToBookScore        int    `json:"priceToBookScore"`
	PriceToEarningsScore    int    `json:"priceToEarningsScore"`
	Rating                  string `json:"rating"`
	ReturnOnAssetsScore     int    `json:"returnOnAssetsScore"`
	ReturnOnEquityScore     int    `json:"returnOnEquityScore"`
	Symbol                  string `json:"symbol"`
}

// RevenueSegmentation defines model for RevenueSegmentation.
type RevenueSegmentation struct {
	Data             map[string]float32 `json:"data"`
	Date             openapi_types.Date `json:"date"`
	FiscalYear       int                `json:"fiscalYear"`
	Period           string             `json:"period"`
	ReportedCurrency *string            `json:"reportedCurrency"`
	Symbol           string             `json:"symbol"`
}

// SearchSymbol defines model for SearchSymbol.
type SearchSymbol struct {
	Currency         string `json:"currency"`
	Exchange         string `json:"exchange"`
	ExchangeFullName string `json:"exchangeFullName"`
	Name             string `json:"name"`
	Symbol           string `json:"symbol"`
}

// ShortQuote defines model for ShortQuote.
type ShortQuote struct {
	Change float64 `json:"change"`
	Price  float64 `json:"price"`
	Symbol string  `json:"symbol"`
	Volume int     `json:"volume"`
}

// TreasuryRates defines model for TreasuryRates.
type TreasuryRates struct {
	Date   openapi_types.Date `json:"date"`
	Month1 float64            `json:"month1"`
	Month2 float64            `json:"month2"`
	Month3 float64            `json:"month3"`
	Month6 float64            `json:"month6"`
	Year1  float64            `json:"year1"`
	Year10 float64            `json:"year10"`
	Year2  float64            `json:"year2"`
	Year20 float64            `json:"year20"`
	Year3  float64            `json:"year3"`
	Year30 float64            `json:"year30"`
	Year5  float64            `json:"year5"`
	Year7  float64            `json:"year7"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse map[string]interface{}

// ProfileGetResponse defines model for ProfileGetResponse.
type ProfileGetResponse = []CompanyProfile

// AnalystEstimatesGetParams defines parameters for AnalystEstimatesGet.
type AnalystEstimatesGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Period string `form:"period" json:"period"`
	Page   *int   `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BalanceSheetStatementGetParams defines parameters for BalanceSheetStatementGet.
type BalanceSheetStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// BalanceSheetStatementTtmGetParams defines parameters for BalanceSheetStatementTtmGet.
type BalanceSheetStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BatchQuoteGetParams defines parameters for BatchQuoteGet.
type BatchQuoteGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// BatchQuoteShortGetParams defines parameters for BatchQuoteShortGet.
type BatchQuoteShortGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// CashFlowStatementGetParams defines parameters for CashFlowStatementGet.
type CashFlowStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// CashFlowStatementTtmGetParams defines parameters for CashFlowStatementTtmGet.
type CashFlowStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetDividendsCalendarParams defines parameters for GetDividendsCalendar.
type GetDividendsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EconomicCalendarGetParams defines parameters for EconomicCalendarGet.
type EconomicCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EsgDisclosuresGetParams defines parameters for EsgDisclosuresGet.
type EsgDisclosuresGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgRatingsGetParams defines parameters for EsgRatingsGet.
type EsgRatingsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GradesLatestNewsGetParams defines parameters for GradesLatestNewsGet.
type GradesLatestNewsGetParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// HistoricalPriceEodFullGetParams defines parameters for HistoricalPriceEodFullGet.
type HistoricalPriceEodFullGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// HistoricalPriceEodLightGetParams defines parameters for HistoricalPriceEodLightGet.
type HistoricalPriceEodLightGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// IncomeStatementGetParams defines parameters for IncomeStatementGet.
type IncomeStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// IncomeStatementTtmGetParams defines parameters for IncomeStatementTtmGet.
type IncomeStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingLatestGetParams defines parameters for InsiderTradingLatestGet.
type InsiderTradingLatestGetParams struct {
	Date  *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// KeyMetricsGetParams defines parameters for KeyMetricsGet.
type KeyMetricsGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// MarketCapitalizationGetParams defines parameters for MarketCapitalizationGet.
type MarketCapitalizationGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationBatchGetParams defines parameters for MarketCapitalizationBatchGet.
type MarketCapitalizationBatchGetParams struct {
	// Symbols Array of symbols to fetch market capitalization data for
	Symbols string `form:"symbols" json:"symbols"`
}

// NewsGeneralLatestGetParams defines parameters for NewsGeneralLatestGet.
type NewsGeneralLatestGetParams struct {
	From  *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To    *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProfileGetParams defines parameters for ProfileGet.
type ProfileGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteGetParams defines parameters for QuoteGet.
type QuoteGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteShortGetParams defines parameters for QuoteShortGet.
type QuoteShortGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RatingsSnapshotGetParams defines parameters for RatingsSnapshotGet.
type RatingsSnapshotGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// RatiosGetParams defines parameters for RatiosGet.
type RatiosGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// RevenueGeographicSegmentationGetParams defines parameters for RevenueGeographicSegmentationGet.
type RevenueGeographicSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// RevenueProductSegmentationGetParams defines parameters for RevenueProductSegmentationGet.
type RevenueProductSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// SearchNameGetParams defines parameters for SearchNameGet.
type SearchNameGetParams struct {
	SearchSymbol string  `form:"search-symbol" json:"search-symbol"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange     *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SearchSymbolGetParams defines parameters for SearchSymbolGet.
type SearchSymbolGetParams struct {
	Query    string  `form:"query" json:"query"`
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SharesFloatGetParams defines parameters for SharesFloatGet.
type SharesFloatGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// TreasuryRatesGetParams defines parameters for TreasuryRatesGet.
type TreasuryRatesGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

type OperationPath string

const (

	// /analyst-estimates
	AnalystEstimatesGetOperationPath OperationPath = "/analyst-estimates"

	// /available-exchanges
	AvailableExchangesGetOperationPath OperationPath = "/available-exchanges"

	// /balance-sheet-statement
	BalanceSheetStatementGetOperationPath OperationPath = "/balance-sheet-statement"

	// /balance-sheet-statement-ttm
	BalanceSheetStatementTtmGetOperationPath OperationPath = "/balance-sheet-statement-ttm"

	// /batch-quote
	BatchQuoteGetOperationPath OperationPath = "/batch-quote"

	// /batch-quote-short
	BatchQuoteShortGetOperationPath OperationPath = "/batch-quote-short"

	// /cash-flow-statement
	CashFlowStatementGetOperationPath OperationPath = "/cash-flow-statement"

	// /cash-flow-statement-ttm
	CashFlowStatementTtmGetOperationPath OperationPath = "/cash-flow-statement-ttm"

	// /dividends-calendar
	GetDividendsCalendarOperationPath OperationPath = "/dividends-calendar"

	// /economic-calendar
	EconomicCalendarGetOperationPath OperationPath = "/economic-calendar"

	// /esg-disclosures
	EsgDisclosuresGetOperationPath OperationPath = "/esg-disclosures"

	// /esg-ratings
	EsgRatingsGetOperationPath OperationPath = "/esg-ratings"

	// /grades-latest-news
	GradesLatestNewsGetOperationPath OperationPath = "/grades-latest-news"

	// /historical-price-eod/full
	HistoricalPriceEodFullGetOperationPath OperationPath = "/historical-price-eod/full"

	// /historical-price-eod/light
	HistoricalPriceEodLightGetOperationPath OperationPath = "/historical-price-eod/light"

	// /income-statement
	IncomeStatementGetOperationPath OperationPath = "/income-statement"

	// /income-statement-ttm
	IncomeStatementTtmGetOperationPath OperationPath = "/income-statement-ttm"

	// /insider-trading/latest
	InsiderTradingLatestGetOperationPath OperationPath = "/insider-trading/latest"

	// /key-metrics
	KeyMetricsGetOperationPath OperationPath = "/key-metrics"

	// /market-capitalization
	MarketCapitalizationGetOperationPath OperationPath = "/market-capitalization"

	// /market-capitalization-batch
	MarketCapitalizationBatchGetOperationPath OperationPath = "/market-capitalization-batch"

	// /news/general-latest
	NewsGeneralLatestGetOperationPath OperationPath = "/news/general-latest"

	// /profile
	ProfileGetOperationPath OperationPath = "/profile"

	// /quote
	QuoteGetOperationPath OperationPath = "/quote"

	// /quote-short
	QuoteShortGetOperationPath OperationPath = "/quote-short"

	// /ratings-snapshot
	RatingsSnapshotGetOperationPath OperationPath = "/ratings-snapshot"

	// /ratios
	RatiosGetOperationPath OperationPath = "/ratios"

	// /revenue-geographic-segmentation
	RevenueGeographicSegmentationGetOperationPath OperationPath = "/revenue-geographic-segmentation"

	// /revenue-product-segmentation
	RevenueProductSegmentationGetOperationPath OperationPath = "/revenue-product-segmentation"

	// /search-name
	SearchNameGetOperationPath OperationPath = "/search-name"

	// /search-symbol
	SearchSymbolGetOperationPath OperationPath = "/search-symbol"

	// /shares-float
	SharesFloatGetOperationPath OperationPath = "/shares-float"

	// /stock-list
	StockListGetOperationPath OperationPath = "/stock-list"

	// /treasury-rates
	TreasuryRatesGetOperationPath OperationPath = "/treasury-rates"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnalystEstimatesGet request
	AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailableExchangesGet request
	AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementGet request
	BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementTtmGet request
	BalanceSheetStatementTtmGet(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteGet request
	BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteShortGet request
	BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementGet request
	CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementTtmGet request
	CashFlowStatementTtmGet(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDividendsCalendar request
	GetDividendsCalendar(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EconomicCalendarGet request
	EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgDisclosuresGet request
	EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgRatingsGet request
	EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GradesLatestNewsGet request
	GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodFullGet request
	HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodLightGet request
	HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementGet request
	IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementTtmGet request
	IncomeStatementTtmGet(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingLatestGet request
	InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsGet request
	KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationGet request
	MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationBatchGet request
	MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewsGeneralLatestGet request
	NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteGet request
	QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteShortGet request
	QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatingsSnapshotGet request
	RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosGet request
	RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueGeographicSegmentationGet request
	RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueProductSegmentationGet request
	RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchNameGet request
	SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSymbolGet request
	SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharesFloatGet request
	SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StockListGet request
	StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreasuryRatesGet request
	TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnalystEstimatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailableExchangesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementTtmGet(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementTtmGet(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDividendsCalendar(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDividendsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEconomicCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgDisclosuresGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgRatingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGradesLatestNewsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodFullGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodLightGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementTtmGet(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewsGeneralLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatingsSnapshotGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueGeographicSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueProductSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchNameGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSymbolGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharesFloatGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStockListGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreasuryRatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnalystEstimatesGetRequest generates requests for AnalystEstimatesGet
func NewAnalystEstimatesGetRequest(server string, params *AnalystEstimatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyst-estimates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAvailableExchangesGetRequest generates requests for AvailableExchangesGet
func NewAvailableExchangesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available-exchanges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementGetRequest generates requests for BalanceSheetStatementGet
func NewBalanceSheetStatementGetRequest(server string, params *BalanceSheetStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementTtmGetRequest generates requests for BalanceSheetStatementTtmGet
func NewBalanceSheetStatementTtmGetRequest(server string, params *BalanceSheetStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteGetRequest generates requests for BatchQuoteGet
func NewBatchQuoteGetRequest(server string, params *BatchQuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteShortGetRequest generates requests for BatchQuoteShortGet
func NewBatchQuoteShortGetRequest(server string, params *BatchQuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementGetRequest generates requests for CashFlowStatementGet
func NewCashFlowStatementGetRequest(server string, params *CashFlowStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementTtmGetRequest generates requests for CashFlowStatementTtmGet
func NewCashFlowStatementTtmGetRequest(server string, params *CashFlowStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDividendsCalendarRequest generates requests for GetDividendsCalendar
func NewGetDividendsCalendarRequest(server string, params *GetDividendsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEconomicCalendarGetRequest generates requests for EconomicCalendarGet
func NewEconomicCalendarGetRequest(server string, params *EconomicCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/economic-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgDisclosuresGetRequest generates requests for EsgDisclosuresGet
func NewEsgDisclosuresGetRequest(server string, params *EsgDisclosuresGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-disclosures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgRatingsGetRequest generates requests for EsgRatingsGet
func NewEsgRatingsGetRequest(server string, params *EsgRatingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGradesLatestNewsGetRequest generates requests for GradesLatestNewsGet
func NewGradesLatestNewsGetRequest(server string, params *GradesLatestNewsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades-latest-news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodFullGetRequest generates requests for HistoricalPriceEodFullGet
func NewHistoricalPriceEodFullGetRequest(server string, params *HistoricalPriceEodFullGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodLightGetRequest generates requests for HistoricalPriceEodLightGet
func NewHistoricalPriceEodLightGetRequest(server string, params *HistoricalPriceEodLightGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/light")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementGetRequest generates requests for IncomeStatementGet
func NewIncomeStatementGetRequest(server string, params *IncomeStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementTtmGetRequest generates requests for IncomeStatementTtmGet
func NewIncomeStatementTtmGetRequest(server string, params *IncomeStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingLatestGetRequest generates requests for InsiderTradingLatestGet
func NewInsiderTradingLatestGetRequest(server string, params *InsiderTradingLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsGetRequest generates requests for KeyMetricsGet
func NewKeyMetricsGetRequest(server string, params *KeyMetricsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationGetRequest generates requests for MarketCapitalizationGet
func NewMarketCapitalizationGetRequest(server string, params *MarketCapitalizationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationBatchGetRequest generates requests for MarketCapitalizationBatchGet
func NewMarketCapitalizationBatchGetRequest(server string, params *MarketCapitalizationBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization-batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNewsGeneralLatestGetRequest generates requests for NewsGeneralLatestGet
func NewNewsGeneralLatestGetRequest(server string, params *NewsGeneralLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/general-latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, params *ProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteGetRequest generates requests for QuoteGet
func NewQuoteGetRequest(server string, params *QuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteShortGetRequest generates requests for QuoteShortGet
func NewQuoteShortGetRequest(server string, params *QuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatingsSnapshotGetRequest generates requests for RatingsSnapshotGet
func NewRatingsSnapshotGetRequest(server string, params *RatingsSnapshotGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratings-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosGetRequest generates requests for RatiosGet
func NewRatiosGetRequest(server string, params *RatiosGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueGeographicSegmentationGetRequest generates requests for RevenueGeographicSegmentationGet
func NewRevenueGeographicSegmentationGetRequest(server string, params *RevenueGeographicSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-geographic-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueProductSegmentationGetRequest generates requests for RevenueProductSegmentationGet
func NewRevenueProductSegmentationGetRequest(server string, params *RevenueProductSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-product-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchNameGetRequest generates requests for SearchNameGet
func NewSearchNameGetRequest(server string, params *SearchNameGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSymbolGetRequest generates requests for SearchSymbolGet
func NewSearchSymbolGetRequest(server string, params *SearchSymbolGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharesFloatGetRequest generates requests for SharesFloatGet
func NewSharesFloatGetRequest(server string, params *SharesFloatGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares-float")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStockListGetRequest generates requests for StockListGet
func NewStockListGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreasuryRatesGetRequest generates requests for TreasuryRatesGet
func NewTreasuryRatesGetRequest(server string, params *TreasuryRatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treasury-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnalystEstimatesGetWithResponse request
	AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error)

	// AvailableExchangesGetWithResponse request
	AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error)

	// BalanceSheetStatementGetWithResponse request
	BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error)

	// BalanceSheetStatementTtmGetWithResponse request
	BalanceSheetStatementTtmGetWithResponse(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTtmGetClientResponse, error)

	// BatchQuoteGetWithResponse request
	BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error)

	// BatchQuoteShortGetWithResponse request
	BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error)

	// CashFlowStatementGetWithResponse request
	CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error)

	// CashFlowStatementTtmGetWithResponse request
	CashFlowStatementTtmGetWithResponse(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTtmGetClientResponse, error)

	// GetDividendsCalendarWithResponse request
	GetDividendsCalendarWithResponse(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*GetDividendsCalendarClientResponse, error)

	// EconomicCalendarGetWithResponse request
	EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error)

	// EsgDisclosuresGetWithResponse request
	EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error)

	// EsgRatingsGetWithResponse request
	EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error)

	// GradesLatestNewsGetWithResponse request
	GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error)

	// HistoricalPriceEodFullGetWithResponse request
	HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error)

	// HistoricalPriceEodLightGetWithResponse request
	HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error)

	// IncomeStatementGetWithResponse request
	IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error)

	// IncomeStatementTtmGetWithResponse request
	IncomeStatementTtmGetWithResponse(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTtmGetClientResponse, error)

	// InsiderTradingLatestGetWithResponse request
	InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error)

	// KeyMetricsGetWithResponse request
	KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error)

	// MarketCapitalizationGetWithResponse request
	MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error)

	// MarketCapitalizationBatchGetWithResponse request
	MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error)

	// NewsGeneralLatestGetWithResponse request
	NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error)

	// ProfileGetWithResponse request
	ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error)

	// QuoteGetWithResponse request
	QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error)

	// QuoteShortGetWithResponse request
	QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error)

	// RatingsSnapshotGetWithResponse request
	RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error)

	// RatiosGetWithResponse request
	RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error)

	// RevenueGeographicSegmentationGetWithResponse request
	RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error)

	// RevenueProductSegmentationGetWithResponse request
	RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error)

	// SearchNameGetWithResponse request
	SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error)

	// SearchSymbolGetWithResponse request
	SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error)

	// SharesFloatGetWithResponse request
	SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error)

	// StockListGetWithResponse request
	StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error)

	// TreasuryRatesGetWithResponse request
	TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error)
}

type AnalystEstimatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialEstimates
}

// Status returns HTTPResponse.Status
func (r AnalystEstimatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnalystEstimatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailableExchangesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Exchange
}

// Status returns HTTPResponse.Status
func (r AvailableExchangesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailableExchangesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatement
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatementTtm
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatement
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatementTtm
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDividendsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r GetDividendsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDividendsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EconomicCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEvent
}

// Status returns HTTPResponse.Status
func (r EconomicCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EconomicCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgDisclosuresGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgDisclosure
}

// Status returns HTTPResponse.Status
func (r EsgDisclosuresGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgDisclosuresGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgRatingsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgRating
}

// Status returns HTTPResponse.Status
func (r EsgRatingsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgRatingsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GradesLatestNewsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]News
}

// Status returns HTTPResponse.Status
func (r GradesLatestNewsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GradesLatestNewsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodFullGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodFullGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodFullGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodLightGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LightCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodLightGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodLightGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatement
}

// Status returns HTTPResponse.Status
func (r IncomeStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatementTtm
}

// Status returns HTTPResponse.Status
func (r IncomeStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetrics
}

// Status returns HTTPResponse.Status
func (r KeyMetricsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationBatchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationBatchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationBatchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewsGeneralLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsArticle
}

// Status returns HTTPResponse.Status
func (r NewsGeneralLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewsGeneralLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGetResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfileGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r QuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r QuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatingsSnapshotGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatingSnapshot
}

// Status returns HTTPResponse.Status
func (r RatingsSnapshotGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatingsSnapshotGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialRatios
}

// Status returns HTTPResponse.Status
func (r RatiosGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueGeographicSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueGeographicSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueGeographicSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueProductSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueProductSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueProductSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchNameGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchNameGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchNameGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSymbolGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchSymbolGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSymbolGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharesFloatGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySharesFloat
}

// Status returns HTTPResponse.Status
func (r SharesFloatGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharesFloatGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StockListGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySymbol
}

// Status returns HTTPResponse.Status
func (r StockListGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StockListGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreasuryRatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TreasuryRates
}

// Status returns HTTPResponse.Status
func (r TreasuryRatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreasuryRatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnalystEstimatesGetWithResponse request returning *AnalystEstimatesGetClientResponse
func (c *ClientWithResponses) AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error) {
	rsp, err := c.AnalystEstimatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnalystEstimatesGetClientResponse(rsp)
}

// AvailableExchangesGetWithResponse request returning *AvailableExchangesGetClientResponse
func (c *ClientWithResponses) AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error) {
	rsp, err := c.AvailableExchangesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailableExchangesGetClientResponse(rsp)
}

// BalanceSheetStatementGetWithResponse request returning *BalanceSheetStatementGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementGetClientResponse(rsp)
}

// BalanceSheetStatementTtmGetWithResponse request returning *BalanceSheetStatementTtmGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementTtmGetWithResponse(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTtmGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementTtmGetClientResponse(rsp)
}

// BatchQuoteGetWithResponse request returning *BatchQuoteGetClientResponse
func (c *ClientWithResponses) BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error) {
	rsp, err := c.BatchQuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteGetClientResponse(rsp)
}

// BatchQuoteShortGetWithResponse request returning *BatchQuoteShortGetClientResponse
func (c *ClientWithResponses) BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error) {
	rsp, err := c.BatchQuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteShortGetClientResponse(rsp)
}

// CashFlowStatementGetWithResponse request returning *CashFlowStatementGetClientResponse
func (c *ClientWithResponses) CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error) {
	rsp, err := c.CashFlowStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementGetClientResponse(rsp)
}

// CashFlowStatementTtmGetWithResponse request returning *CashFlowStatementTtmGetClientResponse
func (c *ClientWithResponses) CashFlowStatementTtmGetWithResponse(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTtmGetClientResponse, error) {
	rsp, err := c.CashFlowStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementTtmGetClientResponse(rsp)
}

// GetDividendsCalendarWithResponse request returning *GetDividendsCalendarClientResponse
func (c *ClientWithResponses) GetDividendsCalendarWithResponse(ctx context.Context, params *GetDividendsCalendarParams, reqEditors ...RequestEditorFn) (*GetDividendsCalendarClientResponse, error) {
	rsp, err := c.GetDividendsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDividendsCalendarClientResponse(rsp)
}

// EconomicCalendarGetWithResponse request returning *EconomicCalendarGetClientResponse
func (c *ClientWithResponses) EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error) {
	rsp, err := c.EconomicCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEconomicCalendarGetClientResponse(rsp)
}

// EsgDisclosuresGetWithResponse request returning *EsgDisclosuresGetClientResponse
func (c *ClientWithResponses) EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error) {
	rsp, err := c.EsgDisclosuresGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgDisclosuresGetClientResponse(rsp)
}

// EsgRatingsGetWithResponse request returning *EsgRatingsGetClientResponse
func (c *ClientWithResponses) EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error) {
	rsp, err := c.EsgRatingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgRatingsGetClientResponse(rsp)
}

// GradesLatestNewsGetWithResponse request returning *GradesLatestNewsGetClientResponse
func (c *ClientWithResponses) GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error) {
	rsp, err := c.GradesLatestNewsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGradesLatestNewsGetClientResponse(rsp)
}

// HistoricalPriceEodFullGetWithResponse request returning *HistoricalPriceEodFullGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodFullGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodFullGetClientResponse(rsp)
}

// HistoricalPriceEodLightGetWithResponse request returning *HistoricalPriceEodLightGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodLightGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodLightGetClientResponse(rsp)
}

// IncomeStatementGetWithResponse request returning *IncomeStatementGetClientResponse
func (c *ClientWithResponses) IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error) {
	rsp, err := c.IncomeStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementGetClientResponse(rsp)
}

// IncomeStatementTtmGetWithResponse request returning *IncomeStatementTtmGetClientResponse
func (c *ClientWithResponses) IncomeStatementTtmGetWithResponse(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTtmGetClientResponse, error) {
	rsp, err := c.IncomeStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementTtmGetClientResponse(rsp)
}

// InsiderTradingLatestGetWithResponse request returning *InsiderTradingLatestGetClientResponse
func (c *ClientWithResponses) InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error) {
	rsp, err := c.InsiderTradingLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingLatestGetClientResponse(rsp)
}

// KeyMetricsGetWithResponse request returning *KeyMetricsGetClientResponse
func (c *ClientWithResponses) KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error) {
	rsp, err := c.KeyMetricsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsGetClientResponse(rsp)
}

// MarketCapitalizationGetWithResponse request returning *MarketCapitalizationGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationGetClientResponse(rsp)
}

// MarketCapitalizationBatchGetWithResponse request returning *MarketCapitalizationBatchGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationBatchGetClientResponse(rsp)
}

// NewsGeneralLatestGetWithResponse request returning *NewsGeneralLatestGetClientResponse
func (c *ClientWithResponses) NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error) {
	rsp, err := c.NewsGeneralLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewsGeneralLatestGetClientResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetClientResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error) {
	rsp, err := c.ProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetClientResponse(rsp)
}

// QuoteGetWithResponse request returning *QuoteGetClientResponse
func (c *ClientWithResponses) QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error) {
	rsp, err := c.QuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteGetClientResponse(rsp)
}

// QuoteShortGetWithResponse request returning *QuoteShortGetClientResponse
func (c *ClientWithResponses) QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error) {
	rsp, err := c.QuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteShortGetClientResponse(rsp)
}

// RatingsSnapshotGetWithResponse request returning *RatingsSnapshotGetClientResponse
func (c *ClientWithResponses) RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error) {
	rsp, err := c.RatingsSnapshotGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatingsSnapshotGetClientResponse(rsp)
}

// RatiosGetWithResponse request returning *RatiosGetClientResponse
func (c *ClientWithResponses) RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error) {
	rsp, err := c.RatiosGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosGetClientResponse(rsp)
}

// RevenueGeographicSegmentationGetWithResponse request returning *RevenueGeographicSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueGeographicSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueGeographicSegmentationGetClientResponse(rsp)
}

// RevenueProductSegmentationGetWithResponse request returning *RevenueProductSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueProductSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueProductSegmentationGetClientResponse(rsp)
}

// SearchNameGetWithResponse request returning *SearchNameGetClientResponse
func (c *ClientWithResponses) SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error) {
	rsp, err := c.SearchNameGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchNameGetClientResponse(rsp)
}

// SearchSymbolGetWithResponse request returning *SearchSymbolGetClientResponse
func (c *ClientWithResponses) SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error) {
	rsp, err := c.SearchSymbolGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSymbolGetClientResponse(rsp)
}

// SharesFloatGetWithResponse request returning *SharesFloatGetClientResponse
func (c *ClientWithResponses) SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error) {
	rsp, err := c.SharesFloatGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharesFloatGetClientResponse(rsp)
}

// StockListGetWithResponse request returning *StockListGetClientResponse
func (c *ClientWithResponses) StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error) {
	rsp, err := c.StockListGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStockListGetClientResponse(rsp)
}

// TreasuryRatesGetWithResponse request returning *TreasuryRatesGetClientResponse
func (c *ClientWithResponses) TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error) {
	rsp, err := c.TreasuryRatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreasuryRatesGetClientResponse(rsp)
}

// ParseAnalystEstimatesGetClientResponse parses an HTTP response from a AnalystEstimatesGetWithResponse call
func ParseAnalystEstimatesGetClientResponse(rsp *http.Response) (*AnalystEstimatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnalystEstimatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialEstimates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAvailableExchangesGetClientResponse parses an HTTP response from a AvailableExchangesGetWithResponse call
func ParseAvailableExchangesGetClientResponse(rsp *http.Response) (*AvailableExchangesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailableExchangesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Exchange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementGetClientResponse parses an HTTP response from a BalanceSheetStatementGetWithResponse call
func ParseBalanceSheetStatementGetClientResponse(rsp *http.Response) (*BalanceSheetStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementTtmGetClientResponse parses an HTTP response from a BalanceSheetStatementTtmGetWithResponse call
func ParseBalanceSheetStatementTtmGetClientResponse(rsp *http.Response) (*BalanceSheetStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteGetClientResponse parses an HTTP response from a BatchQuoteGetWithResponse call
func ParseBatchQuoteGetClientResponse(rsp *http.Response) (*BatchQuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteShortGetClientResponse parses an HTTP response from a BatchQuoteShortGetWithResponse call
func ParseBatchQuoteShortGetClientResponse(rsp *http.Response) (*BatchQuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementGetClientResponse parses an HTTP response from a CashFlowStatementGetWithResponse call
func ParseCashFlowStatementGetClientResponse(rsp *http.Response) (*CashFlowStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementTtmGetClientResponse parses an HTTP response from a CashFlowStatementTtmGetWithResponse call
func ParseCashFlowStatementTtmGetClientResponse(rsp *http.Response) (*CashFlowStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDividendsCalendarClientResponse parses an HTTP response from a GetDividendsCalendarWithResponse call
func ParseGetDividendsCalendarClientResponse(rsp *http.Response) (*GetDividendsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDividendsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEconomicCalendarGetClientResponse parses an HTTP response from a EconomicCalendarGetWithResponse call
func ParseEconomicCalendarGetClientResponse(rsp *http.Response) (*EconomicCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EconomicCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgDisclosuresGetClientResponse parses an HTTP response from a EsgDisclosuresGetWithResponse call
func ParseEsgDisclosuresGetClientResponse(rsp *http.Response) (*EsgDisclosuresGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgDisclosuresGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgDisclosure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgRatingsGetClientResponse parses an HTTP response from a EsgRatingsGetWithResponse call
func ParseEsgRatingsGetClientResponse(rsp *http.Response) (*EsgRatingsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgRatingsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgRating
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGradesLatestNewsGetClientResponse parses an HTTP response from a GradesLatestNewsGetWithResponse call
func ParseGradesLatestNewsGetClientResponse(rsp *http.Response) (*GradesLatestNewsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GradesLatestNewsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []News
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodFullGetClientResponse parses an HTTP response from a HistoricalPriceEodFullGetWithResponse call
func ParseHistoricalPriceEodFullGetClientResponse(rsp *http.Response) (*HistoricalPriceEodFullGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodFullGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodLightGetClientResponse parses an HTTP response from a HistoricalPriceEodLightGetWithResponse call
func ParseHistoricalPriceEodLightGetClientResponse(rsp *http.Response) (*HistoricalPriceEodLightGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodLightGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LightCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementGetClientResponse parses an HTTP response from a IncomeStatementGetWithResponse call
func ParseIncomeStatementGetClientResponse(rsp *http.Response) (*IncomeStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementTtmGetClientResponse parses an HTTP response from a IncomeStatementTtmGetWithResponse call
func ParseIncomeStatementTtmGetClientResponse(rsp *http.Response) (*IncomeStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingLatestGetClientResponse parses an HTTP response from a InsiderTradingLatestGetWithResponse call
func ParseInsiderTradingLatestGetClientResponse(rsp *http.Response) (*InsiderTradingLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsGetClientResponse parses an HTTP response from a KeyMetricsGetWithResponse call
func ParseKeyMetricsGetClientResponse(rsp *http.Response) (*KeyMetricsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationGetClientResponse parses an HTTP response from a MarketCapitalizationGetWithResponse call
func ParseMarketCapitalizationGetClientResponse(rsp *http.Response) (*MarketCapitalizationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationBatchGetClientResponse parses an HTTP response from a MarketCapitalizationBatchGetWithResponse call
func ParseMarketCapitalizationBatchGetClientResponse(rsp *http.Response) (*MarketCapitalizationBatchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationBatchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewsGeneralLatestGetClientResponse parses an HTTP response from a NewsGeneralLatestGetWithResponse call
func ParseNewsGeneralLatestGetClientResponse(rsp *http.Response) (*NewsGeneralLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewsGeneralLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsArticle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileGetClientResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetClientResponse(rsp *http.Response) (*ProfileGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseQuoteGetClientResponse parses an HTTP response from a QuoteGetWithResponse call
func ParseQuoteGetClientResponse(rsp *http.Response) (*QuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuoteShortGetClientResponse parses an HTTP response from a QuoteShortGetWithResponse call
func ParseQuoteShortGetClientResponse(rsp *http.Response) (*QuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatingsSnapshotGetClientResponse parses an HTTP response from a RatingsSnapshotGetWithResponse call
func ParseRatingsSnapshotGetClientResponse(rsp *http.Response) (*RatingsSnapshotGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatingsSnapshotGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatingSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosGetClientResponse parses an HTTP response from a RatiosGetWithResponse call
func ParseRatiosGetClientResponse(rsp *http.Response) (*RatiosGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialRatios
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueGeographicSegmentationGetClientResponse parses an HTTP response from a RevenueGeographicSegmentationGetWithResponse call
func ParseRevenueGeographicSegmentationGetClientResponse(rsp *http.Response) (*RevenueGeographicSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueGeographicSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueProductSegmentationGetClientResponse parses an HTTP response from a RevenueProductSegmentationGetWithResponse call
func ParseRevenueProductSegmentationGetClientResponse(rsp *http.Response) (*RevenueProductSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueProductSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchNameGetClientResponse parses an HTTP response from a SearchNameGetWithResponse call
func ParseSearchNameGetClientResponse(rsp *http.Response) (*SearchNameGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchNameGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSymbolGetClientResponse parses an HTTP response from a SearchSymbolGetWithResponse call
func ParseSearchSymbolGetClientResponse(rsp *http.Response) (*SearchSymbolGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSymbolGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharesFloatGetClientResponse parses an HTTP response from a SharesFloatGetWithResponse call
func ParseSharesFloatGetClientResponse(rsp *http.Response) (*SharesFloatGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharesFloatGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySharesFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStockListGetClientResponse parses an HTTP response from a StockListGetWithResponse call
func ParseStockListGetClientResponse(rsp *http.Response) (*StockListGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StockListGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreasuryRatesGetClientResponse parses an HTTP response from a TreasuryRatesGetWithResponse call
func ParseTreasuryRatesGetClientResponse(rsp *http.Response) (*TreasuryRatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreasuryRatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TreasuryRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BQAA///3vErNZTkBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
