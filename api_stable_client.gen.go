// Package financialmodelingprep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 6efb8729c49d05fcc2d90d9553b4bccb0e2e9055 DO NOT EDIT.
package financialmodelingprep

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for Period.
const (
	Annual  Period = "annual"
	FY      Period = "FY"
	Q1      Period = "Q1"
	Q2      Period = "Q2"
	Q3      Period = "Q3"
	Q4      Period = "Q4"
	Quarter Period = "quarter"
)

// BalanceSheetStatement defines model for BalanceSheetStatement.
type BalanceSheetStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float64            `json:"accountPayables"`
	AccountsReceivables                     float64            `json:"accountsReceivables"`
	AccruedExpenses                         float64            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float64            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float64            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float64            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float64            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float64            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float64            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float64            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float64            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float64            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float64            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float64            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float64            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float64            `json:"intangibleAssets"`
	Inventory                               float64            `json:"inventory"`
	LongTermDebt                            float64            `json:"longTermDebt"`
	LongTermInvestments                     float64            `json:"longTermInvestments"`
	MinorityInterest                        float64            `json:"minorityInterest"`
	NetDebt                                 float64            `json:"netDebt"`
	NetReceivables                          float64            `json:"netReceivables"`
	OtherAssets                             float64            `json:"otherAssets"`
	OtherCurrentAssets                      float64            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float64            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float64            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float64            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float64            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float64            `json:"otherPayables"`
	OtherReceivables                        float64            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float64            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float64            `json:"preferredStock"`
	Prepaids                                float64            `json:"prepaids"`
	PropertyPlantEquipmentNet               float64            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float64            `json:"retainedEarnings"`
	ShortTermDebt                           float64            `json:"shortTermDebt"`
	ShortTermInvestments                    float64            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float64            `json:"taxAssets"`
	TaxPayables                             float64            `json:"taxPayables"`
	TotalAssets                             float64            `json:"totalAssets"`
	TotalCurrentAssets                      float64            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float64            `json:"totalCurrentLiabilities"`
	TotalDebt                               float64            `json:"totalDebt"`
	TotalEquity                             float64            `json:"totalEquity"`
	TotalInvestments                        float64            `json:"totalInvestments"`
	TotalLiabilities                        float64            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float64            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float64            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float64            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float64            `json:"totalPayables"`
	TotalStockholdersEquity                 float64            `json:"totalStockholdersEquity"`
	TreasuryStock                           float64            `json:"treasuryStock"`
}

// BalanceSheetStatementTtm defines model for BalanceSheetStatementTtm.
type BalanceSheetStatementTtm struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float32            `json:"accountPayables"`
	AccountsReceivables                     float32            `json:"accountsReceivables"`
	AccruedExpenses                         float32            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float32            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float32            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float32            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float32            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float32            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float32            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float32            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float32            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float32            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float32            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float32            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float32            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float32            `json:"intangibleAssets"`
	Inventory                               float32            `json:"inventory"`
	LongTermDebt                            float32            `json:"longTermDebt"`
	LongTermInvestments                     float32            `json:"longTermInvestments"`
	MinorityInterest                        float32            `json:"minorityInterest"`
	NetDebt                                 float32            `json:"netDebt"`
	NetReceivables                          float32            `json:"netReceivables"`
	OtherAssets                             float32            `json:"otherAssets"`
	OtherCurrentAssets                      float32            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float32            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float32            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float32            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float32            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float32            `json:"otherPayables"`
	OtherReceivables                        float32            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float32            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float32            `json:"preferredStock"`
	Prepaids                                float32            `json:"prepaids"`
	PropertyPlantEquipmentNet               float32            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float32            `json:"retainedEarnings"`
	ShortTermDebt                           float32            `json:"shortTermDebt"`
	ShortTermInvestments                    float32            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float32            `json:"taxAssets"`
	TaxPayables                             float32            `json:"taxPayables"`
	TotalAssets                             float32            `json:"totalAssets"`
	TotalCurrentAssets                      float32            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float32            `json:"totalCurrentLiabilities"`
	TotalDebt                               float32            `json:"totalDebt"`
	TotalEquity                             float32            `json:"totalEquity"`
	TotalInvestments                        float32            `json:"totalInvestments"`
	TotalLiabilities                        float32            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float32            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float32            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float32            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float32            `json:"totalPayables"`
	TotalStockholdersEquity                 float32            `json:"totalStockholdersEquity"`
	TreasuryStock                           float32            `json:"treasuryStock"`
}

// CashFlowStatement defines model for CashFlowStatement.
type CashFlowStatement struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CashFlowStatementTtm defines model for CashFlowStatementTtm.
type CashFlowStatementTtm struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CompanyCapitalization defines model for CompanyCapitalization.
type CompanyCapitalization struct {
	Date      openapi_types.Date `json:"date"`
	MarketCap float64            `json:"marketCap"`
	Symbol    string             `json:"symbol"`
}

// CompanyProfile defines model for CompanyProfile.
type CompanyProfile struct {
	Address           string  `json:"address"`
	AverageVolume     float64 `json:"averageVolume"`
	Beta              float64 `json:"beta"`
	Ceo               string  `json:"ceo"`
	Change            float64 `json:"change"`
	ChangePercentage  float64 `json:"changePercentage"`
	Cik               string  `json:"cik"`
	City              string  `json:"city"`
	CompanyName       string  `json:"companyName"`
	Country           string  `json:"country"`
	Currency          string  `json:"currency"`
	Cusip             string  `json:"cusip"`
	DefaultImage      bool    `json:"defaultImage"`
	Description       string  `json:"description"`
	Exchange          string  `json:"exchange"`
	ExchangeFullName  string  `json:"exchangeFullName"`
	FullTimeEmployees string  `json:"fullTimeEmployees"`
	Image             string  `json:"image"`
	Industry          string  `json:"industry"`
	IpoDate           string  `json:"ipoDate"`
	IsActivelyTrading bool    `json:"isActivelyTrading"`
	IsAdr             bool    `json:"isAdr"`
	IsEtf             bool    `json:"isEtf"`
	IsFund            bool    `json:"isFund"`
	Isin              string  `json:"isin"`
	LastDividend      float64 `json:"lastDividend"`
	MarketCap         float64 `json:"marketCap"`
	Phone             string  `json:"phone"`
	Price             float64 `json:"price"`
	Range             string  `json:"range"`
	Sector            string  `json:"sector"`
	State             string  `json:"state"`
	Symbol            string  `json:"symbol"`
	Volume            int     `json:"volume"`
	Website           string  `json:"website"`
	Zip               string  `json:"zip"`
}

// CompanySharesFloat defines model for CompanySharesFloat.
type CompanySharesFloat struct {
	Date              string  `json:"date"`
	FloatShares       int     `json:"floatShares"`
	FreeFloat         float64 `json:"freeFloat"`
	OutstandingShares int     `json:"outstandingShares"`
	Symbol            string  `json:"symbol"`
}

// CompanySymbol defines model for CompanySymbol.
type CompanySymbol struct {
	CompanyName string `json:"companyName"`
	Symbol      string `json:"symbol"`
}

// DividendEvent defines model for DividendEvent.
type DividendEvent struct {
	AdjDividend     float64            `json:"adjDividend"`
	Date            openapi_types.Date `json:"date"`
	DeclarationDate string             `json:"declarationDate"`
	Dividend        float64            `json:"dividend"`
	Frequency       string             `json:"frequency"`
	PaymentDate     string             `json:"paymentDate"`
	RecordDate      string             `json:"recordDate"`
	Symbol          string             `json:"symbol"`
	Yield           float64            `json:"yield"`
}

// EarningEvent defines model for EarningEvent.
type EarningEvent struct {
	Date             openapi_types.Date `json:"date"`
	EpsActual        float64            `json:"epsActual"`
	EpsEstimated     float64            `json:"epsEstimated"`
	LastUpdated      openapi_types.Date `json:"lastUpdated"`
	RevenueActual    int                `json:"revenueActual"`
	RevenueEstimated int                `json:"revenueEstimated"`
	Symbol           string             `json:"symbol"`
}

// EconomicEsgDisclosure defines model for EconomicEsgDisclosure.
type EconomicEsgDisclosure struct {
	ESGScore           float64            `json:"ESGScore"`
	AcceptedDate       openapi_types.Date `json:"acceptedDate"`
	Cik                string             `json:"cik"`
	CompanyName        string             `json:"companyName"`
	Date               openapi_types.Date `json:"date"`
	EnvironmentalScore float64            `json:"environmentalScore"`
	FormType           string             `json:"formType"`
	GovernanceScore    float64            `json:"governanceScore"`
	SocialScore        float64            `json:"socialScore"`
	Symbol             string             `json:"symbol"`
	Url                string             `json:"url"`
}

// EconomicEsgRating defines model for EconomicEsgRating.
type EconomicEsgRating struct {
	ESGRiskRating string `json:"ESGRiskRating"`
	Cik           string `json:"cik"`
	CompanyName   string `json:"companyName"`
	FiscalYear    int    `json:"fiscalYear"`
	Industry      string `json:"industry"`
	IndustryRank  string `json:"industryRank"`
	Symbol        string `json:"symbol"`
}

// EconomicEvent defines model for EconomicEvent.
type EconomicEvent struct {
	Actual           float64  `json:"actual"`
	Change           float64  `json:"change"`
	ChangePercentage float64  `json:"changePercentage"`
	Country          string   `json:"country"`
	Currency         string   `json:"currency"`
	Date             string   `json:"date"`
	Estimate         *float64 `json:"estimate"`
	Event            string   `json:"event"`
	Impact           string   `json:"impact"`
	Previous         float64  `json:"previous"`
}

// EnterpriseValue defines model for EnterpriseValue.
type EnterpriseValue struct {
	AddTotalDebt                float64            `json:"addTotalDebt"`
	Date                        openapi_types.Date `json:"date"`
	EnterpriseValue             float64            `json:"enterpriseValue"`
	MarketCapitalization        float64            `json:"marketCapitalization"`
	MinusCashAndCashEquivalents float64            `json:"minusCashAndCashEquivalents"`
	NumberOfShares              int                `json:"numberOfShares"`
	StockPrice                  float64            `json:"stockPrice"`
	Symbol                      string             `json:"symbol"`
}

// Exchange defines model for Exchange.
type Exchange struct {
	CountryCode  string `json:"countryCode"`
	CountryName  string `json:"countryName"`
	Delay        string `json:"delay"`
	Exchange     string `json:"exchange"`
	Name         string `json:"name"`
	SymbolSuffix string `json:"symbolSuffix"`
}

// FinancialEstimates defines model for FinancialEstimates.
type FinancialEstimates struct {
	Date               openapi_types.Date `json:"date"`
	EbitAvg            float64            `json:"ebitAvg"`
	EbitHigh           float32            `json:"ebitHigh"`
	EbitLow            float64            `json:"ebitLow"`
	EbitdaAvg          float64            `json:"ebitdaAvg"`
	EbitdaHigh         float64            `json:"ebitdaHigh"`
	EbitdaLow          float32            `json:"ebitdaLow"`
	EpsAvg             float64            `json:"epsAvg"`
	EpsHigh            float64            `json:"epsHigh"`
	EpsLow             float64            `json:"epsLow"`
	NetIncomeAvg       float64            `json:"netIncomeAvg"`
	NetIncomeHigh      float32            `json:"netIncomeHigh"`
	NetIncomeLow       float64            `json:"netIncomeLow"`
	NumAnalystsEps     int                `json:"numAnalystsEps"`
	NumAnalystsRevenue int                `json:"numAnalystsRevenue"`
	RevenueAvg         float64            `json:"revenueAvg"`
	RevenueHigh        float64            `json:"revenueHigh"`
	RevenueLow         float64            `json:"revenueLow"`
	SgaExpenseAvg      float64            `json:"sgaExpenseAvg"`
	SgaExpenseHigh     float64            `json:"sgaExpenseHigh"`
	SgaExpenseLow      float64            `json:"sgaExpenseLow"`
	Symbol             string             `json:"symbol"`
}

// FinancialRatios defines model for FinancialRatios.
type FinancialRatios struct {
	AssetTurnover                           float64            `json:"assetTurnover"`
	BookValuePerShare                       float64            `json:"bookValuePerShare"`
	BottomLineProfitMargin                  float64            `json:"bottomLineProfitMargin"`
	CapexPerShare                           float64            `json:"capexPerShare"`
	CapitalExpenditureCoverageRatio         float64            `json:"capitalExpenditureCoverageRatio"`
	CashPerShare                            float64            `json:"cashPerShare"`
	CashRatio                               float64            `json:"cashRatio"`
	ContinuousOperationsProfitMargin        float64            `json:"continuousOperationsProfitMargin"`
	CurrentRatio                            float64            `json:"currentRatio"`
	Date                                    openapi_types.Date `json:"date"`
	DebtServiceCoverageRatio                float64            `json:"debtServiceCoverageRatio"`
	DebtToAssetsRatio                       float64            `json:"debtToAssetsRatio"`
	DebtToCapitalRatio                      float64            `json:"debtToCapitalRatio"`
	DebtToEquityRatio                       float64            `json:"debtToEquityRatio"`
	DebtToMarketCap                         float64            `json:"debtToMarketCap"`
	DividendPaidAndCapexCoverageRatio       float64            `json:"dividendPaidAndCapexCoverageRatio"`
	DividendPayoutRatio                     float64            `json:"dividendPayoutRatio"`
	DividendYield                           float64            `json:"dividendYield"`
	DividendYieldPercentage                 float64            `json:"dividendYieldPercentage"`
	EbitMargin                              float64            `json:"ebitMargin"`
	EbitdaMargin                            float64            `json:"ebitdaMargin"`
	EbtPerEbit                              float64            `json:"ebtPerEbit"`
	EffectiveTaxRate                        float64            `json:"effectiveTaxRate"`
	EnterpriseValueMultiple                 float64            `json:"enterpriseValueMultiple"`
	FinancialLeverageRatio                  float64            `json:"financialLeverageRatio"`
	FiscalYear                              string             `json:"fiscalYear"`
	FixedAssetTurnover                      float64            `json:"fixedAssetTurnover"`
	ForwardPriceToEarningsGrowthRatio       float64            `json:"forwardPriceToEarningsGrowthRatio"`
	FreeCashFlowOperatingCashFlowRatio      float64            `json:"freeCashFlowOperatingCashFlowRatio"`
	FreeCashFlowPerShare                    float64            `json:"freeCashFlowPerShare"`
	GrossProfitMargin                       float64            `json:"grossProfitMargin"`
	InterestCoverageRatio                   float64            `json:"interestCoverageRatio"`
	InterestDebtPerShare                    float64            `json:"interestDebtPerShare"`
	InventoryTurnover                       float64            `json:"inventoryTurnover"`
	LongTermDebtToCapitalRatio              float64            `json:"longTermDebtToCapitalRatio"`
	NetIncomePerEBT                         float64            `json:"netIncomePerEBT"`
	NetIncomePerShare                       float64            `json:"netIncomePerShare"`
	NetProfitMargin                         float64            `json:"netProfitMargin"`
	OperatingCashFlowCoverageRatio          float64            `json:"operatingCashFlowCoverageRatio"`
	OperatingCashFlowPerShare               float64            `json:"operatingCashFlowPerShare"`
	OperatingCashFlowRatio                  float64            `json:"operatingCashFlowRatio"`
	OperatingCashFlowSalesRatio             float64            `json:"operatingCashFlowSalesRatio"`
	OperatingProfitMargin                   float64            `json:"operatingProfitMargin"`
	PayablesTurnover                        float64            `json:"payablesTurnover"`
	Period                                  string             `json:"period"`
	PretaxProfitMargin                      float64            `json:"pretaxProfitMargin"`
	PriceToBookRatio                        float64            `json:"priceToBookRatio"`
	PriceToEarningsGrowthRatio              float64            `json:"priceToEarningsGrowthRatio"`
	PriceToEarningsRatio                    float64            `json:"priceToEarningsRatio"`
	PriceToFairValue                        float64            `json:"priceToFairValue"`
	PriceToFreeCashFlowRatio                float64            `json:"priceToFreeCashFlowRatio"`
	PriceToOperatingCashFlowRatio           float64            `json:"priceToOperatingCashFlowRatio"`
	PriceToSalesRatio                       float64            `json:"priceToSalesRatio"`
	QuickRatio                              float64            `json:"quickRatio"`
	ReceivablesTurnover                     float64            `json:"receivablesTurnover"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RevenuePerShare                         float64            `json:"revenuePerShare"`
	ShareholdersEquityPerShare              float64            `json:"shareholdersEquityPerShare"`
	ShortTermOperatingCashFlowCoverageRatio float64            `json:"shortTermOperatingCashFlowCoverageRatio"`
	SolvencyRatio                           float64            `json:"solvencyRatio"`
	Symbol                                  string             `json:"symbol"`
	TangibleBookValuePerShare               float64            `json:"tangibleBookValuePerShare"`
	WorkingCapitalTurnoverRatio             float64            `json:"workingCapitalTurnoverRatio"`
}

// FullCandle defines model for FullCandle.
type FullCandle struct {
	Change        float64            `json:"change"`
	ChangePercent float64            `json:"changePercent"`
	Close         float64            `json:"close"`
	Date          openapi_types.Date `json:"date"`
	High          float64            `json:"high"`
	Low           float64            `json:"low"`
	Open          float64            `json:"open"`
	Symbol        string             `json:"symbol"`
	Volume        int                `json:"volume"`
	Vwap          float64            `json:"vwap"`
}

// FullQuote defines model for FullQuote.
type FullQuote struct {
	Change           float64 `json:"change"`
	ChangePercentage float64 `json:"changePercentage"`
	DayHigh          float64 `json:"dayHigh"`
	DayLow           float64 `json:"dayLow"`
	Exchange         string  `json:"exchange"`
	MarketCap        float64 `json:"marketCap"`
	Name             string  `json:"name"`
	Open             float64 `json:"open"`
	PreviousClose    float64 `json:"previousClose"`
	Price            float64 `json:"price"`
	PriceAvg200      float64 `json:"priceAvg200"`
	PriceAvg50       float64 `json:"priceAvg50"`
	Symbol           string  `json:"symbol"`
	Timestamp        int     `json:"timestamp"`
	Volume           int     `json:"volume"`
	YearHigh         float64 `json:"yearHigh"`
	YearLow          float64 `json:"yearLow"`
}

// GradeNews defines model for GradeNews.
type GradeNews struct {
	Action          string    `json:"action"`
	GradingCompany  string    `json:"gradingCompany"`
	NewGrade        string    `json:"newGrade"`
	NewsBaseURL     string    `json:"newsBaseURL"`
	NewsPublisher   string    `json:"newsPublisher"`
	NewsTitle       string    `json:"newsTitle"`
	NewsURL         string    `json:"newsURL"`
	PreviousGrade   string    `json:"previousGrade"`
	PriceWhenPosted float32   `json:"priceWhenPosted"`
	PublishedDate   time.Time `json:"publishedDate"`
	Symbol          string    `json:"symbol"`
}

// IncomeStatement defines model for IncomeStatement.
type IncomeStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// IncomeStatementTtm defines model for IncomeStatementTtm.
type IncomeStatementTtm struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// InsiderTransaction defines model for InsiderTransaction.
type InsiderTransaction struct {
	AcquisitionOrDisposition string             `json:"acquisitionOrDisposition"`
	CompanyCik               string             `json:"companyCik"`
	DirectOrIndirect         string             `json:"directOrIndirect"`
	FilingDate               openapi_types.Date `json:"filingDate"`
	FormType                 string             `json:"formType"`
	Price                    float32            `json:"price"`
	ReportingCik             string             `json:"reportingCik"`
	ReportingName            string             `json:"reportingName"`
	SecuritiesOwned          int                `json:"securitiesOwned"`
	SecuritiesTransacted     int                `json:"securitiesTransacted"`
	SecurityName             string             `json:"securityName"`
	Symbol                   string             `json:"symbol"`
	TransactionDate          openapi_types.Date `json:"transactionDate"`
	TransactionType          string             `json:"transactionType"`
	TypeOfOwner              string             `json:"typeOfOwner"`
	Url                      string             `json:"url"`
}

// KeyMetrics defines model for KeyMetrics.
type KeyMetrics struct {
	AverageInventory                       float64            `json:"averageInventory"`
	AveragePayables                        float64            `json:"averagePayables"`
	AverageReceivables                     float64            `json:"averageReceivables"`
	CapexToDepreciation                    float64            `json:"capexToDepreciation"`
	CapexToOperatingCashFlow               float64            `json:"capexToOperatingCashFlow"`
	CapexToRevenue                         float64            `json:"capexToRevenue"`
	CashConversionCycle                    float64            `json:"cashConversionCycle"`
	CurrentRatio                           float64            `json:"currentRatio"`
	Date                                   openapi_types.Date `json:"date"`
	DaysOfInventoryOutstanding             float64            `json:"daysOfInventoryOutstanding"`
	DaysOfPayablesOutstanding              float64            `json:"daysOfPayablesOutstanding"`
	DaysOfSalesOutstanding                 float64            `json:"daysOfSalesOutstanding"`
	EarningsYield                          float64            `json:"earningsYield"`
	EnterpriseValue                        float64            `json:"enterpriseValue"`
	EvToEBITDA                             float64            `json:"evToEBITDA"`
	EvToFreeCashFlow                       float64            `json:"evToFreeCashFlow"`
	EvToOperatingCashFlow                  float64            `json:"evToOperatingCashFlow"`
	EvToSales                              float64            `json:"evToSales"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlowToEquity                   float64            `json:"freeCashFlowToEquity"`
	FreeCashFlowToFirm                     float64            `json:"freeCashFlowToFirm"`
	FreeCashFlowYield                      float64            `json:"freeCashFlowYield"`
	GrahamNetNet                           float64            `json:"grahamNetNet"`
	GrahamNumber                           float64            `json:"grahamNumber"`
	IncomeQuality                          float64            `json:"incomeQuality"`
	IntangiblesToTotalAssets               float64            `json:"intangiblesToTotalAssets"`
	InterestBurden                         float64            `json:"interestBurden"`
	InvestedCapital                        float64            `json:"investedCapital"`
	MarketCap                              float64            `json:"marketCap"`
	NetCurrentAssetValue                   float64            `json:"netCurrentAssetValue"`
	NetDebtToEBITDA                        float64            `json:"netDebtToEBITDA"`
	OperatingCycle                         float64            `json:"operatingCycle"`
	OperatingReturnOnAssets                float64            `json:"operatingReturnOnAssets"`
	Period                                 string             `json:"period"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	ResearchAndDevelopementToRevenue       float64            `json:"researchAndDevelopementToRevenue"`
	ReturnOnAssets                         float64            `json:"returnOnAssets"`
	ReturnOnCapitalEmployed                float64            `json:"returnOnCapitalEmployed"`
	ReturnOnEquity                         float64            `json:"returnOnEquity"`
	ReturnOnInvestedCapital                float64            `json:"returnOnInvestedCapital"`
	ReturnOnTangibleAssets                 float64            `json:"returnOnTangibleAssets"`
	SalesGeneralAndAdministrativeToRevenue float64            `json:"salesGeneralAndAdministrativeToRevenue"`
	StockBasedCompensationToRevenue        float64            `json:"stockBasedCompensationToRevenue"`
	Symbol                                 string             `json:"symbol"`
	TangibleAssetValue                     float64            `json:"tangibleAssetValue"`
	TaxBurden                              float64            `json:"taxBurden"`
	WorkingCapital                         float64            `json:"workingCapital"`
}

// LightCandle defines model for LightCandle.
type LightCandle struct {
	Date   openapi_types.Date `json:"date"`
	Price  float32            `json:"price"`
	Symbol string             `json:"symbol"`
	Volume int                `json:"volume"`
}

// NewsArticle defines model for NewsArticle.
type NewsArticle struct {
	Image         string    `json:"image"`
	PublishedDate time.Time `json:"publishedDate"`
	Publisher     string    `json:"publisher"`
	Site          string    `json:"site"`
	Symbol        string    `json:"symbol"`
	Text          string    `json:"text"`
	Title         string    `json:"title"`
	Url           string    `json:"url"`
}

// Period Reporting period
type Period string

// RatingSnapshot defines model for RatingSnapshot.
type RatingSnapshot struct {
	DebtToEquityScore       int    `json:"debtToEquityScore"`
	DiscountedCashFlowScore int    `json:"discountedCashFlowScore"`
	OverallScore            int    `json:"overallScore"`
	PriceToBookScore        int    `json:"priceToBookScore"`
	PriceToEarningsScore    int    `json:"priceToEarningsScore"`
	Rating                  string `json:"rating"`
	ReturnOnAssetsScore     int    `json:"returnOnAssetsScore"`
	ReturnOnEquityScore     int    `json:"returnOnEquityScore"`
	Symbol                  string `json:"symbol"`
}

// RevenueSegmentation defines model for RevenueSegmentation.
type RevenueSegmentation struct {
	Data             map[string]float32 `json:"data"`
	Date             openapi_types.Date `json:"date"`
	FiscalYear       int                `json:"fiscalYear"`
	Period           string             `json:"period"`
	ReportedCurrency *string            `json:"reportedCurrency"`
	Symbol           string             `json:"symbol"`
}

// SearchSymbol defines model for SearchSymbol.
type SearchSymbol struct {
	Currency         string `json:"currency"`
	Exchange         string `json:"exchange"`
	ExchangeFullName string `json:"exchangeFullName"`
	Name             string `json:"name"`
	Symbol           string `json:"symbol"`
}

// ShortQuote defines model for ShortQuote.
type ShortQuote struct {
	Change float64 `json:"change"`
	Price  float64 `json:"price"`
	Symbol string  `json:"symbol"`
	Volume int     `json:"volume"`
}

// SplitEvent defines model for SplitEvent.
type SplitEvent struct {
	Date        openapi_types.Date `json:"date"`
	Denominator int                `json:"denominator"`
	Numerator   int                `json:"numerator"`
	Symbol      string             `json:"symbol"`
}

// TreasuryRates defines model for TreasuryRates.
type TreasuryRates struct {
	Date   openapi_types.Date `json:"date"`
	Month1 float64            `json:"month1"`
	Month2 float64            `json:"month2"`
	Month3 float64            `json:"month3"`
	Month6 float64            `json:"month6"`
	Year1  float64            `json:"year1"`
	Year10 float64            `json:"year10"`
	Year2  float64            `json:"year2"`
	Year20 float64            `json:"year20"`
	Year3  float64            `json:"year3"`
	Year30 float64            `json:"year30"`
	Year5  float64            `json:"year5"`
	Year7  float64            `json:"year7"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse map[string]interface{}

// ProfileGetResponse defines model for ProfileGetResponse.
type ProfileGetResponse = []CompanyProfile

// AnalystEstimatesGetParams defines parameters for AnalystEstimatesGet.
type AnalystEstimatesGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Period string `form:"period" json:"period"`
	Page   *int   `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BalanceSheetStatementGetParams defines parameters for BalanceSheetStatementGet.
type BalanceSheetStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// BalanceSheetStatementTtmGetParams defines parameters for BalanceSheetStatementTtmGet.
type BalanceSheetStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BatchQuoteGetParams defines parameters for BatchQuoteGet.
type BatchQuoteGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// BatchQuoteShortGetParams defines parameters for BatchQuoteShortGet.
type BatchQuoteShortGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// CashFlowStatementGetParams defines parameters for CashFlowStatementGet.
type CashFlowStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// CashFlowStatementTtmGetParams defines parameters for CashFlowStatementTtmGet.
type CashFlowStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// DividendsGetParams defines parameters for DividendsGet.
type DividendsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// DividendsCalendarGetParams defines parameters for DividendsCalendarGet.
type DividendsCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EarningsGetParams defines parameters for EarningsGet.
type EarningsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEarningsCalendarParams defines parameters for GetEarningsCalendar.
type GetEarningsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EconomicCalendarGetParams defines parameters for EconomicCalendarGet.
type EconomicCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EnterpriseValueGetParams defines parameters for EnterpriseValueGet.
type EnterpriseValueGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgDisclosuresGetParams defines parameters for EsgDisclosuresGet.
type EsgDisclosuresGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgRatingsGetParams defines parameters for EsgRatingsGet.
type EsgRatingsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GradesLatestNewsGetParams defines parameters for GradesLatestNewsGet.
type GradesLatestNewsGetParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// HistoricalPriceEodFullGetParams defines parameters for HistoricalPriceEodFullGet.
type HistoricalPriceEodFullGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// HistoricalPriceEodLightGetParams defines parameters for HistoricalPriceEodLightGet.
type HistoricalPriceEodLightGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// IncomeStatementGetParams defines parameters for IncomeStatementGet.
type IncomeStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// IncomeStatementTtmGetParams defines parameters for IncomeStatementTtmGet.
type IncomeStatementTtmGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingLatestGetParams defines parameters for InsiderTradingLatestGet.
type InsiderTradingLatestGetParams struct {
	Date  *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// KeyMetricsGetParams defines parameters for KeyMetricsGet.
type KeyMetricsGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// MarketCapitalizationGetParams defines parameters for MarketCapitalizationGet.
type MarketCapitalizationGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationBatchGetParams defines parameters for MarketCapitalizationBatchGet.
type MarketCapitalizationBatchGetParams struct {
	// Symbols Array of symbols to fetch market capitalization data for
	Symbols string `form:"symbols" json:"symbols"`
}

// NewsGeneralLatestGetParams defines parameters for NewsGeneralLatestGet.
type NewsGeneralLatestGetParams struct {
	From  *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To    *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProfileGetParams defines parameters for ProfileGet.
type ProfileGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteGetParams defines parameters for QuoteGet.
type QuoteGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteShortGetParams defines parameters for QuoteShortGet.
type QuoteShortGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RatingsSnapshotGetParams defines parameters for RatingsSnapshotGet.
type RatingsSnapshotGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// RatiosGetParams defines parameters for RatiosGet.
type RatiosGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// RevenueGeographicSegmentationGetParams defines parameters for RevenueGeographicSegmentationGet.
type RevenueGeographicSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// RevenueProductSegmentationGetParams defines parameters for RevenueProductSegmentationGet.
type RevenueProductSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// SearchNameGetParams defines parameters for SearchNameGet.
type SearchNameGetParams struct {
	SearchSymbol string  `form:"search-symbol" json:"search-symbol"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange     *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SearchSymbolGetParams defines parameters for SearchSymbolGet.
type SearchSymbolGetParams struct {
	Query    string  `form:"query" json:"query"`
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SharesFloatGetParams defines parameters for SharesFloatGet.
type SharesFloatGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GetSplitsParams defines parameters for GetSplits.
type GetSplitsParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSplitsCalendarParams defines parameters for GetSplitsCalendar.
type GetSplitsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// TreasuryRatesGetParams defines parameters for TreasuryRatesGet.
type TreasuryRatesGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

type OperationPath string

const (

	// /analyst-estimates
	AnalystEstimatesGetOperationPath OperationPath = "/analyst-estimates"

	// /available-exchanges
	AvailableExchangesGetOperationPath OperationPath = "/available-exchanges"

	// /balance-sheet-statement
	BalanceSheetStatementGetOperationPath OperationPath = "/balance-sheet-statement"

	// /balance-sheet-statement-ttm
	BalanceSheetStatementTtmGetOperationPath OperationPath = "/balance-sheet-statement-ttm"

	// /batch-quote
	BatchQuoteGetOperationPath OperationPath = "/batch-quote"

	// /batch-quote-short
	BatchQuoteShortGetOperationPath OperationPath = "/batch-quote-short"

	// /cash-flow-statement
	CashFlowStatementGetOperationPath OperationPath = "/cash-flow-statement"

	// /cash-flow-statement-ttm
	CashFlowStatementTtmGetOperationPath OperationPath = "/cash-flow-statement-ttm"

	// /dividends
	DividendsGetOperationPath OperationPath = "/dividends"

	// /dividends-calendar
	DividendsCalendarGetOperationPath OperationPath = "/dividends-calendar"

	// /earnings
	EarningsGetOperationPath OperationPath = "/earnings"

	// /earnings-calendar
	GetEarningsCalendarOperationPath OperationPath = "/earnings-calendar"

	// /economic-calendar
	EconomicCalendarGetOperationPath OperationPath = "/economic-calendar"

	// /enterprise-values
	EnterpriseValueGetOperationPath OperationPath = "/enterprise-values"

	// /esg-disclosures
	EsgDisclosuresGetOperationPath OperationPath = "/esg-disclosures"

	// /esg-ratings
	EsgRatingsGetOperationPath OperationPath = "/esg-ratings"

	// /grades-latest-news
	GradesLatestNewsGetOperationPath OperationPath = "/grades-latest-news"

	// /historical-price-eod/full
	HistoricalPriceEodFullGetOperationPath OperationPath = "/historical-price-eod/full"

	// /historical-price-eod/light
	HistoricalPriceEodLightGetOperationPath OperationPath = "/historical-price-eod/light"

	// /income-statement
	IncomeStatementGetOperationPath OperationPath = "/income-statement"

	// /income-statement-ttm
	IncomeStatementTtmGetOperationPath OperationPath = "/income-statement-ttm"

	// /insider-trading/latest
	InsiderTradingLatestGetOperationPath OperationPath = "/insider-trading/latest"

	// /key-metrics
	KeyMetricsGetOperationPath OperationPath = "/key-metrics"

	// /market-capitalization
	MarketCapitalizationGetOperationPath OperationPath = "/market-capitalization"

	// /market-capitalization-batch
	MarketCapitalizationBatchGetOperationPath OperationPath = "/market-capitalization-batch"

	// /news/general-latest
	NewsGeneralLatestGetOperationPath OperationPath = "/news/general-latest"

	// /profile
	ProfileGetOperationPath OperationPath = "/profile"

	// /quote
	QuoteGetOperationPath OperationPath = "/quote"

	// /quote-short
	QuoteShortGetOperationPath OperationPath = "/quote-short"

	// /ratings-snapshot
	RatingsSnapshotGetOperationPath OperationPath = "/ratings-snapshot"

	// /ratios
	RatiosGetOperationPath OperationPath = "/ratios"

	// /revenue-geographic-segmentation
	RevenueGeographicSegmentationGetOperationPath OperationPath = "/revenue-geographic-segmentation"

	// /revenue-product-segmentation
	RevenueProductSegmentationGetOperationPath OperationPath = "/revenue-product-segmentation"

	// /search-name
	SearchNameGetOperationPath OperationPath = "/search-name"

	// /search-symbol
	SearchSymbolGetOperationPath OperationPath = "/search-symbol"

	// /shares-float
	SharesFloatGetOperationPath OperationPath = "/shares-float"

	// /splits
	GetSplitsOperationPath OperationPath = "/splits"

	// /splits-calendar
	GetSplitsCalendarOperationPath OperationPath = "/splits-calendar"

	// /stock-list
	StockListGetOperationPath OperationPath = "/stock-list"

	// /treasury-rates
	TreasuryRatesGetOperationPath OperationPath = "/treasury-rates"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnalystEstimatesGet request
	AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailableExchangesGet request
	AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementGet request
	BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementTtmGet request
	BalanceSheetStatementTtmGet(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteGet request
	BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteShortGet request
	BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementGet request
	CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementTtmGet request
	CashFlowStatementTtmGet(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DividendsGet request
	DividendsGet(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DividendsCalendarGet request
	DividendsCalendarGet(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EarningsGet request
	EarningsGet(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEarningsCalendar request
	GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EconomicCalendarGet request
	EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnterpriseValueGet request
	EnterpriseValueGet(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgDisclosuresGet request
	EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgRatingsGet request
	EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GradesLatestNewsGet request
	GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodFullGet request
	HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodLightGet request
	HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementGet request
	IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementTtmGet request
	IncomeStatementTtmGet(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingLatestGet request
	InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsGet request
	KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationGet request
	MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationBatchGet request
	MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewsGeneralLatestGet request
	NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteGet request
	QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteShortGet request
	QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatingsSnapshotGet request
	RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosGet request
	RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueGeographicSegmentationGet request
	RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueProductSegmentationGet request
	RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchNameGet request
	SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSymbolGet request
	SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharesFloatGet request
	SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSplits request
	GetSplits(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSplitsCalendar request
	GetSplitsCalendar(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StockListGet request
	StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreasuryRatesGet request
	TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnalystEstimatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailableExchangesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementTtmGet(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementTtmGet(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DividendsGet(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDividendsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DividendsCalendarGet(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDividendsCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EarningsGet(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEarningsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEarningsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEconomicCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnterpriseValueGet(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnterpriseValueGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgDisclosuresGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgRatingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGradesLatestNewsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodFullGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodLightGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementTtmGet(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementTtmGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewsGeneralLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatingsSnapshotGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueGeographicSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueProductSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchNameGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSymbolGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharesFloatGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSplits(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSplitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSplitsCalendar(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSplitsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStockListGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreasuryRatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnalystEstimatesGetRequest generates requests for AnalystEstimatesGet
func NewAnalystEstimatesGetRequest(server string, params *AnalystEstimatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyst-estimates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAvailableExchangesGetRequest generates requests for AvailableExchangesGet
func NewAvailableExchangesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available-exchanges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementGetRequest generates requests for BalanceSheetStatementGet
func NewBalanceSheetStatementGetRequest(server string, params *BalanceSheetStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementTtmGetRequest generates requests for BalanceSheetStatementTtmGet
func NewBalanceSheetStatementTtmGetRequest(server string, params *BalanceSheetStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteGetRequest generates requests for BatchQuoteGet
func NewBatchQuoteGetRequest(server string, params *BatchQuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteShortGetRequest generates requests for BatchQuoteShortGet
func NewBatchQuoteShortGetRequest(server string, params *BatchQuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementGetRequest generates requests for CashFlowStatementGet
func NewCashFlowStatementGetRequest(server string, params *CashFlowStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementTtmGetRequest generates requests for CashFlowStatementTtmGet
func NewCashFlowStatementTtmGetRequest(server string, params *CashFlowStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDividendsGetRequest generates requests for DividendsGet
func NewDividendsGetRequest(server string, params *DividendsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDividendsCalendarGetRequest generates requests for DividendsCalendarGet
func NewDividendsCalendarGetRequest(server string, params *DividendsCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEarningsGetRequest generates requests for EarningsGet
func NewEarningsGetRequest(server string, params *EarningsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEarningsCalendarRequest generates requests for GetEarningsCalendar
func NewGetEarningsCalendarRequest(server string, params *GetEarningsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEconomicCalendarGetRequest generates requests for EconomicCalendarGet
func NewEconomicCalendarGetRequest(server string, params *EconomicCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/economic-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnterpriseValueGetRequest generates requests for EnterpriseValueGet
func NewEnterpriseValueGetRequest(server string, params *EnterpriseValueGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enterprise-values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgDisclosuresGetRequest generates requests for EsgDisclosuresGet
func NewEsgDisclosuresGetRequest(server string, params *EsgDisclosuresGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-disclosures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgRatingsGetRequest generates requests for EsgRatingsGet
func NewEsgRatingsGetRequest(server string, params *EsgRatingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGradesLatestNewsGetRequest generates requests for GradesLatestNewsGet
func NewGradesLatestNewsGetRequest(server string, params *GradesLatestNewsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades-latest-news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodFullGetRequest generates requests for HistoricalPriceEodFullGet
func NewHistoricalPriceEodFullGetRequest(server string, params *HistoricalPriceEodFullGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodLightGetRequest generates requests for HistoricalPriceEodLightGet
func NewHistoricalPriceEodLightGetRequest(server string, params *HistoricalPriceEodLightGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/light")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementGetRequest generates requests for IncomeStatementGet
func NewIncomeStatementGetRequest(server string, params *IncomeStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementTtmGetRequest generates requests for IncomeStatementTtmGet
func NewIncomeStatementTtmGetRequest(server string, params *IncomeStatementTtmGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingLatestGetRequest generates requests for InsiderTradingLatestGet
func NewInsiderTradingLatestGetRequest(server string, params *InsiderTradingLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsGetRequest generates requests for KeyMetricsGet
func NewKeyMetricsGetRequest(server string, params *KeyMetricsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationGetRequest generates requests for MarketCapitalizationGet
func NewMarketCapitalizationGetRequest(server string, params *MarketCapitalizationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationBatchGetRequest generates requests for MarketCapitalizationBatchGet
func NewMarketCapitalizationBatchGetRequest(server string, params *MarketCapitalizationBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization-batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNewsGeneralLatestGetRequest generates requests for NewsGeneralLatestGet
func NewNewsGeneralLatestGetRequest(server string, params *NewsGeneralLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/general-latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, params *ProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteGetRequest generates requests for QuoteGet
func NewQuoteGetRequest(server string, params *QuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteShortGetRequest generates requests for QuoteShortGet
func NewQuoteShortGetRequest(server string, params *QuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatingsSnapshotGetRequest generates requests for RatingsSnapshotGet
func NewRatingsSnapshotGetRequest(server string, params *RatingsSnapshotGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratings-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosGetRequest generates requests for RatiosGet
func NewRatiosGetRequest(server string, params *RatiosGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueGeographicSegmentationGetRequest generates requests for RevenueGeographicSegmentationGet
func NewRevenueGeographicSegmentationGetRequest(server string, params *RevenueGeographicSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-geographic-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueProductSegmentationGetRequest generates requests for RevenueProductSegmentationGet
func NewRevenueProductSegmentationGetRequest(server string, params *RevenueProductSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-product-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchNameGetRequest generates requests for SearchNameGet
func NewSearchNameGetRequest(server string, params *SearchNameGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSymbolGetRequest generates requests for SearchSymbolGet
func NewSearchSymbolGetRequest(server string, params *SearchSymbolGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharesFloatGetRequest generates requests for SharesFloatGet
func NewSharesFloatGetRequest(server string, params *SharesFloatGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares-float")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSplitsRequest generates requests for GetSplits
func NewGetSplitsRequest(server string, params *GetSplitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/splits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSplitsCalendarRequest generates requests for GetSplitsCalendar
func NewGetSplitsCalendarRequest(server string, params *GetSplitsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/splits-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStockListGetRequest generates requests for StockListGet
func NewStockListGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreasuryRatesGetRequest generates requests for TreasuryRatesGet
func NewTreasuryRatesGetRequest(server string, params *TreasuryRatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treasury-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnalystEstimatesGetWithResponse request
	AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error)

	// AvailableExchangesGetWithResponse request
	AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error)

	// BalanceSheetStatementGetWithResponse request
	BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error)

	// BalanceSheetStatementTtmGetWithResponse request
	BalanceSheetStatementTtmGetWithResponse(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTtmGetClientResponse, error)

	// BatchQuoteGetWithResponse request
	BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error)

	// BatchQuoteShortGetWithResponse request
	BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error)

	// CashFlowStatementGetWithResponse request
	CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error)

	// CashFlowStatementTtmGetWithResponse request
	CashFlowStatementTtmGetWithResponse(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTtmGetClientResponse, error)

	// DividendsGetWithResponse request
	DividendsGetWithResponse(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*DividendsGetClientResponse, error)

	// DividendsCalendarGetWithResponse request
	DividendsCalendarGetWithResponse(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*DividendsCalendarGetClientResponse, error)

	// EarningsGetWithResponse request
	EarningsGetWithResponse(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*EarningsGetClientResponse, error)

	// GetEarningsCalendarWithResponse request
	GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error)

	// EconomicCalendarGetWithResponse request
	EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error)

	// EnterpriseValueGetWithResponse request
	EnterpriseValueGetWithResponse(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*EnterpriseValueGetClientResponse, error)

	// EsgDisclosuresGetWithResponse request
	EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error)

	// EsgRatingsGetWithResponse request
	EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error)

	// GradesLatestNewsGetWithResponse request
	GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error)

	// HistoricalPriceEodFullGetWithResponse request
	HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error)

	// HistoricalPriceEodLightGetWithResponse request
	HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error)

	// IncomeStatementGetWithResponse request
	IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error)

	// IncomeStatementTtmGetWithResponse request
	IncomeStatementTtmGetWithResponse(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTtmGetClientResponse, error)

	// InsiderTradingLatestGetWithResponse request
	InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error)

	// KeyMetricsGetWithResponse request
	KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error)

	// MarketCapitalizationGetWithResponse request
	MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error)

	// MarketCapitalizationBatchGetWithResponse request
	MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error)

	// NewsGeneralLatestGetWithResponse request
	NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error)

	// ProfileGetWithResponse request
	ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error)

	// QuoteGetWithResponse request
	QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error)

	// QuoteShortGetWithResponse request
	QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error)

	// RatingsSnapshotGetWithResponse request
	RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error)

	// RatiosGetWithResponse request
	RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error)

	// RevenueGeographicSegmentationGetWithResponse request
	RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error)

	// RevenueProductSegmentationGetWithResponse request
	RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error)

	// SearchNameGetWithResponse request
	SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error)

	// SearchSymbolGetWithResponse request
	SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error)

	// SharesFloatGetWithResponse request
	SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error)

	// GetSplitsWithResponse request
	GetSplitsWithResponse(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*GetSplitsClientResponse, error)

	// GetSplitsCalendarWithResponse request
	GetSplitsCalendarWithResponse(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*GetSplitsCalendarClientResponse, error)

	// StockListGetWithResponse request
	StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error)

	// TreasuryRatesGetWithResponse request
	TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error)
}

type AnalystEstimatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialEstimates
}

// Status returns HTTPResponse.Status
func (r AnalystEstimatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnalystEstimatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailableExchangesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Exchange
}

// Status returns HTTPResponse.Status
func (r AvailableExchangesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailableExchangesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatement
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatementTtm
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatement
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatementTtm
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DividendsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r DividendsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DividendsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DividendsCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r DividendsCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DividendsCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EarningsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r EarningsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EarningsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEarningsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r GetEarningsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEarningsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EconomicCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEvent
}

// Status returns HTTPResponse.Status
func (r EconomicCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EconomicCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnterpriseValueGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnterpriseValue
}

// Status returns HTTPResponse.Status
func (r EnterpriseValueGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnterpriseValueGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgDisclosuresGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgDisclosure
}

// Status returns HTTPResponse.Status
func (r EsgDisclosuresGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgDisclosuresGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgRatingsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgRating
}

// Status returns HTTPResponse.Status
func (r EsgRatingsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgRatingsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GradesLatestNewsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GradeNews
}

// Status returns HTTPResponse.Status
func (r GradesLatestNewsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GradesLatestNewsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodFullGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodFullGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodFullGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodLightGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LightCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodLightGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodLightGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatement
}

// Status returns HTTPResponse.Status
func (r IncomeStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementTtmGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatementTtm
}

// Status returns HTTPResponse.Status
func (r IncomeStatementTtmGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementTtmGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetrics
}

// Status returns HTTPResponse.Status
func (r KeyMetricsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationBatchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationBatchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationBatchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewsGeneralLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsArticle
}

// Status returns HTTPResponse.Status
func (r NewsGeneralLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewsGeneralLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGetResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfileGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r QuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r QuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatingsSnapshotGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatingSnapshot
}

// Status returns HTTPResponse.Status
func (r RatingsSnapshotGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatingsSnapshotGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialRatios
}

// Status returns HTTPResponse.Status
func (r RatiosGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueGeographicSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueGeographicSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueGeographicSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueProductSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueProductSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueProductSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchNameGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchNameGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchNameGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSymbolGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchSymbolGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSymbolGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharesFloatGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySharesFloat
}

// Status returns HTTPResponse.Status
func (r SharesFloatGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharesFloatGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSplitsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitEvent
}

// Status returns HTTPResponse.Status
func (r GetSplitsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSplitsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSplitsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitEvent
}

// Status returns HTTPResponse.Status
func (r GetSplitsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSplitsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StockListGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySymbol
}

// Status returns HTTPResponse.Status
func (r StockListGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StockListGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreasuryRatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TreasuryRates
}

// Status returns HTTPResponse.Status
func (r TreasuryRatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreasuryRatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnalystEstimatesGetWithResponse request returning *AnalystEstimatesGetClientResponse
func (c *ClientWithResponses) AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error) {
	rsp, err := c.AnalystEstimatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnalystEstimatesGetClientResponse(rsp)
}

// AvailableExchangesGetWithResponse request returning *AvailableExchangesGetClientResponse
func (c *ClientWithResponses) AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error) {
	rsp, err := c.AvailableExchangesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailableExchangesGetClientResponse(rsp)
}

// BalanceSheetStatementGetWithResponse request returning *BalanceSheetStatementGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementGetClientResponse(rsp)
}

// BalanceSheetStatementTtmGetWithResponse request returning *BalanceSheetStatementTtmGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementTtmGetWithResponse(ctx context.Context, params *BalanceSheetStatementTtmGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTtmGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementTtmGetClientResponse(rsp)
}

// BatchQuoteGetWithResponse request returning *BatchQuoteGetClientResponse
func (c *ClientWithResponses) BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error) {
	rsp, err := c.BatchQuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteGetClientResponse(rsp)
}

// BatchQuoteShortGetWithResponse request returning *BatchQuoteShortGetClientResponse
func (c *ClientWithResponses) BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error) {
	rsp, err := c.BatchQuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteShortGetClientResponse(rsp)
}

// CashFlowStatementGetWithResponse request returning *CashFlowStatementGetClientResponse
func (c *ClientWithResponses) CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error) {
	rsp, err := c.CashFlowStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementGetClientResponse(rsp)
}

// CashFlowStatementTtmGetWithResponse request returning *CashFlowStatementTtmGetClientResponse
func (c *ClientWithResponses) CashFlowStatementTtmGetWithResponse(ctx context.Context, params *CashFlowStatementTtmGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTtmGetClientResponse, error) {
	rsp, err := c.CashFlowStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementTtmGetClientResponse(rsp)
}

// DividendsGetWithResponse request returning *DividendsGetClientResponse
func (c *ClientWithResponses) DividendsGetWithResponse(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*DividendsGetClientResponse, error) {
	rsp, err := c.DividendsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDividendsGetClientResponse(rsp)
}

// DividendsCalendarGetWithResponse request returning *DividendsCalendarGetClientResponse
func (c *ClientWithResponses) DividendsCalendarGetWithResponse(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*DividendsCalendarGetClientResponse, error) {
	rsp, err := c.DividendsCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDividendsCalendarGetClientResponse(rsp)
}

// EarningsGetWithResponse request returning *EarningsGetClientResponse
func (c *ClientWithResponses) EarningsGetWithResponse(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*EarningsGetClientResponse, error) {
	rsp, err := c.EarningsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEarningsGetClientResponse(rsp)
}

// GetEarningsCalendarWithResponse request returning *GetEarningsCalendarClientResponse
func (c *ClientWithResponses) GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error) {
	rsp, err := c.GetEarningsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEarningsCalendarClientResponse(rsp)
}

// EconomicCalendarGetWithResponse request returning *EconomicCalendarGetClientResponse
func (c *ClientWithResponses) EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error) {
	rsp, err := c.EconomicCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEconomicCalendarGetClientResponse(rsp)
}

// EnterpriseValueGetWithResponse request returning *EnterpriseValueGetClientResponse
func (c *ClientWithResponses) EnterpriseValueGetWithResponse(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*EnterpriseValueGetClientResponse, error) {
	rsp, err := c.EnterpriseValueGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnterpriseValueGetClientResponse(rsp)
}

// EsgDisclosuresGetWithResponse request returning *EsgDisclosuresGetClientResponse
func (c *ClientWithResponses) EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error) {
	rsp, err := c.EsgDisclosuresGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgDisclosuresGetClientResponse(rsp)
}

// EsgRatingsGetWithResponse request returning *EsgRatingsGetClientResponse
func (c *ClientWithResponses) EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error) {
	rsp, err := c.EsgRatingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgRatingsGetClientResponse(rsp)
}

// GradesLatestNewsGetWithResponse request returning *GradesLatestNewsGetClientResponse
func (c *ClientWithResponses) GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error) {
	rsp, err := c.GradesLatestNewsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGradesLatestNewsGetClientResponse(rsp)
}

// HistoricalPriceEodFullGetWithResponse request returning *HistoricalPriceEodFullGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodFullGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodFullGetClientResponse(rsp)
}

// HistoricalPriceEodLightGetWithResponse request returning *HistoricalPriceEodLightGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodLightGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodLightGetClientResponse(rsp)
}

// IncomeStatementGetWithResponse request returning *IncomeStatementGetClientResponse
func (c *ClientWithResponses) IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error) {
	rsp, err := c.IncomeStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementGetClientResponse(rsp)
}

// IncomeStatementTtmGetWithResponse request returning *IncomeStatementTtmGetClientResponse
func (c *ClientWithResponses) IncomeStatementTtmGetWithResponse(ctx context.Context, params *IncomeStatementTtmGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTtmGetClientResponse, error) {
	rsp, err := c.IncomeStatementTtmGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementTtmGetClientResponse(rsp)
}

// InsiderTradingLatestGetWithResponse request returning *InsiderTradingLatestGetClientResponse
func (c *ClientWithResponses) InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error) {
	rsp, err := c.InsiderTradingLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingLatestGetClientResponse(rsp)
}

// KeyMetricsGetWithResponse request returning *KeyMetricsGetClientResponse
func (c *ClientWithResponses) KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error) {
	rsp, err := c.KeyMetricsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsGetClientResponse(rsp)
}

// MarketCapitalizationGetWithResponse request returning *MarketCapitalizationGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationGetClientResponse(rsp)
}

// MarketCapitalizationBatchGetWithResponse request returning *MarketCapitalizationBatchGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationBatchGetClientResponse(rsp)
}

// NewsGeneralLatestGetWithResponse request returning *NewsGeneralLatestGetClientResponse
func (c *ClientWithResponses) NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error) {
	rsp, err := c.NewsGeneralLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewsGeneralLatestGetClientResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetClientResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error) {
	rsp, err := c.ProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetClientResponse(rsp)
}

// QuoteGetWithResponse request returning *QuoteGetClientResponse
func (c *ClientWithResponses) QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error) {
	rsp, err := c.QuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteGetClientResponse(rsp)
}

// QuoteShortGetWithResponse request returning *QuoteShortGetClientResponse
func (c *ClientWithResponses) QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error) {
	rsp, err := c.QuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteShortGetClientResponse(rsp)
}

// RatingsSnapshotGetWithResponse request returning *RatingsSnapshotGetClientResponse
func (c *ClientWithResponses) RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error) {
	rsp, err := c.RatingsSnapshotGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatingsSnapshotGetClientResponse(rsp)
}

// RatiosGetWithResponse request returning *RatiosGetClientResponse
func (c *ClientWithResponses) RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error) {
	rsp, err := c.RatiosGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosGetClientResponse(rsp)
}

// RevenueGeographicSegmentationGetWithResponse request returning *RevenueGeographicSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueGeographicSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueGeographicSegmentationGetClientResponse(rsp)
}

// RevenueProductSegmentationGetWithResponse request returning *RevenueProductSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueProductSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueProductSegmentationGetClientResponse(rsp)
}

// SearchNameGetWithResponse request returning *SearchNameGetClientResponse
func (c *ClientWithResponses) SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error) {
	rsp, err := c.SearchNameGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchNameGetClientResponse(rsp)
}

// SearchSymbolGetWithResponse request returning *SearchSymbolGetClientResponse
func (c *ClientWithResponses) SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error) {
	rsp, err := c.SearchSymbolGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSymbolGetClientResponse(rsp)
}

// SharesFloatGetWithResponse request returning *SharesFloatGetClientResponse
func (c *ClientWithResponses) SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error) {
	rsp, err := c.SharesFloatGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharesFloatGetClientResponse(rsp)
}

// GetSplitsWithResponse request returning *GetSplitsClientResponse
func (c *ClientWithResponses) GetSplitsWithResponse(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*GetSplitsClientResponse, error) {
	rsp, err := c.GetSplits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSplitsClientResponse(rsp)
}

// GetSplitsCalendarWithResponse request returning *GetSplitsCalendarClientResponse
func (c *ClientWithResponses) GetSplitsCalendarWithResponse(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*GetSplitsCalendarClientResponse, error) {
	rsp, err := c.GetSplitsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSplitsCalendarClientResponse(rsp)
}

// StockListGetWithResponse request returning *StockListGetClientResponse
func (c *ClientWithResponses) StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error) {
	rsp, err := c.StockListGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStockListGetClientResponse(rsp)
}

// TreasuryRatesGetWithResponse request returning *TreasuryRatesGetClientResponse
func (c *ClientWithResponses) TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error) {
	rsp, err := c.TreasuryRatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreasuryRatesGetClientResponse(rsp)
}

// ParseAnalystEstimatesGetClientResponse parses an HTTP response from a AnalystEstimatesGetWithResponse call
func ParseAnalystEstimatesGetClientResponse(rsp *http.Response) (*AnalystEstimatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnalystEstimatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialEstimates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAvailableExchangesGetClientResponse parses an HTTP response from a AvailableExchangesGetWithResponse call
func ParseAvailableExchangesGetClientResponse(rsp *http.Response) (*AvailableExchangesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailableExchangesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Exchange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementGetClientResponse parses an HTTP response from a BalanceSheetStatementGetWithResponse call
func ParseBalanceSheetStatementGetClientResponse(rsp *http.Response) (*BalanceSheetStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementTtmGetClientResponse parses an HTTP response from a BalanceSheetStatementTtmGetWithResponse call
func ParseBalanceSheetStatementTtmGetClientResponse(rsp *http.Response) (*BalanceSheetStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteGetClientResponse parses an HTTP response from a BatchQuoteGetWithResponse call
func ParseBatchQuoteGetClientResponse(rsp *http.Response) (*BatchQuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteShortGetClientResponse parses an HTTP response from a BatchQuoteShortGetWithResponse call
func ParseBatchQuoteShortGetClientResponse(rsp *http.Response) (*BatchQuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementGetClientResponse parses an HTTP response from a CashFlowStatementGetWithResponse call
func ParseCashFlowStatementGetClientResponse(rsp *http.Response) (*CashFlowStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementTtmGetClientResponse parses an HTTP response from a CashFlowStatementTtmGetWithResponse call
func ParseCashFlowStatementTtmGetClientResponse(rsp *http.Response) (*CashFlowStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDividendsGetClientResponse parses an HTTP response from a DividendsGetWithResponse call
func ParseDividendsGetClientResponse(rsp *http.Response) (*DividendsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DividendsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDividendsCalendarGetClientResponse parses an HTTP response from a DividendsCalendarGetWithResponse call
func ParseDividendsCalendarGetClientResponse(rsp *http.Response) (*DividendsCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DividendsCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEarningsGetClientResponse parses an HTTP response from a EarningsGetWithResponse call
func ParseEarningsGetClientResponse(rsp *http.Response) (*EarningsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EarningsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEarningsCalendarClientResponse parses an HTTP response from a GetEarningsCalendarWithResponse call
func ParseGetEarningsCalendarClientResponse(rsp *http.Response) (*GetEarningsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEarningsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEconomicCalendarGetClientResponse parses an HTTP response from a EconomicCalendarGetWithResponse call
func ParseEconomicCalendarGetClientResponse(rsp *http.Response) (*EconomicCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EconomicCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnterpriseValueGetClientResponse parses an HTTP response from a EnterpriseValueGetWithResponse call
func ParseEnterpriseValueGetClientResponse(rsp *http.Response) (*EnterpriseValueGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnterpriseValueGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnterpriseValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgDisclosuresGetClientResponse parses an HTTP response from a EsgDisclosuresGetWithResponse call
func ParseEsgDisclosuresGetClientResponse(rsp *http.Response) (*EsgDisclosuresGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgDisclosuresGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgDisclosure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgRatingsGetClientResponse parses an HTTP response from a EsgRatingsGetWithResponse call
func ParseEsgRatingsGetClientResponse(rsp *http.Response) (*EsgRatingsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgRatingsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgRating
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGradesLatestNewsGetClientResponse parses an HTTP response from a GradesLatestNewsGetWithResponse call
func ParseGradesLatestNewsGetClientResponse(rsp *http.Response) (*GradesLatestNewsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GradesLatestNewsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GradeNews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodFullGetClientResponse parses an HTTP response from a HistoricalPriceEodFullGetWithResponse call
func ParseHistoricalPriceEodFullGetClientResponse(rsp *http.Response) (*HistoricalPriceEodFullGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodFullGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodLightGetClientResponse parses an HTTP response from a HistoricalPriceEodLightGetWithResponse call
func ParseHistoricalPriceEodLightGetClientResponse(rsp *http.Response) (*HistoricalPriceEodLightGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodLightGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LightCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementGetClientResponse parses an HTTP response from a IncomeStatementGetWithResponse call
func ParseIncomeStatementGetClientResponse(rsp *http.Response) (*IncomeStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementTtmGetClientResponse parses an HTTP response from a IncomeStatementTtmGetWithResponse call
func ParseIncomeStatementTtmGetClientResponse(rsp *http.Response) (*IncomeStatementTtmGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementTtmGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatementTtm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingLatestGetClientResponse parses an HTTP response from a InsiderTradingLatestGetWithResponse call
func ParseInsiderTradingLatestGetClientResponse(rsp *http.Response) (*InsiderTradingLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsGetClientResponse parses an HTTP response from a KeyMetricsGetWithResponse call
func ParseKeyMetricsGetClientResponse(rsp *http.Response) (*KeyMetricsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationGetClientResponse parses an HTTP response from a MarketCapitalizationGetWithResponse call
func ParseMarketCapitalizationGetClientResponse(rsp *http.Response) (*MarketCapitalizationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationBatchGetClientResponse parses an HTTP response from a MarketCapitalizationBatchGetWithResponse call
func ParseMarketCapitalizationBatchGetClientResponse(rsp *http.Response) (*MarketCapitalizationBatchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationBatchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewsGeneralLatestGetClientResponse parses an HTTP response from a NewsGeneralLatestGetWithResponse call
func ParseNewsGeneralLatestGetClientResponse(rsp *http.Response) (*NewsGeneralLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewsGeneralLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsArticle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileGetClientResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetClientResponse(rsp *http.Response) (*ProfileGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseQuoteGetClientResponse parses an HTTP response from a QuoteGetWithResponse call
func ParseQuoteGetClientResponse(rsp *http.Response) (*QuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuoteShortGetClientResponse parses an HTTP response from a QuoteShortGetWithResponse call
func ParseQuoteShortGetClientResponse(rsp *http.Response) (*QuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatingsSnapshotGetClientResponse parses an HTTP response from a RatingsSnapshotGetWithResponse call
func ParseRatingsSnapshotGetClientResponse(rsp *http.Response) (*RatingsSnapshotGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatingsSnapshotGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatingSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosGetClientResponse parses an HTTP response from a RatiosGetWithResponse call
func ParseRatiosGetClientResponse(rsp *http.Response) (*RatiosGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialRatios
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueGeographicSegmentationGetClientResponse parses an HTTP response from a RevenueGeographicSegmentationGetWithResponse call
func ParseRevenueGeographicSegmentationGetClientResponse(rsp *http.Response) (*RevenueGeographicSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueGeographicSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueProductSegmentationGetClientResponse parses an HTTP response from a RevenueProductSegmentationGetWithResponse call
func ParseRevenueProductSegmentationGetClientResponse(rsp *http.Response) (*RevenueProductSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueProductSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchNameGetClientResponse parses an HTTP response from a SearchNameGetWithResponse call
func ParseSearchNameGetClientResponse(rsp *http.Response) (*SearchNameGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchNameGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSymbolGetClientResponse parses an HTTP response from a SearchSymbolGetWithResponse call
func ParseSearchSymbolGetClientResponse(rsp *http.Response) (*SearchSymbolGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSymbolGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharesFloatGetClientResponse parses an HTTP response from a SharesFloatGetWithResponse call
func ParseSharesFloatGetClientResponse(rsp *http.Response) (*SharesFloatGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharesFloatGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySharesFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSplitsClientResponse parses an HTTP response from a GetSplitsWithResponse call
func ParseGetSplitsClientResponse(rsp *http.Response) (*GetSplitsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSplitsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSplitsCalendarClientResponse parses an HTTP response from a GetSplitsCalendarWithResponse call
func ParseGetSplitsCalendarClientResponse(rsp *http.Response) (*GetSplitsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSplitsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStockListGetClientResponse parses an HTTP response from a StockListGetWithResponse call
func ParseStockListGetClientResponse(rsp *http.Response) (*StockListGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StockListGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreasuryRatesGetClientResponse parses an HTTP response from a TreasuryRatesGetWithResponse call
func ParseTreasuryRatesGetClientResponse(rsp *http.Response) (*TreasuryRatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreasuryRatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TreasuryRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
