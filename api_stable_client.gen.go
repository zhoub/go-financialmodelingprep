// Package financialmodelingprep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 6efb8729c49d05fcc2d90d9553b4bccb0e2e9055 DO NOT EDIT.
package financialmodelingprep

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for Period.
const (
	Annual  Period = "annual"
	FY      Period = "FY"
	Q1      Period = "Q1"
	Q2      Period = "Q2"
	Q3      Period = "Q3"
	Q4      Period = "Q4"
	Quarter Period = "quarter"
)

// BalanceSheetStatement defines model for BalanceSheetStatement.
type BalanceSheetStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float64            `json:"accountPayables"`
	AccountsReceivables                     float64            `json:"accountsReceivables"`
	AccruedExpenses                         float64            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float64            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float64            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float64            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float64            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float64            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float64            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float64            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float64            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float64            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float64            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float64            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float64            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float64            `json:"intangibleAssets"`
	Inventory                               float64            `json:"inventory"`
	LongTermDebt                            float64            `json:"longTermDebt"`
	LongTermInvestments                     float64            `json:"longTermInvestments"`
	MinorityInterest                        float64            `json:"minorityInterest"`
	NetDebt                                 float64            `json:"netDebt"`
	NetReceivables                          float64            `json:"netReceivables"`
	OtherAssets                             float64            `json:"otherAssets"`
	OtherCurrentAssets                      float64            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float64            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float64            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float64            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float64            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float64            `json:"otherPayables"`
	OtherReceivables                        float64            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float64            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float64            `json:"preferredStock"`
	Prepaids                                float64            `json:"prepaids"`
	PropertyPlantEquipmentNet               float64            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float64            `json:"retainedEarnings"`
	ShortTermDebt                           float64            `json:"shortTermDebt"`
	ShortTermInvestments                    float64            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float64            `json:"taxAssets"`
	TaxPayables                             float64            `json:"taxPayables"`
	TotalAssets                             float64            `json:"totalAssets"`
	TotalCurrentAssets                      float64            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float64            `json:"totalCurrentLiabilities"`
	TotalDebt                               float64            `json:"totalDebt"`
	TotalEquity                             float64            `json:"totalEquity"`
	TotalInvestments                        float64            `json:"totalInvestments"`
	TotalLiabilities                        float64            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float64            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float64            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float64            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float64            `json:"totalPayables"`
	TotalStockholdersEquity                 float64            `json:"totalStockholdersEquity"`
	TreasuryStock                           float64            `json:"treasuryStock"`
}

// BalanceSheetStatementTTM defines model for BalanceSheetStatementTTM.
type BalanceSheetStatementTTM struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	AccountPayables                         float32            `json:"accountPayables"`
	AccountsReceivables                     float32            `json:"accountsReceivables"`
	AccruedExpenses                         float32            `json:"accruedExpenses"`
	AccumulatedOtherComprehensiveIncomeLoss float32            `json:"accumulatedOtherComprehensiveIncomeLoss"`
	AdditionalPaidInCapital                 float32            `json:"additionalPaidInCapital"`
	CapitalLeaseObligations                 float32            `json:"capitalLeaseObligations"`
	CapitalLeaseObligationsCurrent          float32            `json:"capitalLeaseObligationsCurrent"`
	CashAndCashEquivalents                  float32            `json:"cashAndCashEquivalents"`
	CashAndShortTermInvestments             float32            `json:"cashAndShortTermInvestments"`
	Cik                                     string             `json:"cik"`
	CommonStock                             float32            `json:"commonStock"`
	Date                                    openapi_types.Date `json:"date"`
	DeferredRevenue                         float32            `json:"deferredRevenue"`
	DeferredRevenueNonCurrent               float32            `json:"deferredRevenueNonCurrent"`
	DeferredTaxLiabilitiesNonCurrent        float32            `json:"deferredTaxLiabilitiesNonCurrent"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	Goodwill                                float32            `json:"goodwill"`
	GoodwillAndIntangibleAssets             float32            `json:"goodwillAndIntangibleAssets"`
	IntangibleAssets                        float32            `json:"intangibleAssets"`
	Inventory                               float32            `json:"inventory"`
	LongTermDebt                            float32            `json:"longTermDebt"`
	LongTermInvestments                     float32            `json:"longTermInvestments"`
	MinorityInterest                        float32            `json:"minorityInterest"`
	NetDebt                                 float32            `json:"netDebt"`
	NetReceivables                          float32            `json:"netReceivables"`
	OtherAssets                             float32            `json:"otherAssets"`
	OtherCurrentAssets                      float32            `json:"otherCurrentAssets"`
	OtherCurrentLiabilities                 float32            `json:"otherCurrentLiabilities"`
	OtherLiabilities                        float32            `json:"otherLiabilities"`
	OtherNonCurrentAssets                   float32            `json:"otherNonCurrentAssets"`
	OtherNonCurrentLiabilities              float32            `json:"otherNonCurrentLiabilities"`
	OtherPayables                           float32            `json:"otherPayables"`
	OtherReceivables                        float32            `json:"otherReceivables"`
	OtherTotalStockholdersEquity            float32            `json:"otherTotalStockholdersEquity"`
	Period                                  string             `json:"period"`
	PreferredStock                          float32            `json:"preferredStock"`
	Prepaids                                float32            `json:"prepaids"`
	PropertyPlantEquipmentNet               float32            `json:"propertyPlantEquipmentNet"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RetainedEarnings                        float32            `json:"retainedEarnings"`
	ShortTermDebt                           float32            `json:"shortTermDebt"`
	ShortTermInvestments                    float32            `json:"shortTermInvestments"`
	Symbol                                  string             `json:"symbol"`
	TaxAssets                               float32            `json:"taxAssets"`
	TaxPayables                             float32            `json:"taxPayables"`
	TotalAssets                             float32            `json:"totalAssets"`
	TotalCurrentAssets                      float32            `json:"totalCurrentAssets"`
	TotalCurrentLiabilities                 float32            `json:"totalCurrentLiabilities"`
	TotalDebt                               float32            `json:"totalDebt"`
	TotalEquity                             float32            `json:"totalEquity"`
	TotalInvestments                        float32            `json:"totalInvestments"`
	TotalLiabilities                        float32            `json:"totalLiabilities"`
	TotalLiabilitiesAndTotalEquity          float32            `json:"totalLiabilitiesAndTotalEquity"`
	TotalNonCurrentAssets                   float32            `json:"totalNonCurrentAssets"`
	TotalNonCurrentLiabilities              float32            `json:"totalNonCurrentLiabilities"`
	TotalPayables                           float32            `json:"totalPayables"`
	TotalStockholdersEquity                 float32            `json:"totalStockholdersEquity"`
	TreasuryStock                           float32            `json:"treasuryStock"`
}

// CashFlowStatement defines model for CashFlowStatement.
type CashFlowStatement struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CashFlowStatementTTM defines model for CashFlowStatementTTM.
type CashFlowStatementTTM struct {
	AcceptedDate                           string             `json:"acceptedDate"`
	AccountsPayables                       float64            `json:"accountsPayables"`
	AccountsReceivables                    float64            `json:"accountsReceivables"`
	AcquisitionsNet                        float64            `json:"acquisitionsNet"`
	CapitalExpenditure                     float64            `json:"capitalExpenditure"`
	CashAtBeginningOfPeriod                float64            `json:"cashAtBeginningOfPeriod"`
	CashAtEndOfPeriod                      float64            `json:"cashAtEndOfPeriod"`
	ChangeInWorkingCapital                 float64            `json:"changeInWorkingCapital"`
	Cik                                    string             `json:"cik"`
	CommonDividendsPaid                    float64            `json:"commonDividendsPaid"`
	CommonStockIssuance                    float64            `json:"commonStockIssuance"`
	CommonStockRepurchased                 float64            `json:"commonStockRepurchased"`
	Date                                   openapi_types.Date `json:"date"`
	DeferredIncomeTax                      float64            `json:"deferredIncomeTax"`
	DepreciationAndAmortization            float64            `json:"depreciationAndAmortization"`
	EffectOfForexChangesOnCash             float64            `json:"effectOfForexChangesOnCash"`
	FilingDate                             openapi_types.Date `json:"filingDate"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlow                           float64            `json:"freeCashFlow"`
	IncomeTaxesPaid                        float64            `json:"incomeTaxesPaid"`
	InterestPaid                           float64            `json:"interestPaid"`
	Inventory                              float64            `json:"inventory"`
	InvestmentsInPropertyPlantAndEquipment float64            `json:"investmentsInPropertyPlantAndEquipment"`
	LongTermNetDebtIssuance                float64            `json:"longTermNetDebtIssuance"`
	NetCashProvidedByFinancingActivities   float64            `json:"netCashProvidedByFinancingActivities"`
	NetCashProvidedByInvestingActivities   float64            `json:"netCashProvidedByInvestingActivities"`
	NetCashProvidedByOperatingActivities   float64            `json:"netCashProvidedByOperatingActivities"`
	NetChangeInCash                        float64            `json:"netChangeInCash"`
	NetCommonStockIssuance                 float64            `json:"netCommonStockIssuance"`
	NetDebtIssuance                        float64            `json:"netDebtIssuance"`
	NetDividendsPaid                       float64            `json:"netDividendsPaid"`
	NetIncome                              float64            `json:"netIncome"`
	NetPreferredStockIssuance              float64            `json:"netPreferredStockIssuance"`
	NetStockIssuance                       float64            `json:"netStockIssuance"`
	OperatingCashFlow                      float64            `json:"operatingCashFlow"`
	OtherFinancingActivities               float64            `json:"otherFinancingActivities"`
	OtherInvestingActivities               float64            `json:"otherInvestingActivities"`
	OtherNonCashItems                      float64            `json:"otherNonCashItems"`
	OtherWorkingCapital                    float64            `json:"otherWorkingCapital"`
	Period                                 string             `json:"period"`
	PreferredDividendsPaid                 float64            `json:"preferredDividendsPaid"`
	PurchasesOfInvestments                 float64            `json:"purchasesOfInvestments"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	SalesMaturitiesOfInvestments           float64            `json:"salesMaturitiesOfInvestments"`
	ShortTermNetDebtIssuance               float64            `json:"shortTermNetDebtIssuance"`
	StockBasedCompensation                 float64            `json:"stockBasedCompensation"`
	Symbol                                 string             `json:"symbol"`
}

// CompanyCapitalization defines model for CompanyCapitalization.
type CompanyCapitalization struct {
	Date      openapi_types.Date `json:"date"`
	MarketCap float64            `json:"marketCap"`
	Symbol    string             `json:"symbol"`
}

// CompanyProfile defines model for CompanyProfile.
type CompanyProfile struct {
	Address           string  `json:"address"`
	AverageVolume     float64 `json:"averageVolume"`
	Beta              float64 `json:"beta"`
	Ceo               string  `json:"ceo"`
	Change            float64 `json:"change"`
	ChangePercentage  float64 `json:"changePercentage"`
	Cik               string  `json:"cik"`
	City              string  `json:"city"`
	CompanyName       string  `json:"companyName"`
	Country           string  `json:"country"`
	Currency          string  `json:"currency"`
	Cusip             string  `json:"cusip"`
	DefaultImage      bool    `json:"defaultImage"`
	Description       string  `json:"description"`
	Exchange          string  `json:"exchange"`
	ExchangeFullName  string  `json:"exchangeFullName"`
	FullTimeEmployees string  `json:"fullTimeEmployees"`
	Image             string  `json:"image"`
	Industry          string  `json:"industry"`
	IpoDate           string  `json:"ipoDate"`
	IsActivelyTrading bool    `json:"isActivelyTrading"`
	IsAdr             bool    `json:"isAdr"`
	IsEtf             bool    `json:"isEtf"`
	IsFund            bool    `json:"isFund"`
	Isin              string  `json:"isin"`
	LastDividend      float64 `json:"lastDividend"`
	MarketCap         float64 `json:"marketCap"`
	Phone             string  `json:"phone"`
	Price             float64 `json:"price"`
	Range             string  `json:"range"`
	Sector            string  `json:"sector"`
	State             string  `json:"state"`
	Symbol            string  `json:"symbol"`
	Volume            int     `json:"volume"`
	Website           string  `json:"website"`
	Zip               string  `json:"zip"`
}

// CompanySharesFloat defines model for CompanySharesFloat.
type CompanySharesFloat struct {
	Date              string  `json:"date"`
	FloatShares       int     `json:"floatShares"`
	FreeFloat         float64 `json:"freeFloat"`
	OutstandingShares int     `json:"outstandingShares"`
	Symbol            string  `json:"symbol"`
}

// CompanySymbol defines model for CompanySymbol.
type CompanySymbol struct {
	CompanyName string `json:"companyName"`
	Symbol      string `json:"symbol"`
}

// DividendEvent defines model for DividendEvent.
type DividendEvent struct {
	AdjDividend     float64            `json:"adjDividend"`
	Date            openapi_types.Date `json:"date"`
	DeclarationDate string             `json:"declarationDate"`
	Dividend        float64            `json:"dividend"`
	Frequency       string             `json:"frequency"`
	PaymentDate     string             `json:"paymentDate"`
	RecordDate      string             `json:"recordDate"`
	Symbol          string             `json:"symbol"`
	Yield           float64            `json:"yield"`
}

// EarningEvent defines model for EarningEvent.
type EarningEvent struct {
	Date             openapi_types.Date `json:"date"`
	EpsActual        float64            `json:"epsActual"`
	EpsEstimated     float64            `json:"epsEstimated"`
	LastUpdated      openapi_types.Date `json:"lastUpdated"`
	RevenueActual    float64            `json:"revenueActual"`
	RevenueEstimated float64            `json:"revenueEstimated"`
	Symbol           string             `json:"symbol"`
}

// EconomicEsgDisclosure defines model for EconomicEsgDisclosure.
type EconomicEsgDisclosure struct {
	ESGScore           float64            `json:"ESGScore"`
	AcceptedDate       openapi_types.Date `json:"acceptedDate"`
	Cik                string             `json:"cik"`
	CompanyName        string             `json:"companyName"`
	Date               openapi_types.Date `json:"date"`
	EnvironmentalScore float64            `json:"environmentalScore"`
	FormType           string             `json:"formType"`
	GovernanceScore    float64            `json:"governanceScore"`
	SocialScore        float64            `json:"socialScore"`
	Symbol             string             `json:"symbol"`
	Url                string             `json:"url"`
}

// EconomicEsgRating defines model for EconomicEsgRating.
type EconomicEsgRating struct {
	ESGRiskRating string `json:"ESGRiskRating"`
	Cik           string `json:"cik"`
	CompanyName   string `json:"companyName"`
	FiscalYear    int    `json:"fiscalYear"`
	Industry      string `json:"industry"`
	IndustryRank  string `json:"industryRank"`
	Symbol        string `json:"symbol"`
}

// EconomicEvent defines model for EconomicEvent.
type EconomicEvent struct {
	Actual           float64  `json:"actual"`
	Change           float64  `json:"change"`
	ChangePercentage float64  `json:"changePercentage"`
	Country          string   `json:"country"`
	Currency         string   `json:"currency"`
	Date             string   `json:"date"`
	Estimate         *float64 `json:"estimate"`
	Event            string   `json:"event"`
	Impact           string   `json:"impact"`
	Previous         float64  `json:"previous"`
}

// EnterpriseValue defines model for EnterpriseValue.
type EnterpriseValue struct {
	AddTotalDebt                float64            `json:"addTotalDebt"`
	Date                        openapi_types.Date `json:"date"`
	EnterpriseValue             float64            `json:"enterpriseValue"`
	MarketCapitalization        float64            `json:"marketCapitalization"`
	MinusCashAndCashEquivalents float64            `json:"minusCashAndCashEquivalents"`
	NumberOfShares              int                `json:"numberOfShares"`
	StockPrice                  float64            `json:"stockPrice"`
	Symbol                      string             `json:"symbol"`
}

// Exchange defines model for Exchange.
type Exchange struct {
	CountryCode  string `json:"countryCode"`
	CountryName  string `json:"countryName"`
	Delay        string `json:"delay"`
	Exchange     string `json:"exchange"`
	Name         string `json:"name"`
	SymbolSuffix string `json:"symbolSuffix"`
}

// FinancialEstimates defines model for FinancialEstimates.
type FinancialEstimates struct {
	Date               openapi_types.Date `json:"date"`
	EbitAvg            float64            `json:"ebitAvg"`
	EbitHigh           float32            `json:"ebitHigh"`
	EbitLow            float64            `json:"ebitLow"`
	EbitdaAvg          float64            `json:"ebitdaAvg"`
	EbitdaHigh         float64            `json:"ebitdaHigh"`
	EbitdaLow          float32            `json:"ebitdaLow"`
	EpsAvg             float64            `json:"epsAvg"`
	EpsHigh            float64            `json:"epsHigh"`
	EpsLow             float64            `json:"epsLow"`
	NetIncomeAvg       float64            `json:"netIncomeAvg"`
	NetIncomeHigh      float32            `json:"netIncomeHigh"`
	NetIncomeLow       float64            `json:"netIncomeLow"`
	NumAnalystsEps     int                `json:"numAnalystsEps"`
	NumAnalystsRevenue int                `json:"numAnalystsRevenue"`
	RevenueAvg         float64            `json:"revenueAvg"`
	RevenueHigh        float64            `json:"revenueHigh"`
	RevenueLow         float64            `json:"revenueLow"`
	SgaExpenseAvg      float64            `json:"sgaExpenseAvg"`
	SgaExpenseHigh     float64            `json:"sgaExpenseHigh"`
	SgaExpenseLow      float64            `json:"sgaExpenseLow"`
	Symbol             string             `json:"symbol"`
}

// FinancialRatios defines model for FinancialRatios.
type FinancialRatios struct {
	AssetTurnover                           float64            `json:"assetTurnover"`
	BookValuePerShare                       float64            `json:"bookValuePerShare"`
	BottomLineProfitMargin                  float64            `json:"bottomLineProfitMargin"`
	CapexPerShare                           float64            `json:"capexPerShare"`
	CapitalExpenditureCoverageRatio         float64            `json:"capitalExpenditureCoverageRatio"`
	CashPerShare                            float64            `json:"cashPerShare"`
	CashRatio                               float64            `json:"cashRatio"`
	ContinuousOperationsProfitMargin        float64            `json:"continuousOperationsProfitMargin"`
	CurrentRatio                            float64            `json:"currentRatio"`
	Date                                    openapi_types.Date `json:"date"`
	DebtServiceCoverageRatio                float64            `json:"debtServiceCoverageRatio"`
	DebtToAssetsRatio                       float64            `json:"debtToAssetsRatio"`
	DebtToCapitalRatio                      float64            `json:"debtToCapitalRatio"`
	DebtToEquityRatio                       float64            `json:"debtToEquityRatio"`
	DebtToMarketCap                         float64            `json:"debtToMarketCap"`
	DividendPaidAndCapexCoverageRatio       float64            `json:"dividendPaidAndCapexCoverageRatio"`
	DividendPayoutRatio                     float64            `json:"dividendPayoutRatio"`
	DividendYield                           float64            `json:"dividendYield"`
	DividendYieldPercentage                 float64            `json:"dividendYieldPercentage"`
	EbitMargin                              float64            `json:"ebitMargin"`
	EbitdaMargin                            float64            `json:"ebitdaMargin"`
	EbtPerEbit                              float64            `json:"ebtPerEbit"`
	EffectiveTaxRate                        float64            `json:"effectiveTaxRate"`
	EnterpriseValueMultiple                 float64            `json:"enterpriseValueMultiple"`
	FinancialLeverageRatio                  float64            `json:"financialLeverageRatio"`
	FiscalYear                              string             `json:"fiscalYear"`
	FixedAssetTurnover                      float64            `json:"fixedAssetTurnover"`
	ForwardPriceToEarningsGrowthRatio       float64            `json:"forwardPriceToEarningsGrowthRatio"`
	FreeCashFlowOperatingCashFlowRatio      float64            `json:"freeCashFlowOperatingCashFlowRatio"`
	FreeCashFlowPerShare                    float64            `json:"freeCashFlowPerShare"`
	GrossProfitMargin                       float64            `json:"grossProfitMargin"`
	InterestCoverageRatio                   float64            `json:"interestCoverageRatio"`
	InterestDebtPerShare                    float64            `json:"interestDebtPerShare"`
	InventoryTurnover                       float64            `json:"inventoryTurnover"`
	LongTermDebtToCapitalRatio              float64            `json:"longTermDebtToCapitalRatio"`
	NetIncomePerEBT                         float64            `json:"netIncomePerEBT"`
	NetIncomePerShare                       float64            `json:"netIncomePerShare"`
	NetProfitMargin                         float64            `json:"netProfitMargin"`
	OperatingCashFlowCoverageRatio          float64            `json:"operatingCashFlowCoverageRatio"`
	OperatingCashFlowPerShare               float64            `json:"operatingCashFlowPerShare"`
	OperatingCashFlowRatio                  float64            `json:"operatingCashFlowRatio"`
	OperatingCashFlowSalesRatio             float64            `json:"operatingCashFlowSalesRatio"`
	OperatingProfitMargin                   float64            `json:"operatingProfitMargin"`
	PayablesTurnover                        float64            `json:"payablesTurnover"`
	Period                                  string             `json:"period"`
	PretaxProfitMargin                      float64            `json:"pretaxProfitMargin"`
	PriceToBookRatio                        float64            `json:"priceToBookRatio"`
	PriceToEarningsGrowthRatio              float64            `json:"priceToEarningsGrowthRatio"`
	PriceToEarningsRatio                    float64            `json:"priceToEarningsRatio"`
	PriceToFairValue                        float64            `json:"priceToFairValue"`
	PriceToFreeCashFlowRatio                float64            `json:"priceToFreeCashFlowRatio"`
	PriceToOperatingCashFlowRatio           float64            `json:"priceToOperatingCashFlowRatio"`
	PriceToSalesRatio                       float64            `json:"priceToSalesRatio"`
	QuickRatio                              float64            `json:"quickRatio"`
	ReceivablesTurnover                     float64            `json:"receivablesTurnover"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	RevenuePerShare                         float64            `json:"revenuePerShare"`
	ShareholdersEquityPerShare              float64            `json:"shareholdersEquityPerShare"`
	ShortTermOperatingCashFlowCoverageRatio float64            `json:"shortTermOperatingCashFlowCoverageRatio"`
	SolvencyRatio                           float64            `json:"solvencyRatio"`
	Symbol                                  string             `json:"symbol"`
	TangibleBookValuePerShare               float64            `json:"tangibleBookValuePerShare"`
	WorkingCapitalTurnoverRatio             float64            `json:"workingCapitalTurnoverRatio"`
}

// FullCandle defines model for FullCandle.
type FullCandle struct {
	Change        float64            `json:"change"`
	ChangePercent float64            `json:"changePercent"`
	Close         float64            `json:"close"`
	Date          openapi_types.Date `json:"date"`
	High          float64            `json:"high"`
	Low           float64            `json:"low"`
	Open          float64            `json:"open"`
	Symbol        string             `json:"symbol"`
	Volume        float64            `json:"volume"`
	Vwap          float64            `json:"vwap"`
}

// FullQuote defines model for FullQuote.
type FullQuote struct {
	Change           float64 `json:"change"`
	ChangePercentage float64 `json:"changePercentage"`
	DayHigh          float64 `json:"dayHigh"`
	DayLow           float64 `json:"dayLow"`
	Exchange         string  `json:"exchange"`
	MarketCap        float64 `json:"marketCap"`
	Name             string  `json:"name"`
	Open             float64 `json:"open"`
	PreviousClose    float64 `json:"previousClose"`
	Price            float64 `json:"price"`
	PriceAvg200      float64 `json:"priceAvg200"`
	PriceAvg50       float64 `json:"priceAvg50"`
	Symbol           string  `json:"symbol"`
	Timestamp        int     `json:"timestamp"`
	Volume           float64 `json:"volume"`
	YearHigh         float64 `json:"yearHigh"`
	YearLow          float64 `json:"yearLow"`
}

// GradeNews defines model for GradeNews.
type GradeNews struct {
	Action          string    `json:"action"`
	GradingCompany  string    `json:"gradingCompany"`
	NewGrade        string    `json:"newGrade"`
	NewsBaseURL     string    `json:"newsBaseURL"`
	NewsPublisher   string    `json:"newsPublisher"`
	NewsTitle       string    `json:"newsTitle"`
	NewsURL         string    `json:"newsURL"`
	PreviousGrade   string    `json:"previousGrade"`
	PriceWhenPosted float32   `json:"priceWhenPosted"`
	PublishedDate   time.Time `json:"publishedDate"`
	Symbol          string    `json:"symbol"`
}

// IncomeStatement defines model for IncomeStatement.
type IncomeStatement struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// IncomeStatementTTM defines model for IncomeStatementTTM.
type IncomeStatementTTM struct {
	AcceptedDate                            string             `json:"acceptedDate"`
	BottomLineNetIncome                     float64            `json:"bottomLineNetIncome"`
	Cik                                     string             `json:"cik"`
	CostAndExpenses                         float64            `json:"costAndExpenses"`
	CostOfRevenue                           float64            `json:"costOfRevenue"`
	Date                                    openapi_types.Date `json:"date"`
	DepreciationAndAmortization             float64            `json:"depreciationAndAmortization"`
	Ebit                                    float64            `json:"ebit"`
	Ebitda                                  float64            `json:"ebitda"`
	Eps                                     float64            `json:"eps"`
	EpsDiluted                              float64            `json:"epsDiluted"`
	FilingDate                              openapi_types.Date `json:"filingDate"`
	FiscalYear                              string             `json:"fiscalYear"`
	GeneralAndAdministrativeExpenses        float64            `json:"generalAndAdministrativeExpenses"`
	GrossProfit                             float64            `json:"grossProfit"`
	IncomeBeforeTax                         float64            `json:"incomeBeforeTax"`
	IncomeTaxExpense                        float64            `json:"incomeTaxExpense"`
	InterestExpense                         float64            `json:"interestExpense"`
	InterestIncome                          float64            `json:"interestIncome"`
	NetIncome                               float64            `json:"netIncome"`
	NetIncomeDeductions                     float64            `json:"netIncomeDeductions"`
	NetIncomeFromContinuingOperations       float64            `json:"netIncomeFromContinuingOperations"`
	NetIncomeFromDiscontinuedOperations     float64            `json:"netIncomeFromDiscontinuedOperations"`
	NetInterestIncome                       float64            `json:"netInterestIncome"`
	NonOperatingIncomeExcludingInterest     float64            `json:"nonOperatingIncomeExcludingInterest"`
	OperatingExpenses                       float64            `json:"operatingExpenses"`
	OperatingIncome                         float64            `json:"operatingIncome"`
	OtherAdjustmentsToNetIncome             float64            `json:"otherAdjustmentsToNetIncome"`
	OtherExpenses                           float64            `json:"otherExpenses"`
	Period                                  string             `json:"period"`
	ReportedCurrency                        string             `json:"reportedCurrency"`
	ResearchAndDevelopmentExpenses          float64            `json:"researchAndDevelopmentExpenses"`
	Revenue                                 float64            `json:"revenue"`
	SellingAndMarketingExpenses             float64            `json:"sellingAndMarketingExpenses"`
	SellingGeneralAndAdministrativeExpenses float64            `json:"sellingGeneralAndAdministrativeExpenses"`
	Symbol                                  string             `json:"symbol"`
	TotalOtherIncomeExpensesNet             float64            `json:"totalOtherIncomeExpensesNet"`
	WeightedAverageShsOut                   float64            `json:"weightedAverageShsOut"`
	WeightedAverageShsOutDil                float64            `json:"weightedAverageShsOutDil"`
}

// InsiderTransaction defines model for InsiderTransaction.
type InsiderTransaction struct {
	AcquisitionOrDisposition string             `json:"acquisitionOrDisposition"`
	CompanyCik               string             `json:"companyCik"`
	DirectOrIndirect         string             `json:"directOrIndirect"`
	FilingDate               openapi_types.Date `json:"filingDate"`
	FormType                 string             `json:"formType"`
	Price                    float32            `json:"price"`
	ReportingCik             string             `json:"reportingCik"`
	ReportingName            string             `json:"reportingName"`
	SecuritiesOwned          int                `json:"securitiesOwned"`
	SecuritiesTransacted     int                `json:"securitiesTransacted"`
	SecurityName             string             `json:"securityName"`
	Symbol                   string             `json:"symbol"`
	TransactionDate          openapi_types.Date `json:"transactionDate"`
	TransactionType          string             `json:"transactionType"`
	TypeOfOwner              string             `json:"typeOfOwner"`
	Url                      string             `json:"url"`
}

// KeyMetrics defines model for KeyMetrics.
type KeyMetrics struct {
	AverageInventory                       float64            `json:"averageInventory"`
	AveragePayables                        float64            `json:"averagePayables"`
	AverageReceivables                     float64            `json:"averageReceivables"`
	CapexToDepreciation                    float64            `json:"capexToDepreciation"`
	CapexToOperatingCashFlow               float64            `json:"capexToOperatingCashFlow"`
	CapexToRevenue                         float64            `json:"capexToRevenue"`
	CashConversionCycle                    float64            `json:"cashConversionCycle"`
	CurrentRatio                           float64            `json:"currentRatio"`
	Date                                   openapi_types.Date `json:"date"`
	DaysOfInventoryOutstanding             float64            `json:"daysOfInventoryOutstanding"`
	DaysOfPayablesOutstanding              float64            `json:"daysOfPayablesOutstanding"`
	DaysOfSalesOutstanding                 float64            `json:"daysOfSalesOutstanding"`
	EarningsYield                          float64            `json:"earningsYield"`
	EnterpriseValue                        float64            `json:"enterpriseValue"`
	EvToEBITDA                             float64            `json:"evToEBITDA"`
	EvToFreeCashFlow                       float64            `json:"evToFreeCashFlow"`
	EvToOperatingCashFlow                  float64            `json:"evToOperatingCashFlow"`
	EvToSales                              float64            `json:"evToSales"`
	FiscalYear                             string             `json:"fiscalYear"`
	FreeCashFlowToEquity                   float64            `json:"freeCashFlowToEquity"`
	FreeCashFlowToFirm                     float64            `json:"freeCashFlowToFirm"`
	FreeCashFlowYield                      float64            `json:"freeCashFlowYield"`
	GrahamNetNet                           float64            `json:"grahamNetNet"`
	GrahamNumber                           float64            `json:"grahamNumber"`
	IncomeQuality                          float64            `json:"incomeQuality"`
	IntangiblesToTotalAssets               float64            `json:"intangiblesToTotalAssets"`
	InterestBurden                         float64            `json:"interestBurden"`
	InvestedCapital                        float64            `json:"investedCapital"`
	MarketCap                              float64            `json:"marketCap"`
	NetCurrentAssetValue                   float64            `json:"netCurrentAssetValue"`
	NetDebtToEBITDA                        float64            `json:"netDebtToEBITDA"`
	OperatingCycle                         float64            `json:"operatingCycle"`
	OperatingReturnOnAssets                float64            `json:"operatingReturnOnAssets"`
	Period                                 string             `json:"period"`
	ReportedCurrency                       string             `json:"reportedCurrency"`
	ResearchAndDevelopementToRevenue       float64            `json:"researchAndDevelopementToRevenue"`
	ReturnOnAssets                         float64            `json:"returnOnAssets"`
	ReturnOnCapitalEmployed                float64            `json:"returnOnCapitalEmployed"`
	ReturnOnEquity                         float64            `json:"returnOnEquity"`
	ReturnOnInvestedCapital                float64            `json:"returnOnInvestedCapital"`
	ReturnOnTangibleAssets                 float64            `json:"returnOnTangibleAssets"`
	SalesGeneralAndAdministrativeToRevenue float64            `json:"salesGeneralAndAdministrativeToRevenue"`
	StockBasedCompensationToRevenue        float64            `json:"stockBasedCompensationToRevenue"`
	Symbol                                 string             `json:"symbol"`
	TangibleAssetValue                     float64            `json:"tangibleAssetValue"`
	TaxBurden                              float64            `json:"taxBurden"`
	WorkingCapital                         float64            `json:"workingCapital"`
}

// KeyMetricsTTM defines model for KeyMetricsTTM.
type KeyMetricsTTM struct {
	AverageInventoryTTM                       float64  `json:"averageInventoryTTM"`
	AveragePayablesTTM                        float64  `json:"averagePayablesTTM"`
	AverageReceivablesTTM                     float64  `json:"averageReceivablesTTM"`
	CapexToDepreciationTTM                    float64  `json:"capexToDepreciationTTM"`
	CapexToOperatingCashFlowTTM               float64  `json:"capexToOperatingCashFlowTTM"`
	CapexToRevenueTTM                         float64  `json:"capexToRevenueTTM"`
	CashConversionCycleTTM                    float64  `json:"cashConversionCycleTTM"`
	CurrentRatioTTM                           float64  `json:"currentRatioTTM"`
	DaysOfInventoryOutstandingTTM             float64  `json:"daysOfInventoryOutstandingTTM"`
	DaysOfPayablesOutstandingTTM              float64  `json:"daysOfPayablesOutstandingTTM"`
	DaysOfSalesOutstandingTTM                 float64  `json:"daysOfSalesOutstandingTTM"`
	EarningsYieldTTM                          float64  `json:"earningsYieldTTM"`
	EnterpriseValueTTM                        float64  `json:"enterpriseValueTTM"`
	EvToEBITDATTM                             float64  `json:"evToEBITDATTM"`
	EvToFreeCashFlowTTM                       float64  `json:"evToFreeCashFlowTTM"`
	EvToOperatingCashFlowTTM                  float64  `json:"evToOperatingCashFlowTTM"`
	EvToSalesTTM                              float64  `json:"evToSalesTTM"`
	FreeCashFlowToEquityTTM                   float64  `json:"freeCashFlowToEquityTTM"`
	FreeCashFlowToFirmTTM                     float64  `json:"freeCashFlowToFirmTTM"`
	FreeCashFlowYieldTTM                      float64  `json:"freeCashFlowYieldTTM"`
	GrahamNetNetTTM                           float64  `json:"grahamNetNetTTM"`
	GrahamNumberTTM                           float64  `json:"grahamNumberTTM"`
	IncomeQualityTTM                          float64  `json:"incomeQualityTTM"`
	IntangiblesToTotalAssetsTTM               float64  `json:"intangiblesToTotalAssetsTTM"`
	InterestBurdenTTM                         float64  `json:"interestBurdenTTM"`
	InvestedCapitalTTM                        float64  `json:"investedCapitalTTM"`
	MarketCap                                 *float64 `json:"marketCap,omitempty"`
	NetCurrentAssetValueTTM                   float64  `json:"netCurrentAssetValueTTM"`
	NetDebtToEBITDATTM                        float64  `json:"netDebtToEBITDATTM"`
	OperatingCycleTTM                         float64  `json:"operatingCycleTTM"`
	OperatingReturnOnAssetsTTM                float64  `json:"operatingReturnOnAssetsTTM"`
	ResearchAndDevelopementToRevenueTTM       float64  `json:"researchAndDevelopementToRevenueTTM"`
	ReturnOnAssetsTTM                         float64  `json:"returnOnAssetsTTM"`
	ReturnOnCapitalEmployedTTM                float64  `json:"returnOnCapitalEmployedTTM"`
	ReturnOnEquityTTM                         float64  `json:"returnOnEquityTTM"`
	ReturnOnInvestedCapitalTTM                float64  `json:"returnOnInvestedCapitalTTM"`
	ReturnOnTangibleAssetsTTM                 float64  `json:"returnOnTangibleAssetsTTM"`
	SalesGeneralAndAdministrativeToRevenueTTM float64  `json:"salesGeneralAndAdministrativeToRevenueTTM"`
	StockBasedCompensationToRevenueTTM        float64  `json:"stockBasedCompensationToRevenueTTM"`
	Symbol                                    string   `json:"symbol"`
	TangibleAssetValueTTM                     float64  `json:"tangibleAssetValueTTM"`
	TaxBurdenTTM                              float64  `json:"taxBurdenTTM"`
	WorkingCapitalTTM                         float64  `json:"workingCapitalTTM"`
}

// LightCandle defines model for LightCandle.
type LightCandle struct {
	Date   openapi_types.Date `json:"date"`
	Price  float32            `json:"price"`
	Symbol string             `json:"symbol"`
	Volume int                `json:"volume"`
}

// NewsArticle defines model for NewsArticle.
type NewsArticle struct {
	Image         string    `json:"image"`
	PublishedDate time.Time `json:"publishedDate"`
	Publisher     string    `json:"publisher"`
	Site          string    `json:"site"`
	Symbol        string    `json:"symbol"`
	Text          string    `json:"text"`
	Title         string    `json:"title"`
	Url           string    `json:"url"`
}

// Period Reporting period
type Period string

// RatingSnapshot defines model for RatingSnapshot.
type RatingSnapshot struct {
	DebtToEquityScore       int    `json:"debtToEquityScore"`
	DiscountedCashFlowScore int    `json:"discountedCashFlowScore"`
	OverallScore            int    `json:"overallScore"`
	PriceToBookScore        int    `json:"priceToBookScore"`
	PriceToEarningsScore    int    `json:"priceToEarningsScore"`
	Rating                  string `json:"rating"`
	ReturnOnAssetsScore     int    `json:"returnOnAssetsScore"`
	ReturnOnEquityScore     int    `json:"returnOnEquityScore"`
	Symbol                  string `json:"symbol"`
}

// RatiosTTM defines model for RatiosTTM.
type RatiosTTM struct {
	AssetTurnoverTTM                           float64 `json:"assetTurnoverTTM"`
	BookValuePerShareTTM                       float64 `json:"bookValuePerShareTTM"`
	BottomLineProfitMarginTTM                  float64 `json:"bottomLineProfitMarginTTM"`
	CapexPerShareTTM                           float64 `json:"capexPerShareTTM"`
	CapitalExpenditureCoverageRatioTTM         float64 `json:"capitalExpenditureCoverageRatioTTM"`
	CashPerShareTTM                            float64 `json:"cashPerShareTTM"`
	CashRatioTTM                               float64 `json:"cashRatioTTM"`
	ContinuousOperationsProfitMarginTTM        float64 `json:"continuousOperationsProfitMarginTTM"`
	CurrentRatioTTM                            float64 `json:"currentRatioTTM"`
	DebtServiceCoverageRatioTTM                float64 `json:"debtServiceCoverageRatioTTM"`
	DebtToAssetsRatioTTM                       float64 `json:"debtToAssetsRatioTTM"`
	DebtToCapitalRatioTTM                      float64 `json:"debtToCapitalRatioTTM"`
	DebtToEquityRatioTTM                       float64 `json:"debtToEquityRatioTTM"`
	DebtToMarketCapTTM                         float64 `json:"debtToMarketCapTTM"`
	DividendPaidAndCapexCoverageRatioTTM       float64 `json:"dividendPaidAndCapexCoverageRatioTTM"`
	DividendPayoutRatioTTM                     float64 `json:"dividendPayoutRatioTTM"`
	DividendYieldTTM                           float64 `json:"dividendYieldTTM"`
	EbitMarginTTM                              float64 `json:"ebitMarginTTM"`
	EbitdaMarginTTM                            float64 `json:"ebitdaMarginTTM"`
	EbtPerEbitTTM                              float64 `json:"ebtPerEbitTTM"`
	EffectiveTaxRateTTM                        float64 `json:"effectiveTaxRateTTM"`
	EnterpriseValueMultipleTTM                 float64 `json:"enterpriseValueMultipleTTM"`
	EnterpriseValueTTM                         float64 `json:"enterpriseValueTTM"`
	FinancialLeverageRatioTTM                  float64 `json:"financialLeverageRatioTTM"`
	FixedAssetTurnoverTTM                      float64 `json:"fixedAssetTurnoverTTM"`
	ForwardPriceToEarningsGrowthRatioTTM       float64 `json:"forwardPriceToEarningsGrowthRatioTTM"`
	FreeCashFlowOperatingCashFlowRatioTTM      float64 `json:"freeCashFlowOperatingCashFlowRatioTTM"`
	FreeCashFlowPerShareTTM                    float64 `json:"freeCashFlowPerShareTTM"`
	GrossProfitMarginTTM                       float64 `json:"grossProfitMarginTTM"`
	InterestCoverageRatioTTM                   float64 `json:"interestCoverageRatioTTM"`
	InterestDebtPerShareTTM                    float64 `json:"interestDebtPerShareTTM"`
	InventoryTurnoverTTM                       float64 `json:"inventoryTurnoverTTM"`
	LongTermDebtToCapitalRatioTTM              float64 `json:"longTermDebtToCapitalRatioTTM"`
	NetIncomePerEBTTTM                         float64 `json:"netIncomePerEBTTTM"`
	NetIncomePerShareTTM                       float64 `json:"netIncomePerShareTTM"`
	NetProfitMarginTTM                         float64 `json:"netProfitMarginTTM"`
	OperatingCashFlowCoverageRatioTTM          float64 `json:"operatingCashFlowCoverageRatioTTM"`
	OperatingCashFlowPerShareTTM               float64 `json:"operatingCashFlowPerShareTTM"`
	OperatingCashFlowRatioTTM                  float64 `json:"operatingCashFlowRatioTTM"`
	OperatingCashFlowSalesRatioTTM             float64 `json:"operatingCashFlowSalesRatioTTM"`
	OperatingProfitMarginTTM                   float64 `json:"operatingProfitMarginTTM"`
	PayablesTurnoverTTM                        float64 `json:"payablesTurnoverTTM"`
	PretaxProfitMarginTTM                      float64 `json:"pretaxProfitMarginTTM"`
	PriceToBookRatioTTM                        float64 `json:"priceToBookRatioTTM"`
	PriceToEarningsGrowthRatioTTM              float64 `json:"priceToEarningsGrowthRatioTTM"`
	PriceToEarningsRatioTTM                    float64 `json:"priceToEarningsRatioTTM"`
	PriceToFairValueTTM                        float64 `json:"priceToFairValueTTM"`
	PriceToFreeCashFlowRatioTTM                float64 `json:"priceToFreeCashFlowRatioTTM"`
	PriceToOperatingCashFlowRatioTTM           float64 `json:"priceToOperatingCashFlowRatioTTM"`
	PriceToSalesRatioTTM                       float64 `json:"priceToSalesRatioTTM"`
	QuickRatioTTM                              float64 `json:"quickRatioTTM"`
	ReceivablesTurnoverTTM                     float64 `json:"receivablesTurnoverTTM"`
	RevenuePerShareTTM                         float64 `json:"revenuePerShareTTM"`
	ShareholdersEquityPerShareTTM              float64 `json:"shareholdersEquityPerShareTTM"`
	ShortTermOperatingCashFlowCoverageRatioTTM float64 `json:"shortTermOperatingCashFlowCoverageRatioTTM"`
	SolvencyRatioTTM                           float64 `json:"solvencyRatioTTM"`
	Symbol                                     string  `json:"symbol"`
	TangibleBookValuePerShareTTM               float64 `json:"tangibleBookValuePerShareTTM"`
	WorkingCapitalTurnoverRatioTTM             float64 `json:"workingCapitalTurnoverRatioTTM"`
}

// RevenueSegmentation defines model for RevenueSegmentation.
type RevenueSegmentation struct {
	Data             map[string]float32 `json:"data"`
	Date             openapi_types.Date `json:"date"`
	FiscalYear       int                `json:"fiscalYear"`
	Period           string             `json:"period"`
	ReportedCurrency *string            `json:"reportedCurrency"`
	Symbol           string             `json:"symbol"`
}

// SearchSymbol defines model for SearchSymbol.
type SearchSymbol struct {
	Currency         string `json:"currency"`
	Exchange         string `json:"exchange"`
	ExchangeFullName string `json:"exchangeFullName"`
	Name             string `json:"name"`
	Symbol           string `json:"symbol"`
}

// ShortQuote defines model for ShortQuote.
type ShortQuote struct {
	Change float64 `json:"change"`
	Price  float64 `json:"price"`
	Symbol string  `json:"symbol"`
	Volume int     `json:"volume"`
}

// SplitEvent defines model for SplitEvent.
type SplitEvent struct {
	Date        openapi_types.Date `json:"date"`
	Denominator float64            `json:"denominator"`
	Numerator   float64            `json:"numerator"`
	Symbol      string             `json:"symbol"`
}

// TreasuryRates defines model for TreasuryRates.
type TreasuryRates struct {
	Date   openapi_types.Date `json:"date"`
	Month1 float64            `json:"month1"`
	Month2 float64            `json:"month2"`
	Month3 float64            `json:"month3"`
	Month6 float64            `json:"month6"`
	Year1  float64            `json:"year1"`
	Year10 float64            `json:"year10"`
	Year2  float64            `json:"year2"`
	Year20 float64            `json:"year20"`
	Year3  float64            `json:"year3"`
	Year30 float64            `json:"year30"`
	Year5  float64            `json:"year5"`
	Year7  float64            `json:"year7"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse map[string]interface{}

// ProfileGetResponse defines model for ProfileGetResponse.
type ProfileGetResponse = []CompanyProfile

// AnalystEstimatesGetParams defines parameters for AnalystEstimatesGet.
type AnalystEstimatesGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Period Period `form:"period" json:"period"`
	Page   *int   `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BalanceSheetStatementGetParams defines parameters for BalanceSheetStatementGet.
type BalanceSheetStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// BalanceSheetStatementTTMGetParams defines parameters for BalanceSheetStatementTTMGet.
type BalanceSheetStatementTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// BatchQuoteGetParams defines parameters for BatchQuoteGet.
type BatchQuoteGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// BatchQuoteShortGetParams defines parameters for BatchQuoteShortGet.
type BatchQuoteShortGetParams struct {
	Symbols string `form:"symbols" json:"symbols"`
}

// CashFlowStatementGetParams defines parameters for CashFlowStatementGet.
type CashFlowStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// CashFlowStatementTTMGetParams defines parameters for CashFlowStatementTTMGet.
type CashFlowStatementTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// DividendsGetParams defines parameters for DividendsGet.
type DividendsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// DividendsCalendarGetParams defines parameters for DividendsCalendarGet.
type DividendsCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EarningsGetParams defines parameters for EarningsGet.
type EarningsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEarningsCalendarParams defines parameters for GetEarningsCalendar.
type GetEarningsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EconomicCalendarGetParams defines parameters for EconomicCalendarGet.
type EconomicCalendarGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// EnterpriseValueGetParams defines parameters for EnterpriseValueGet.
type EnterpriseValueGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgDisclosuresGetParams defines parameters for EsgDisclosuresGet.
type EsgDisclosuresGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// EsgRatingsGetParams defines parameters for EsgRatingsGet.
type EsgRatingsGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GradesLatestNewsGetParams defines parameters for GradesLatestNewsGet.
type GradesLatestNewsGetParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// HistoricalPriceEodFullGetParams defines parameters for HistoricalPriceEodFullGet.
type HistoricalPriceEodFullGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// HistoricalPriceEodLightGetParams defines parameters for HistoricalPriceEodLightGet.
type HistoricalPriceEodLightGetParams struct {
	Symbol string              `form:"symbol" json:"symbol"`
	From   *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To     *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// IncomeStatementGetParams defines parameters for IncomeStatementGet.
type IncomeStatementGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// IncomeStatementTTMGetParams defines parameters for IncomeStatementTTMGet.
type IncomeStatementTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingLatestGetParams defines parameters for InsiderTradingLatestGet.
type InsiderTradingLatestGetParams struct {
	Date  *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// InsiderTradingSearchGetParams defines parameters for InsiderTradingSearchGet.
type InsiderTradingSearchGetParams struct {
	Symbol          string  `form:"symbol" json:"symbol"`
	Page            *int    `form:"page,omitempty" json:"page,omitempty"`
	Limit           *int    `form:"limit,omitempty" json:"limit,omitempty"`
	ReportingCik    *string `form:"reportingCik,omitempty" json:"reportingCik,omitempty"`
	TransactionType *string `form:"transactionType,omitempty" json:"transactionType,omitempty"`
}

// KeyMetricsGetParams defines parameters for KeyMetricsGet.
type KeyMetricsGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// KeyMetricsTTMGetParams defines parameters for KeyMetricsTTMGet.
type KeyMetricsTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationGetParams defines parameters for MarketCapitalizationGet.
type MarketCapitalizationGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// MarketCapitalizationBatchGetParams defines parameters for MarketCapitalizationBatchGet.
type MarketCapitalizationBatchGetParams struct {
	// Symbols Array of symbols to fetch market capitalization data for
	Symbols string `form:"symbols" json:"symbols"`
}

// NewsGeneralLatestGetParams defines parameters for NewsGeneralLatestGet.
type NewsGeneralLatestGetParams struct {
	From  *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To    *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
	Page  *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit *int                `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProfileGetParams defines parameters for ProfileGet.
type ProfileGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteGetParams defines parameters for QuoteGet.
type QuoteGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// QuoteShortGetParams defines parameters for QuoteShortGet.
type QuoteShortGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RatingsSnapshotGetParams defines parameters for RatingsSnapshotGet.
type RatingsSnapshotGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// RatiosGetParams defines parameters for RatiosGet.
type RatiosGetParams struct {
	Symbol string  `form:"symbol" json:"symbol"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Period *Period `form:"period,omitempty" json:"period,omitempty"`
}

// RatiosTTMGetParams defines parameters for RatiosTTMGet.
type RatiosTTMGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// RevenueGeographicSegmentationGetParams defines parameters for RevenueGeographicSegmentationGet.
type RevenueGeographicSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// RevenueProductSegmentationGetParams defines parameters for RevenueProductSegmentationGet.
type RevenueProductSegmentationGetParams struct {
	Symbol    string  `form:"symbol" json:"symbol"`
	Period    *Period `form:"period,omitempty" json:"period,omitempty"`
	Structure *string `form:"structure,omitempty" json:"structure,omitempty"`
}

// SearchNameGetParams defines parameters for SearchNameGet.
type SearchNameGetParams struct {
	SearchSymbol string  `form:"search-symbol" json:"search-symbol"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange     *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SearchSymbolGetParams defines parameters for SearchSymbolGet.
type SearchSymbolGetParams struct {
	Query    string  `form:"query" json:"query"`
	Limit    *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Exchange *string `form:"exchange,omitempty" json:"exchange,omitempty"`
}

// SharesFloatGetParams defines parameters for SharesFloatGet.
type SharesFloatGetParams struct {
	Symbol string `form:"symbol" json:"symbol"`
}

// GetSplitsParams defines parameters for GetSplits.
type GetSplitsParams struct {
	Symbol string `form:"symbol" json:"symbol"`
	Limit  *int   `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSplitsCalendarParams defines parameters for GetSplitsCalendar.
type GetSplitsCalendarParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

// TreasuryRatesGetParams defines parameters for TreasuryRatesGet.
type TreasuryRatesGetParams struct {
	From *openapi_types.Date `form:"from,omitempty" json:"from,omitempty"`
	To   *openapi_types.Date `form:"to,omitempty" json:"to,omitempty"`
}

type OperationPath string

const (

	// /analyst-estimates
	AnalystEstimatesGetOperationPath OperationPath = "/analyst-estimates"

	// /available-exchanges
	AvailableExchangesGetOperationPath OperationPath = "/available-exchanges"

	// /balance-sheet-statement
	BalanceSheetStatementGetOperationPath OperationPath = "/balance-sheet-statement"

	// /balance-sheet-statement-ttm
	BalanceSheetStatementTTMGetOperationPath OperationPath = "/balance-sheet-statement-ttm"

	// /batch-quote
	BatchQuoteGetOperationPath OperationPath = "/batch-quote"

	// /batch-quote-short
	BatchQuoteShortGetOperationPath OperationPath = "/batch-quote-short"

	// /cash-flow-statement
	CashFlowStatementGetOperationPath OperationPath = "/cash-flow-statement"

	// /cash-flow-statement-ttm
	CashFlowStatementTTMGetOperationPath OperationPath = "/cash-flow-statement-ttm"

	// /dividends
	DividendsGetOperationPath OperationPath = "/dividends"

	// /dividends-calendar
	DividendsCalendarGetOperationPath OperationPath = "/dividends-calendar"

	// /earnings
	EarningsGetOperationPath OperationPath = "/earnings"

	// /earnings-calendar
	GetEarningsCalendarOperationPath OperationPath = "/earnings-calendar"

	// /economic-calendar
	EconomicCalendarGetOperationPath OperationPath = "/economic-calendar"

	// /enterprise-values
	EnterpriseValueGetOperationPath OperationPath = "/enterprise-values"

	// /esg-disclosures
	EsgDisclosuresGetOperationPath OperationPath = "/esg-disclosures"

	// /esg-ratings
	EsgRatingsGetOperationPath OperationPath = "/esg-ratings"

	// /grades-latest-news
	GradesLatestNewsGetOperationPath OperationPath = "/grades-latest-news"

	// /historical-price-eod/full
	HistoricalPriceEodFullGetOperationPath OperationPath = "/historical-price-eod/full"

	// /historical-price-eod/light
	HistoricalPriceEodLightGetOperationPath OperationPath = "/historical-price-eod/light"

	// /income-statement
	IncomeStatementGetOperationPath OperationPath = "/income-statement"

	// /income-statement-ttm
	IncomeStatementTTMGetOperationPath OperationPath = "/income-statement-ttm"

	// /insider-trading/latest
	InsiderTradingLatestGetOperationPath OperationPath = "/insider-trading/latest"

	// /insider-trading/search
	InsiderTradingSearchGetOperationPath OperationPath = "/insider-trading/search"

	// /key-metrics
	KeyMetricsGetOperationPath OperationPath = "/key-metrics"

	// /key-metrics-ttm
	KeyMetricsTTMGetOperationPath OperationPath = "/key-metrics-ttm"

	// /market-capitalization
	MarketCapitalizationGetOperationPath OperationPath = "/market-capitalization"

	// /market-capitalization-batch
	MarketCapitalizationBatchGetOperationPath OperationPath = "/market-capitalization-batch"

	// /news/general-latest
	NewsGeneralLatestGetOperationPath OperationPath = "/news/general-latest"

	// /profile
	ProfileGetOperationPath OperationPath = "/profile"

	// /quote
	QuoteGetOperationPath OperationPath = "/quote"

	// /quote-short
	QuoteShortGetOperationPath OperationPath = "/quote-short"

	// /ratings-snapshot
	RatingsSnapshotGetOperationPath OperationPath = "/ratings-snapshot"

	// /ratios
	RatiosGetOperationPath OperationPath = "/ratios"

	// /ratios-ttm
	RatiosTTMGetOperationPath OperationPath = "/ratios-ttm"

	// /revenue-geographic-segmentation
	RevenueGeographicSegmentationGetOperationPath OperationPath = "/revenue-geographic-segmentation"

	// /revenue-product-segmentation
	RevenueProductSegmentationGetOperationPath OperationPath = "/revenue-product-segmentation"

	// /search-name
	SearchNameGetOperationPath OperationPath = "/search-name"

	// /search-symbol
	SearchSymbolGetOperationPath OperationPath = "/search-symbol"

	// /shares-float
	SharesFloatGetOperationPath OperationPath = "/shares-float"

	// /splits
	GetSplitsOperationPath OperationPath = "/splits"

	// /splits-calendar
	GetSplitsCalendarOperationPath OperationPath = "/splits-calendar"

	// /stock-list
	StockListGetOperationPath OperationPath = "/stock-list"

	// /treasury-rates
	TreasuryRatesGetOperationPath OperationPath = "/treasury-rates"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AnalystEstimatesGet request
	AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailableExchangesGet request
	AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementGet request
	BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalanceSheetStatementTTMGet request
	BalanceSheetStatementTTMGet(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteGet request
	BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchQuoteShortGet request
	BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementGet request
	CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CashFlowStatementTTMGet request
	CashFlowStatementTTMGet(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DividendsGet request
	DividendsGet(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DividendsCalendarGet request
	DividendsCalendarGet(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EarningsGet request
	EarningsGet(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEarningsCalendar request
	GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EconomicCalendarGet request
	EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnterpriseValueGet request
	EnterpriseValueGet(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgDisclosuresGet request
	EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EsgRatingsGet request
	EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GradesLatestNewsGet request
	GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodFullGet request
	HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HistoricalPriceEodLightGet request
	HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementGet request
	IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncomeStatementTTMGet request
	IncomeStatementTTMGet(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingLatestGet request
	InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsiderTradingSearchGet request
	InsiderTradingSearchGet(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsGet request
	KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeyMetricsTTMGet request
	KeyMetricsTTMGet(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationGet request
	MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketCapitalizationBatchGet request
	MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewsGeneralLatestGet request
	NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProfileGet request
	ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteGet request
	QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuoteShortGet request
	QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatingsSnapshotGet request
	RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosGet request
	RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RatiosTTMGet request
	RatiosTTMGet(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueGeographicSegmentationGet request
	RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevenueProductSegmentationGet request
	RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchNameGet request
	SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSymbolGet request
	SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SharesFloatGet request
	SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSplits request
	GetSplits(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSplitsCalendar request
	GetSplitsCalendar(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StockListGet request
	StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TreasuryRatesGet request
	TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AnalystEstimatesGet(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAnalystEstimatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailableExchangesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailableExchangesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementGet(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalanceSheetStatementTTMGet(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalanceSheetStatementTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteGet(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchQuoteShortGet(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementGet(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CashFlowStatementTTMGet(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCashFlowStatementTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DividendsGet(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDividendsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DividendsCalendarGet(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDividendsCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EarningsGet(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEarningsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEarningsCalendar(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEarningsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EconomicCalendarGet(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEconomicCalendarGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnterpriseValueGet(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnterpriseValueGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgDisclosuresGet(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgDisclosuresGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EsgRatingsGet(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEsgRatingsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GradesLatestNewsGet(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGradesLatestNewsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodFullGet(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodFullGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HistoricalPriceEodLightGet(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHistoricalPriceEodLightGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementGet(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncomeStatementTTMGet(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncomeStatementTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingLatestGet(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsiderTradingSearchGet(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsiderTradingSearchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsGet(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeyMetricsTTMGet(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeyMetricsTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationGet(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketCapitalizationBatchGet(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketCapitalizationBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewsGeneralLatestGet(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewsGeneralLatestGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProfileGet(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteGet(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuoteShortGet(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuoteShortGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatingsSnapshotGet(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatingsSnapshotGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosGet(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RatiosTTMGet(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRatiosTTMGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueGeographicSegmentationGet(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueGeographicSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevenueProductSegmentationGet(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevenueProductSegmentationGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchNameGet(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchNameGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSymbolGet(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSymbolGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SharesFloatGet(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSharesFloatGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSplits(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSplitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSplitsCalendar(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSplitsCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StockListGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStockListGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TreasuryRatesGet(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTreasuryRatesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAnalystEstimatesGetRequest generates requests for AnalystEstimatesGet
func NewAnalystEstimatesGetRequest(server string, params *AnalystEstimatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyst-estimates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAvailableExchangesGetRequest generates requests for AvailableExchangesGet
func NewAvailableExchangesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available-exchanges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementGetRequest generates requests for BalanceSheetStatementGet
func NewBalanceSheetStatementGetRequest(server string, params *BalanceSheetStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalanceSheetStatementTTMGetRequest generates requests for BalanceSheetStatementTTMGet
func NewBalanceSheetStatementTTMGetRequest(server string, params *BalanceSheetStatementTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/balance-sheet-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteGetRequest generates requests for BatchQuoteGet
func NewBatchQuoteGetRequest(server string, params *BatchQuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchQuoteShortGetRequest generates requests for BatchQuoteShortGet
func NewBatchQuoteShortGetRequest(server string, params *BatchQuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batch-quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementGetRequest generates requests for CashFlowStatementGet
func NewCashFlowStatementGetRequest(server string, params *CashFlowStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCashFlowStatementTTMGetRequest generates requests for CashFlowStatementTTMGet
func NewCashFlowStatementTTMGetRequest(server string, params *CashFlowStatementTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-flow-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDividendsGetRequest generates requests for DividendsGet
func NewDividendsGetRequest(server string, params *DividendsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDividendsCalendarGetRequest generates requests for DividendsCalendarGet
func NewDividendsCalendarGetRequest(server string, params *DividendsCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dividends-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEarningsGetRequest generates requests for EarningsGet
func NewEarningsGetRequest(server string, params *EarningsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEarningsCalendarRequest generates requests for GetEarningsCalendar
func NewGetEarningsCalendarRequest(server string, params *GetEarningsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/earnings-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEconomicCalendarGetRequest generates requests for EconomicCalendarGet
func NewEconomicCalendarGetRequest(server string, params *EconomicCalendarGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/economic-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnterpriseValueGetRequest generates requests for EnterpriseValueGet
func NewEnterpriseValueGetRequest(server string, params *EnterpriseValueGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/enterprise-values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgDisclosuresGetRequest generates requests for EsgDisclosuresGet
func NewEsgDisclosuresGetRequest(server string, params *EsgDisclosuresGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-disclosures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEsgRatingsGetRequest generates requests for EsgRatingsGet
func NewEsgRatingsGetRequest(server string, params *EsgRatingsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/esg-ratings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGradesLatestNewsGetRequest generates requests for GradesLatestNewsGet
func NewGradesLatestNewsGetRequest(server string, params *GradesLatestNewsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grades-latest-news")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodFullGetRequest generates requests for HistoricalPriceEodFullGet
func NewHistoricalPriceEodFullGetRequest(server string, params *HistoricalPriceEodFullGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/full")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHistoricalPriceEodLightGetRequest generates requests for HistoricalPriceEodLightGet
func NewHistoricalPriceEodLightGetRequest(server string, params *HistoricalPriceEodLightGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/historical-price-eod/light")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementGetRequest generates requests for IncomeStatementGet
func NewIncomeStatementGetRequest(server string, params *IncomeStatementGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncomeStatementTTMGetRequest generates requests for IncomeStatementTTMGet
func NewIncomeStatementTTMGetRequest(server string, params *IncomeStatementTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/income-statement-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingLatestGetRequest generates requests for InsiderTradingLatestGet
func NewInsiderTradingLatestGetRequest(server string, params *InsiderTradingLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsiderTradingSearchGetRequest generates requests for InsiderTradingSearchGet
func NewInsiderTradingSearchGetRequest(server string, params *InsiderTradingSearchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/insider-trading/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReportingCik != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reportingCik", runtime.ParamLocationQuery, *params.ReportingCik); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transactionType", runtime.ParamLocationQuery, *params.TransactionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsGetRequest generates requests for KeyMetricsGet
func NewKeyMetricsGetRequest(server string, params *KeyMetricsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeyMetricsTTMGetRequest generates requests for KeyMetricsTTMGet
func NewKeyMetricsTTMGetRequest(server string, params *KeyMetricsTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/key-metrics-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationGetRequest generates requests for MarketCapitalizationGet
func NewMarketCapitalizationGetRequest(server string, params *MarketCapitalizationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketCapitalizationBatchGetRequest generates requests for MarketCapitalizationBatchGet
func NewMarketCapitalizationBatchGetRequest(server string, params *MarketCapitalizationBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/market-capitalization-batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbols", runtime.ParamLocationQuery, params.Symbols); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNewsGeneralLatestGetRequest generates requests for NewsGeneralLatestGet
func NewNewsGeneralLatestGetRequest(server string, params *NewsGeneralLatestGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/news/general-latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProfileGetRequest generates requests for ProfileGet
func NewProfileGetRequest(server string, params *ProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteGetRequest generates requests for QuoteGet
func NewQuoteGetRequest(server string, params *QuoteGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuoteShortGetRequest generates requests for QuoteShortGet
func NewQuoteShortGetRequest(server string, params *QuoteShortGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/quote-short")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatingsSnapshotGetRequest generates requests for RatingsSnapshotGet
func NewRatingsSnapshotGetRequest(server string, params *RatingsSnapshotGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratings-snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosGetRequest generates requests for RatiosGet
func NewRatiosGetRequest(server string, params *RatiosGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRatiosTTMGetRequest generates requests for RatiosTTMGet
func NewRatiosTTMGetRequest(server string, params *RatiosTTMGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ratios-ttm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueGeographicSegmentationGetRequest generates requests for RevenueGeographicSegmentationGet
func NewRevenueGeographicSegmentationGetRequest(server string, params *RevenueGeographicSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-geographic-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevenueProductSegmentationGetRequest generates requests for RevenueProductSegmentationGet
func NewRevenueProductSegmentationGetRequest(server string, params *RevenueProductSegmentationGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenue-product-segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Period != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, *params.Period); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Structure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "structure", runtime.ParamLocationQuery, *params.Structure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchNameGetRequest generates requests for SearchNameGet
func NewSearchNameGetRequest(server string, params *SearchNameGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search-symbol", runtime.ParamLocationQuery, params.SearchSymbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSymbolGetRequest generates requests for SearchSymbolGet
func NewSearchSymbolGetRequest(server string, params *SearchSymbolGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search-symbol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exchange != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchange", runtime.ParamLocationQuery, *params.Exchange); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSharesFloatGetRequest generates requests for SharesFloatGet
func NewSharesFloatGetRequest(server string, params *SharesFloatGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shares-float")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSplitsRequest generates requests for GetSplits
func NewGetSplitsRequest(server string, params *GetSplitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/splits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "symbol", runtime.ParamLocationQuery, params.Symbol); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSplitsCalendarRequest generates requests for GetSplitsCalendar
func NewGetSplitsCalendarRequest(server string, params *GetSplitsCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/splits-calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStockListGetRequest generates requests for StockListGet
func NewStockListGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stock-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTreasuryRatesGetRequest generates requests for TreasuryRatesGet
func NewTreasuryRatesGetRequest(server string, params *TreasuryRatesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/treasury-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AnalystEstimatesGetWithResponse request
	AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error)

	// AvailableExchangesGetWithResponse request
	AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error)

	// BalanceSheetStatementGetWithResponse request
	BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error)

	// BalanceSheetStatementTTMGetWithResponse request
	BalanceSheetStatementTTMGetWithResponse(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTTMGetClientResponse, error)

	// BatchQuoteGetWithResponse request
	BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error)

	// BatchQuoteShortGetWithResponse request
	BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error)

	// CashFlowStatementGetWithResponse request
	CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error)

	// CashFlowStatementTTMGetWithResponse request
	CashFlowStatementTTMGetWithResponse(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTTMGetClientResponse, error)

	// DividendsGetWithResponse request
	DividendsGetWithResponse(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*DividendsGetClientResponse, error)

	// DividendsCalendarGetWithResponse request
	DividendsCalendarGetWithResponse(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*DividendsCalendarGetClientResponse, error)

	// EarningsGetWithResponse request
	EarningsGetWithResponse(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*EarningsGetClientResponse, error)

	// GetEarningsCalendarWithResponse request
	GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error)

	// EconomicCalendarGetWithResponse request
	EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error)

	// EnterpriseValueGetWithResponse request
	EnterpriseValueGetWithResponse(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*EnterpriseValueGetClientResponse, error)

	// EsgDisclosuresGetWithResponse request
	EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error)

	// EsgRatingsGetWithResponse request
	EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error)

	// GradesLatestNewsGetWithResponse request
	GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error)

	// HistoricalPriceEodFullGetWithResponse request
	HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error)

	// HistoricalPriceEodLightGetWithResponse request
	HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error)

	// IncomeStatementGetWithResponse request
	IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error)

	// IncomeStatementTTMGetWithResponse request
	IncomeStatementTTMGetWithResponse(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTTMGetClientResponse, error)

	// InsiderTradingLatestGetWithResponse request
	InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error)

	// InsiderTradingSearchGetWithResponse request
	InsiderTradingSearchGetWithResponse(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingSearchGetClientResponse, error)

	// KeyMetricsGetWithResponse request
	KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error)

	// KeyMetricsTTMGetWithResponse request
	KeyMetricsTTMGetWithResponse(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsTTMGetClientResponse, error)

	// MarketCapitalizationGetWithResponse request
	MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error)

	// MarketCapitalizationBatchGetWithResponse request
	MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error)

	// NewsGeneralLatestGetWithResponse request
	NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error)

	// ProfileGetWithResponse request
	ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error)

	// QuoteGetWithResponse request
	QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error)

	// QuoteShortGetWithResponse request
	QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error)

	// RatingsSnapshotGetWithResponse request
	RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error)

	// RatiosGetWithResponse request
	RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error)

	// RatiosTTMGetWithResponse request
	RatiosTTMGetWithResponse(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*RatiosTTMGetClientResponse, error)

	// RevenueGeographicSegmentationGetWithResponse request
	RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error)

	// RevenueProductSegmentationGetWithResponse request
	RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error)

	// SearchNameGetWithResponse request
	SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error)

	// SearchSymbolGetWithResponse request
	SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error)

	// SharesFloatGetWithResponse request
	SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error)

	// GetSplitsWithResponse request
	GetSplitsWithResponse(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*GetSplitsClientResponse, error)

	// GetSplitsCalendarWithResponse request
	GetSplitsCalendarWithResponse(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*GetSplitsCalendarClientResponse, error)

	// StockListGetWithResponse request
	StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error)

	// TreasuryRatesGetWithResponse request
	TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error)
}

type AnalystEstimatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialEstimates
}

// Status returns HTTPResponse.Status
func (r AnalystEstimatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AnalystEstimatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailableExchangesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Exchange
}

// Status returns HTTPResponse.Status
func (r AvailableExchangesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailableExchangesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatement
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalanceSheetStatementTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceSheetStatementTTM
}

// Status returns HTTPResponse.Status
func (r BalanceSheetStatementTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalanceSheetStatementTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchQuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r BatchQuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchQuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatement
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CashFlowStatementTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CashFlowStatementTTM
}

// Status returns HTTPResponse.Status
func (r CashFlowStatementTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CashFlowStatementTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DividendsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r DividendsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DividendsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DividendsCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DividendEvent
}

// Status returns HTTPResponse.Status
func (r DividendsCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DividendsCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EarningsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r EarningsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EarningsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEarningsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EarningEvent
}

// Status returns HTTPResponse.Status
func (r GetEarningsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEarningsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EconomicCalendarGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEvent
}

// Status returns HTTPResponse.Status
func (r EconomicCalendarGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EconomicCalendarGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnterpriseValueGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnterpriseValue
}

// Status returns HTTPResponse.Status
func (r EnterpriseValueGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnterpriseValueGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgDisclosuresGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgDisclosure
}

// Status returns HTTPResponse.Status
func (r EsgDisclosuresGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgDisclosuresGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EsgRatingsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EconomicEsgRating
}

// Status returns HTTPResponse.Status
func (r EsgRatingsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EsgRatingsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GradesLatestNewsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GradeNews
}

// Status returns HTTPResponse.Status
func (r GradesLatestNewsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GradesLatestNewsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodFullGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodFullGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodFullGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HistoricalPriceEodLightGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LightCandle
}

// Status returns HTTPResponse.Status
func (r HistoricalPriceEodLightGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HistoricalPriceEodLightGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatement
}

// Status returns HTTPResponse.Status
func (r IncomeStatementGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncomeStatementTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncomeStatementTTM
}

// Status returns HTTPResponse.Status
func (r IncomeStatementTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncomeStatementTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InsiderTradingSearchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InsiderTransaction
}

// Status returns HTTPResponse.Status
func (r InsiderTradingSearchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsiderTradingSearchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetrics
}

// Status returns HTTPResponse.Status
func (r KeyMetricsGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeyMetricsTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]KeyMetricsTTM
}

// Status returns HTTPResponse.Status
func (r KeyMetricsTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeyMetricsTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketCapitalizationBatchGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanyCapitalization
}

// Status returns HTTPResponse.Status
func (r MarketCapitalizationBatchGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketCapitalizationBatchGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewsGeneralLatestGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsArticle
}

// Status returns HTTPResponse.Status
func (r NewsGeneralLatestGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewsGeneralLatestGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProfileGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGetResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProfileGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProfileGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FullQuote
}

// Status returns HTTPResponse.Status
func (r QuoteGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuoteShortGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ShortQuote
}

// Status returns HTTPResponse.Status
func (r QuoteShortGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuoteShortGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatingsSnapshotGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatingSnapshot
}

// Status returns HTTPResponse.Status
func (r RatingsSnapshotGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatingsSnapshotGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FinancialRatios
}

// Status returns HTTPResponse.Status
func (r RatiosGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RatiosTTMGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RatiosTTM
}

// Status returns HTTPResponse.Status
func (r RatiosTTMGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RatiosTTMGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueGeographicSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueGeographicSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueGeographicSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevenueProductSegmentationGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RevenueSegmentation
}

// Status returns HTTPResponse.Status
func (r RevenueProductSegmentationGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevenueProductSegmentationGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchNameGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchNameGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchNameGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSymbolGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSymbol
}

// Status returns HTTPResponse.Status
func (r SearchSymbolGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSymbolGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SharesFloatGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySharesFloat
}

// Status returns HTTPResponse.Status
func (r SharesFloatGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SharesFloatGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSplitsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitEvent
}

// Status returns HTTPResponse.Status
func (r GetSplitsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSplitsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSplitsCalendarClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SplitEvent
}

// Status returns HTTPResponse.Status
func (r GetSplitsCalendarClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSplitsCalendarClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StockListGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompanySymbol
}

// Status returns HTTPResponse.Status
func (r StockListGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StockListGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TreasuryRatesGetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TreasuryRates
}

// Status returns HTTPResponse.Status
func (r TreasuryRatesGetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TreasuryRatesGetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AnalystEstimatesGetWithResponse request returning *AnalystEstimatesGetClientResponse
func (c *ClientWithResponses) AnalystEstimatesGetWithResponse(ctx context.Context, params *AnalystEstimatesGetParams, reqEditors ...RequestEditorFn) (*AnalystEstimatesGetClientResponse, error) {
	rsp, err := c.AnalystEstimatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAnalystEstimatesGetClientResponse(rsp)
}

// AvailableExchangesGetWithResponse request returning *AvailableExchangesGetClientResponse
func (c *ClientWithResponses) AvailableExchangesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AvailableExchangesGetClientResponse, error) {
	rsp, err := c.AvailableExchangesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailableExchangesGetClientResponse(rsp)
}

// BalanceSheetStatementGetWithResponse request returning *BalanceSheetStatementGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementGetWithResponse(ctx context.Context, params *BalanceSheetStatementGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementGetClientResponse(rsp)
}

// BalanceSheetStatementTTMGetWithResponse request returning *BalanceSheetStatementTTMGetClientResponse
func (c *ClientWithResponses) BalanceSheetStatementTTMGetWithResponse(ctx context.Context, params *BalanceSheetStatementTTMGetParams, reqEditors ...RequestEditorFn) (*BalanceSheetStatementTTMGetClientResponse, error) {
	rsp, err := c.BalanceSheetStatementTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalanceSheetStatementTTMGetClientResponse(rsp)
}

// BatchQuoteGetWithResponse request returning *BatchQuoteGetClientResponse
func (c *ClientWithResponses) BatchQuoteGetWithResponse(ctx context.Context, params *BatchQuoteGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteGetClientResponse, error) {
	rsp, err := c.BatchQuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteGetClientResponse(rsp)
}

// BatchQuoteShortGetWithResponse request returning *BatchQuoteShortGetClientResponse
func (c *ClientWithResponses) BatchQuoteShortGetWithResponse(ctx context.Context, params *BatchQuoteShortGetParams, reqEditors ...RequestEditorFn) (*BatchQuoteShortGetClientResponse, error) {
	rsp, err := c.BatchQuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchQuoteShortGetClientResponse(rsp)
}

// CashFlowStatementGetWithResponse request returning *CashFlowStatementGetClientResponse
func (c *ClientWithResponses) CashFlowStatementGetWithResponse(ctx context.Context, params *CashFlowStatementGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementGetClientResponse, error) {
	rsp, err := c.CashFlowStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementGetClientResponse(rsp)
}

// CashFlowStatementTTMGetWithResponse request returning *CashFlowStatementTTMGetClientResponse
func (c *ClientWithResponses) CashFlowStatementTTMGetWithResponse(ctx context.Context, params *CashFlowStatementTTMGetParams, reqEditors ...RequestEditorFn) (*CashFlowStatementTTMGetClientResponse, error) {
	rsp, err := c.CashFlowStatementTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCashFlowStatementTTMGetClientResponse(rsp)
}

// DividendsGetWithResponse request returning *DividendsGetClientResponse
func (c *ClientWithResponses) DividendsGetWithResponse(ctx context.Context, params *DividendsGetParams, reqEditors ...RequestEditorFn) (*DividendsGetClientResponse, error) {
	rsp, err := c.DividendsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDividendsGetClientResponse(rsp)
}

// DividendsCalendarGetWithResponse request returning *DividendsCalendarGetClientResponse
func (c *ClientWithResponses) DividendsCalendarGetWithResponse(ctx context.Context, params *DividendsCalendarGetParams, reqEditors ...RequestEditorFn) (*DividendsCalendarGetClientResponse, error) {
	rsp, err := c.DividendsCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDividendsCalendarGetClientResponse(rsp)
}

// EarningsGetWithResponse request returning *EarningsGetClientResponse
func (c *ClientWithResponses) EarningsGetWithResponse(ctx context.Context, params *EarningsGetParams, reqEditors ...RequestEditorFn) (*EarningsGetClientResponse, error) {
	rsp, err := c.EarningsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEarningsGetClientResponse(rsp)
}

// GetEarningsCalendarWithResponse request returning *GetEarningsCalendarClientResponse
func (c *ClientWithResponses) GetEarningsCalendarWithResponse(ctx context.Context, params *GetEarningsCalendarParams, reqEditors ...RequestEditorFn) (*GetEarningsCalendarClientResponse, error) {
	rsp, err := c.GetEarningsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEarningsCalendarClientResponse(rsp)
}

// EconomicCalendarGetWithResponse request returning *EconomicCalendarGetClientResponse
func (c *ClientWithResponses) EconomicCalendarGetWithResponse(ctx context.Context, params *EconomicCalendarGetParams, reqEditors ...RequestEditorFn) (*EconomicCalendarGetClientResponse, error) {
	rsp, err := c.EconomicCalendarGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEconomicCalendarGetClientResponse(rsp)
}

// EnterpriseValueGetWithResponse request returning *EnterpriseValueGetClientResponse
func (c *ClientWithResponses) EnterpriseValueGetWithResponse(ctx context.Context, params *EnterpriseValueGetParams, reqEditors ...RequestEditorFn) (*EnterpriseValueGetClientResponse, error) {
	rsp, err := c.EnterpriseValueGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnterpriseValueGetClientResponse(rsp)
}

// EsgDisclosuresGetWithResponse request returning *EsgDisclosuresGetClientResponse
func (c *ClientWithResponses) EsgDisclosuresGetWithResponse(ctx context.Context, params *EsgDisclosuresGetParams, reqEditors ...RequestEditorFn) (*EsgDisclosuresGetClientResponse, error) {
	rsp, err := c.EsgDisclosuresGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgDisclosuresGetClientResponse(rsp)
}

// EsgRatingsGetWithResponse request returning *EsgRatingsGetClientResponse
func (c *ClientWithResponses) EsgRatingsGetWithResponse(ctx context.Context, params *EsgRatingsGetParams, reqEditors ...RequestEditorFn) (*EsgRatingsGetClientResponse, error) {
	rsp, err := c.EsgRatingsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEsgRatingsGetClientResponse(rsp)
}

// GradesLatestNewsGetWithResponse request returning *GradesLatestNewsGetClientResponse
func (c *ClientWithResponses) GradesLatestNewsGetWithResponse(ctx context.Context, params *GradesLatestNewsGetParams, reqEditors ...RequestEditorFn) (*GradesLatestNewsGetClientResponse, error) {
	rsp, err := c.GradesLatestNewsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGradesLatestNewsGetClientResponse(rsp)
}

// HistoricalPriceEodFullGetWithResponse request returning *HistoricalPriceEodFullGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodFullGetWithResponse(ctx context.Context, params *HistoricalPriceEodFullGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodFullGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodFullGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodFullGetClientResponse(rsp)
}

// HistoricalPriceEodLightGetWithResponse request returning *HistoricalPriceEodLightGetClientResponse
func (c *ClientWithResponses) HistoricalPriceEodLightGetWithResponse(ctx context.Context, params *HistoricalPriceEodLightGetParams, reqEditors ...RequestEditorFn) (*HistoricalPriceEodLightGetClientResponse, error) {
	rsp, err := c.HistoricalPriceEodLightGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHistoricalPriceEodLightGetClientResponse(rsp)
}

// IncomeStatementGetWithResponse request returning *IncomeStatementGetClientResponse
func (c *ClientWithResponses) IncomeStatementGetWithResponse(ctx context.Context, params *IncomeStatementGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementGetClientResponse, error) {
	rsp, err := c.IncomeStatementGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementGetClientResponse(rsp)
}

// IncomeStatementTTMGetWithResponse request returning *IncomeStatementTTMGetClientResponse
func (c *ClientWithResponses) IncomeStatementTTMGetWithResponse(ctx context.Context, params *IncomeStatementTTMGetParams, reqEditors ...RequestEditorFn) (*IncomeStatementTTMGetClientResponse, error) {
	rsp, err := c.IncomeStatementTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncomeStatementTTMGetClientResponse(rsp)
}

// InsiderTradingLatestGetWithResponse request returning *InsiderTradingLatestGetClientResponse
func (c *ClientWithResponses) InsiderTradingLatestGetWithResponse(ctx context.Context, params *InsiderTradingLatestGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingLatestGetClientResponse, error) {
	rsp, err := c.InsiderTradingLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingLatestGetClientResponse(rsp)
}

// InsiderTradingSearchGetWithResponse request returning *InsiderTradingSearchGetClientResponse
func (c *ClientWithResponses) InsiderTradingSearchGetWithResponse(ctx context.Context, params *InsiderTradingSearchGetParams, reqEditors ...RequestEditorFn) (*InsiderTradingSearchGetClientResponse, error) {
	rsp, err := c.InsiderTradingSearchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInsiderTradingSearchGetClientResponse(rsp)
}

// KeyMetricsGetWithResponse request returning *KeyMetricsGetClientResponse
func (c *ClientWithResponses) KeyMetricsGetWithResponse(ctx context.Context, params *KeyMetricsGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsGetClientResponse, error) {
	rsp, err := c.KeyMetricsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsGetClientResponse(rsp)
}

// KeyMetricsTTMGetWithResponse request returning *KeyMetricsTTMGetClientResponse
func (c *ClientWithResponses) KeyMetricsTTMGetWithResponse(ctx context.Context, params *KeyMetricsTTMGetParams, reqEditors ...RequestEditorFn) (*KeyMetricsTTMGetClientResponse, error) {
	rsp, err := c.KeyMetricsTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeyMetricsTTMGetClientResponse(rsp)
}

// MarketCapitalizationGetWithResponse request returning *MarketCapitalizationGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationGetWithResponse(ctx context.Context, params *MarketCapitalizationGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationGetClientResponse(rsp)
}

// MarketCapitalizationBatchGetWithResponse request returning *MarketCapitalizationBatchGetClientResponse
func (c *ClientWithResponses) MarketCapitalizationBatchGetWithResponse(ctx context.Context, params *MarketCapitalizationBatchGetParams, reqEditors ...RequestEditorFn) (*MarketCapitalizationBatchGetClientResponse, error) {
	rsp, err := c.MarketCapitalizationBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketCapitalizationBatchGetClientResponse(rsp)
}

// NewsGeneralLatestGetWithResponse request returning *NewsGeneralLatestGetClientResponse
func (c *ClientWithResponses) NewsGeneralLatestGetWithResponse(ctx context.Context, params *NewsGeneralLatestGetParams, reqEditors ...RequestEditorFn) (*NewsGeneralLatestGetClientResponse, error) {
	rsp, err := c.NewsGeneralLatestGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewsGeneralLatestGetClientResponse(rsp)
}

// ProfileGetWithResponse request returning *ProfileGetClientResponse
func (c *ClientWithResponses) ProfileGetWithResponse(ctx context.Context, params *ProfileGetParams, reqEditors ...RequestEditorFn) (*ProfileGetClientResponse, error) {
	rsp, err := c.ProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProfileGetClientResponse(rsp)
}

// QuoteGetWithResponse request returning *QuoteGetClientResponse
func (c *ClientWithResponses) QuoteGetWithResponse(ctx context.Context, params *QuoteGetParams, reqEditors ...RequestEditorFn) (*QuoteGetClientResponse, error) {
	rsp, err := c.QuoteGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteGetClientResponse(rsp)
}

// QuoteShortGetWithResponse request returning *QuoteShortGetClientResponse
func (c *ClientWithResponses) QuoteShortGetWithResponse(ctx context.Context, params *QuoteShortGetParams, reqEditors ...RequestEditorFn) (*QuoteShortGetClientResponse, error) {
	rsp, err := c.QuoteShortGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuoteShortGetClientResponse(rsp)
}

// RatingsSnapshotGetWithResponse request returning *RatingsSnapshotGetClientResponse
func (c *ClientWithResponses) RatingsSnapshotGetWithResponse(ctx context.Context, params *RatingsSnapshotGetParams, reqEditors ...RequestEditorFn) (*RatingsSnapshotGetClientResponse, error) {
	rsp, err := c.RatingsSnapshotGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatingsSnapshotGetClientResponse(rsp)
}

// RatiosGetWithResponse request returning *RatiosGetClientResponse
func (c *ClientWithResponses) RatiosGetWithResponse(ctx context.Context, params *RatiosGetParams, reqEditors ...RequestEditorFn) (*RatiosGetClientResponse, error) {
	rsp, err := c.RatiosGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosGetClientResponse(rsp)
}

// RatiosTTMGetWithResponse request returning *RatiosTTMGetClientResponse
func (c *ClientWithResponses) RatiosTTMGetWithResponse(ctx context.Context, params *RatiosTTMGetParams, reqEditors ...RequestEditorFn) (*RatiosTTMGetClientResponse, error) {
	rsp, err := c.RatiosTTMGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRatiosTTMGetClientResponse(rsp)
}

// RevenueGeographicSegmentationGetWithResponse request returning *RevenueGeographicSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueGeographicSegmentationGetWithResponse(ctx context.Context, params *RevenueGeographicSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueGeographicSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueGeographicSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueGeographicSegmentationGetClientResponse(rsp)
}

// RevenueProductSegmentationGetWithResponse request returning *RevenueProductSegmentationGetClientResponse
func (c *ClientWithResponses) RevenueProductSegmentationGetWithResponse(ctx context.Context, params *RevenueProductSegmentationGetParams, reqEditors ...RequestEditorFn) (*RevenueProductSegmentationGetClientResponse, error) {
	rsp, err := c.RevenueProductSegmentationGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevenueProductSegmentationGetClientResponse(rsp)
}

// SearchNameGetWithResponse request returning *SearchNameGetClientResponse
func (c *ClientWithResponses) SearchNameGetWithResponse(ctx context.Context, params *SearchNameGetParams, reqEditors ...RequestEditorFn) (*SearchNameGetClientResponse, error) {
	rsp, err := c.SearchNameGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchNameGetClientResponse(rsp)
}

// SearchSymbolGetWithResponse request returning *SearchSymbolGetClientResponse
func (c *ClientWithResponses) SearchSymbolGetWithResponse(ctx context.Context, params *SearchSymbolGetParams, reqEditors ...RequestEditorFn) (*SearchSymbolGetClientResponse, error) {
	rsp, err := c.SearchSymbolGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSymbolGetClientResponse(rsp)
}

// SharesFloatGetWithResponse request returning *SharesFloatGetClientResponse
func (c *ClientWithResponses) SharesFloatGetWithResponse(ctx context.Context, params *SharesFloatGetParams, reqEditors ...RequestEditorFn) (*SharesFloatGetClientResponse, error) {
	rsp, err := c.SharesFloatGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSharesFloatGetClientResponse(rsp)
}

// GetSplitsWithResponse request returning *GetSplitsClientResponse
func (c *ClientWithResponses) GetSplitsWithResponse(ctx context.Context, params *GetSplitsParams, reqEditors ...RequestEditorFn) (*GetSplitsClientResponse, error) {
	rsp, err := c.GetSplits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSplitsClientResponse(rsp)
}

// GetSplitsCalendarWithResponse request returning *GetSplitsCalendarClientResponse
func (c *ClientWithResponses) GetSplitsCalendarWithResponse(ctx context.Context, params *GetSplitsCalendarParams, reqEditors ...RequestEditorFn) (*GetSplitsCalendarClientResponse, error) {
	rsp, err := c.GetSplitsCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSplitsCalendarClientResponse(rsp)
}

// StockListGetWithResponse request returning *StockListGetClientResponse
func (c *ClientWithResponses) StockListGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StockListGetClientResponse, error) {
	rsp, err := c.StockListGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStockListGetClientResponse(rsp)
}

// TreasuryRatesGetWithResponse request returning *TreasuryRatesGetClientResponse
func (c *ClientWithResponses) TreasuryRatesGetWithResponse(ctx context.Context, params *TreasuryRatesGetParams, reqEditors ...RequestEditorFn) (*TreasuryRatesGetClientResponse, error) {
	rsp, err := c.TreasuryRatesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTreasuryRatesGetClientResponse(rsp)
}

// ParseAnalystEstimatesGetClientResponse parses an HTTP response from a AnalystEstimatesGetWithResponse call
func ParseAnalystEstimatesGetClientResponse(rsp *http.Response) (*AnalystEstimatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AnalystEstimatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialEstimates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAvailableExchangesGetClientResponse parses an HTTP response from a AvailableExchangesGetWithResponse call
func ParseAvailableExchangesGetClientResponse(rsp *http.Response) (*AvailableExchangesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailableExchangesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Exchange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementGetClientResponse parses an HTTP response from a BalanceSheetStatementGetWithResponse call
func ParseBalanceSheetStatementGetClientResponse(rsp *http.Response) (*BalanceSheetStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalanceSheetStatementTTMGetClientResponse parses an HTTP response from a BalanceSheetStatementTTMGetWithResponse call
func ParseBalanceSheetStatementTTMGetClientResponse(rsp *http.Response) (*BalanceSheetStatementTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalanceSheetStatementTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceSheetStatementTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteGetClientResponse parses an HTTP response from a BatchQuoteGetWithResponse call
func ParseBatchQuoteGetClientResponse(rsp *http.Response) (*BatchQuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchQuoteShortGetClientResponse parses an HTTP response from a BatchQuoteShortGetWithResponse call
func ParseBatchQuoteShortGetClientResponse(rsp *http.Response) (*BatchQuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchQuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementGetClientResponse parses an HTTP response from a CashFlowStatementGetWithResponse call
func ParseCashFlowStatementGetClientResponse(rsp *http.Response) (*CashFlowStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCashFlowStatementTTMGetClientResponse parses an HTTP response from a CashFlowStatementTTMGetWithResponse call
func ParseCashFlowStatementTTMGetClientResponse(rsp *http.Response) (*CashFlowStatementTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CashFlowStatementTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CashFlowStatementTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDividendsGetClientResponse parses an HTTP response from a DividendsGetWithResponse call
func ParseDividendsGetClientResponse(rsp *http.Response) (*DividendsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DividendsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDividendsCalendarGetClientResponse parses an HTTP response from a DividendsCalendarGetWithResponse call
func ParseDividendsCalendarGetClientResponse(rsp *http.Response) (*DividendsCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DividendsCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DividendEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEarningsGetClientResponse parses an HTTP response from a EarningsGetWithResponse call
func ParseEarningsGetClientResponse(rsp *http.Response) (*EarningsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EarningsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEarningsCalendarClientResponse parses an HTTP response from a GetEarningsCalendarWithResponse call
func ParseGetEarningsCalendarClientResponse(rsp *http.Response) (*GetEarningsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEarningsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EarningEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEconomicCalendarGetClientResponse parses an HTTP response from a EconomicCalendarGetWithResponse call
func ParseEconomicCalendarGetClientResponse(rsp *http.Response) (*EconomicCalendarGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EconomicCalendarGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnterpriseValueGetClientResponse parses an HTTP response from a EnterpriseValueGetWithResponse call
func ParseEnterpriseValueGetClientResponse(rsp *http.Response) (*EnterpriseValueGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnterpriseValueGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnterpriseValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgDisclosuresGetClientResponse parses an HTTP response from a EsgDisclosuresGetWithResponse call
func ParseEsgDisclosuresGetClientResponse(rsp *http.Response) (*EsgDisclosuresGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgDisclosuresGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgDisclosure
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEsgRatingsGetClientResponse parses an HTTP response from a EsgRatingsGetWithResponse call
func ParseEsgRatingsGetClientResponse(rsp *http.Response) (*EsgRatingsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EsgRatingsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EconomicEsgRating
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGradesLatestNewsGetClientResponse parses an HTTP response from a GradesLatestNewsGetWithResponse call
func ParseGradesLatestNewsGetClientResponse(rsp *http.Response) (*GradesLatestNewsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GradesLatestNewsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GradeNews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodFullGetClientResponse parses an HTTP response from a HistoricalPriceEodFullGetWithResponse call
func ParseHistoricalPriceEodFullGetClientResponse(rsp *http.Response) (*HistoricalPriceEodFullGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodFullGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHistoricalPriceEodLightGetClientResponse parses an HTTP response from a HistoricalPriceEodLightGetWithResponse call
func ParseHistoricalPriceEodLightGetClientResponse(rsp *http.Response) (*HistoricalPriceEodLightGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HistoricalPriceEodLightGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LightCandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementGetClientResponse parses an HTTP response from a IncomeStatementGetWithResponse call
func ParseIncomeStatementGetClientResponse(rsp *http.Response) (*IncomeStatementGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncomeStatementTTMGetClientResponse parses an HTTP response from a IncomeStatementTTMGetWithResponse call
func ParseIncomeStatementTTMGetClientResponse(rsp *http.Response) (*IncomeStatementTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncomeStatementTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncomeStatementTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingLatestGetClientResponse parses an HTTP response from a InsiderTradingLatestGetWithResponse call
func ParseInsiderTradingLatestGetClientResponse(rsp *http.Response) (*InsiderTradingLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsiderTradingSearchGetClientResponse parses an HTTP response from a InsiderTradingSearchGetWithResponse call
func ParseInsiderTradingSearchGetClientResponse(rsp *http.Response) (*InsiderTradingSearchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InsiderTradingSearchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InsiderTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsGetClientResponse parses an HTTP response from a KeyMetricsGetWithResponse call
func ParseKeyMetricsGetClientResponse(rsp *http.Response) (*KeyMetricsGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseKeyMetricsTTMGetClientResponse parses an HTTP response from a KeyMetricsTTMGetWithResponse call
func ParseKeyMetricsTTMGetClientResponse(rsp *http.Response) (*KeyMetricsTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeyMetricsTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []KeyMetricsTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationGetClientResponse parses an HTTP response from a MarketCapitalizationGetWithResponse call
func ParseMarketCapitalizationGetClientResponse(rsp *http.Response) (*MarketCapitalizationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarketCapitalizationBatchGetClientResponse parses an HTTP response from a MarketCapitalizationBatchGetWithResponse call
func ParseMarketCapitalizationBatchGetClientResponse(rsp *http.Response) (*MarketCapitalizationBatchGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketCapitalizationBatchGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanyCapitalization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNewsGeneralLatestGetClientResponse parses an HTTP response from a NewsGeneralLatestGetWithResponse call
func ParseNewsGeneralLatestGetClientResponse(rsp *http.Response) (*NewsGeneralLatestGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewsGeneralLatestGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsArticle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProfileGetClientResponse parses an HTTP response from a ProfileGetWithResponse call
func ParseProfileGetClientResponse(rsp *http.Response) (*ProfileGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProfileGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseQuoteGetClientResponse parses an HTTP response from a QuoteGetWithResponse call
func ParseQuoteGetClientResponse(rsp *http.Response) (*QuoteGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FullQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQuoteShortGetClientResponse parses an HTTP response from a QuoteShortGetWithResponse call
func ParseQuoteShortGetClientResponse(rsp *http.Response) (*QuoteShortGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuoteShortGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ShortQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatingsSnapshotGetClientResponse parses an HTTP response from a RatingsSnapshotGetWithResponse call
func ParseRatingsSnapshotGetClientResponse(rsp *http.Response) (*RatingsSnapshotGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatingsSnapshotGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatingSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosGetClientResponse parses an HTTP response from a RatiosGetWithResponse call
func ParseRatiosGetClientResponse(rsp *http.Response) (*RatiosGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FinancialRatios
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRatiosTTMGetClientResponse parses an HTTP response from a RatiosTTMGetWithResponse call
func ParseRatiosTTMGetClientResponse(rsp *http.Response) (*RatiosTTMGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RatiosTTMGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RatiosTTM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueGeographicSegmentationGetClientResponse parses an HTTP response from a RevenueGeographicSegmentationGetWithResponse call
func ParseRevenueGeographicSegmentationGetClientResponse(rsp *http.Response) (*RevenueGeographicSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueGeographicSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevenueProductSegmentationGetClientResponse parses an HTTP response from a RevenueProductSegmentationGetWithResponse call
func ParseRevenueProductSegmentationGetClientResponse(rsp *http.Response) (*RevenueProductSegmentationGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevenueProductSegmentationGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RevenueSegmentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchNameGetClientResponse parses an HTTP response from a SearchNameGetWithResponse call
func ParseSearchNameGetClientResponse(rsp *http.Response) (*SearchNameGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchNameGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchSymbolGetClientResponse parses an HTTP response from a SearchSymbolGetWithResponse call
func ParseSearchSymbolGetClientResponse(rsp *http.Response) (*SearchSymbolGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSymbolGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSharesFloatGetClientResponse parses an HTTP response from a SharesFloatGetWithResponse call
func ParseSharesFloatGetClientResponse(rsp *http.Response) (*SharesFloatGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SharesFloatGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySharesFloat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSplitsClientResponse parses an HTTP response from a GetSplitsWithResponse call
func ParseGetSplitsClientResponse(rsp *http.Response) (*GetSplitsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSplitsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSplitsCalendarClientResponse parses an HTTP response from a GetSplitsCalendarWithResponse call
func ParseGetSplitsCalendarClientResponse(rsp *http.Response) (*GetSplitsCalendarClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSplitsCalendarClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SplitEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStockListGetClientResponse parses an HTTP response from a StockListGetWithResponse call
func ParseStockListGetClientResponse(rsp *http.Response) (*StockListGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StockListGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompanySymbol
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTreasuryRatesGetClientResponse parses an HTTP response from a TreasuryRatesGetWithResponse call
func ParseTreasuryRatesGetClientResponse(rsp *http.Response) (*TreasuryRatesGetClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TreasuryRatesGetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TreasuryRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
